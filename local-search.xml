<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>P4 10-Congestion Aware Load Balancing</title>
    <link href="/2025/08/12/P4%2010-Congestion%20Aware%20Load%20Balancing/"/>
    <url>/2025/08/12/P4%2010-Congestion%20Aware%20Load%20Balancing/</url>
    
    <content type="html"><![CDATA[<h1 id="p4示例程序-10-负载均衡与带内遥测">P4示例程序-10负载均衡与带内遥测</h1><ul><li><h1 id="功能">功能</h1>基于ECMP的智能负载均衡和自适应拥塞探测方案：</li></ul><ol type="1"><li>基础功能：基于ECMP实现负载均衡；</li><li>带内遥测：收集队列的排队信息，将信息封装在数据包里传递，并返回回馈包；</li><li>动态绕路：当检测到路径上出现严重拥塞，就通知上图中的S1改变哈希的种子值，将流量通过其它路径传输。</li></ol><p>流程如下： 1.egress阶段检测到出端口的排队深度太大：克隆出一个反馈包，并recirculate到ingress阶段；2. ingress接收到反馈包：反馈包作为正常数据包进行转发； 3.首个交换机（例如上图中的交换机S1）接收到反馈包：调整ECMP哈希函数的种子值。</p><ul><li><h1 id="拓扑结构">拓扑结构</h1></li></ul><figure><img src="/2025/08/12/P4%2010-Congestion%20Aware%20Load%20Balancing/1.png" alt="拓扑结构"><figcaption aria-hidden="true">拓扑结构</figcaption></figure><ul><li><h1 id="代码">代码</h1></li></ul><ol type="1"><li><code>p4app.json</code> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;p4_src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;p4src/loadbalancer.p4&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cli&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;pcap_dump&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;enable_log&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;exec_scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;cmd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;python routing-controller.py&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;reboot_run&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;topology&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;assignment_strategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;l3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;bw&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;links&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s4&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h4&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s4&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s2&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s3&quot;</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s4&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s4&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;h1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;h2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;h3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;h4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;switches&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;s1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;s2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;s3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;s4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li>Headers <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">const</span> bit&lt;<span class="hljs-number">16</span>&gt; TYPE_IPV4 = <span class="hljs-number">0x800</span>; <span class="hljs-comment">// 定义以太网类型字段，IPv4协议的值</span><br><span class="hljs-type">const</span> bit&lt;<span class="hljs-number">16</span>&gt; TYPE_TELEMETRY = <span class="hljs-number">0x7777</span>; <span class="hljs-comment">// 自定义遥测报文类型标识</span><br><span class="hljs-type">const</span> bit&lt;<span class="hljs-number">16</span>&gt; TYPE_FEEDBACK = <span class="hljs-number">0x7778</span>; <span class="hljs-comment">// 自定义反馈报文类型标识</span><br><br><span class="hljs-type">const</span> bit&lt;<span class="hljs-number">4</span>&gt;  TYPE_EGRESS_HOST = <span class="hljs-number">1</span>; <span class="hljs-comment">// 出口为主机类型标识</span><br><span class="hljs-type">const</span> bit&lt;<span class="hljs-number">4</span>&gt;  TYPE_EGRESS_SWITCH = <span class="hljs-number">2</span>; <span class="hljs-comment">// 出口为交换机类型标识</span><br><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">9</span>&gt;  egressSpec_t; <span class="hljs-comment">// 定义9位宽的出口端口类型</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">48</span>&gt; macAddr_t; <span class="hljs-comment">// 定义48位宽的MAC地址类型</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">32</span>&gt; ip4Addr_t; <span class="hljs-comment">// 定义32位宽的IPv4地址类型</span><br><br>header <span class="hljs-type">ethernet_t</span> &#123; <span class="hljs-comment">// 定义以太网头部结构</span><br>    macAddr_t dstAddr; <span class="hljs-comment">// 目的MAC地址</span><br>    macAddr_t srcAddr; <span class="hljs-comment">// 源MAC地址</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   etherType; <span class="hljs-comment">// 以太网类型字段，标识下一层协议</span><br>&#125;<br><br>header <span class="hljs-type">telemetry_t</span> &#123; <span class="hljs-comment">// 定义遥测头部结构</span><br>    bit&lt;<span class="hljs-number">16</span>&gt; enq_qdepth; <span class="hljs-comment">// 入队列深度</span><br>    bit&lt;<span class="hljs-number">16</span>&gt; nextHeaderType; <span class="hljs-comment">// 下一个协议类型字段</span><br>&#125;<br><br>header <span class="hljs-type">ipv4_t</span> &#123; <span class="hljs-comment">// 定义IPv4头部结构</span><br>    bit&lt;<span class="hljs-number">4</span>&gt;    version; <span class="hljs-comment">// IP版本号，通常为4</span><br>    bit&lt;<span class="hljs-number">4</span>&gt;    ihl; <span class="hljs-comment">// 首部长度</span><br>    bit&lt;<span class="hljs-number">8</span>&gt;    tos; <span class="hljs-comment">// 服务类型（类型服务字段）</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   totalLen; <span class="hljs-comment">// 总长度</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   identification; <span class="hljs-comment">// 标识符</span><br>    bit&lt;<span class="hljs-number">3</span>&gt;    flags; <span class="hljs-comment">// 标志位</span><br>    bit&lt;<span class="hljs-number">13</span>&gt;   fragOffset; <span class="hljs-comment">// 分片偏移</span><br>    bit&lt;<span class="hljs-number">8</span>&gt;    ttl; <span class="hljs-comment">// 生存时间</span><br>    bit&lt;<span class="hljs-number">8</span>&gt;    protocol; <span class="hljs-comment">// 上层协议号</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   hdrChecksum; <span class="hljs-comment">// 头部校验和</span><br>    ip4Addr_t srcAddr; <span class="hljs-comment">// 源IP地址</span><br>    ip4Addr_t dstAddr; <span class="hljs-comment">// 目的IP地址</span><br>&#125;<br><br>header <span class="hljs-type">tcp_t</span>&#123; <span class="hljs-comment">// 定义TCP头部结构</span><br>    bit&lt;<span class="hljs-number">16</span>&gt; srcPort; <span class="hljs-comment">// 源端口号</span><br>    bit&lt;<span class="hljs-number">16</span>&gt; dstPort; <span class="hljs-comment">// 目的端口号</span><br>    bit&lt;<span class="hljs-number">32</span>&gt; seqNo; <span class="hljs-comment">// 序列号</span><br>    bit&lt;<span class="hljs-number">32</span>&gt; ackNo; <span class="hljs-comment">// 确认号</span><br>    bit&lt;<span class="hljs-number">4</span>&gt;  dataOffset; <span class="hljs-comment">// 数据偏移，TCP头部长度</span><br>    bit&lt;<span class="hljs-number">4</span>&gt;  res; <span class="hljs-comment">// 保留字段</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  cwr; <span class="hljs-comment">// 拥塞窗口减少标志</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  ece; <span class="hljs-comment">// ECN回显标志</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  urg; <span class="hljs-comment">// 紧急指针有效标志</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  ack; <span class="hljs-comment">// 确认号有效标志</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  psh; <span class="hljs-comment">// 推送功能标志</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  rst; <span class="hljs-comment">// 连接重置标志</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  syn; <span class="hljs-comment">// 同步序列号标志</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  fin; <span class="hljs-comment">// 结束标志</span><br>    bit&lt;<span class="hljs-number">16</span>&gt; window; <span class="hljs-comment">// 窗口大小</span><br>    bit&lt;<span class="hljs-number">16</span>&gt; checksum; <span class="hljs-comment">// 校验和</span><br>    bit&lt;<span class="hljs-number">16</span>&gt; urgentPtr; <span class="hljs-comment">// 紧急指针</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">feedback_t</span> &#123;</span> <span class="hljs-comment">// 反馈结构体定义（当前为空）</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">metadata</span> &#123;</span> <span class="hljs-comment">// 定义元数据结构</span><br>    bit&lt;<span class="hljs-number">14</span>&gt; ecmp_hash; <span class="hljs-comment">// ECMP哈希值</span><br>    bit&lt;<span class="hljs-number">14</span>&gt; ecmp_group_id; <span class="hljs-comment">// ECMP组ID</span><br>    bit&lt;<span class="hljs-number">4</span>&gt;  egress_type; <span class="hljs-comment">// 出口类型</span><br>    bit&lt;<span class="hljs-number">48</span>&gt; feedback_ts; <span class="hljs-comment">// 反馈时间戳</span><br>    bit&lt;<span class="hljs-number">12</span>&gt; feedback_register_index; <span class="hljs-comment">// 反馈寄存器索引</span><br>    @field_list(<span class="hljs-number">0</span>) <span class="hljs-comment">// 反馈字段列表，索引为0（注解）</span><br>    <span class="hljs-type">feedback_t</span> feedback; <span class="hljs-comment">// 反馈信息结构体</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">headers</span> &#123;</span> <span class="hljs-comment">// 定义报文头集合结构</span><br>    <span class="hljs-type">ethernet_t</span>   ethernet; <span class="hljs-comment">// 以太网头</span><br>    <span class="hljs-type">telemetry_t</span>  telemetry; <span class="hljs-comment">// 遥测头</span><br>    <span class="hljs-type">ipv4_t</span>       ipv4; <span class="hljs-comment">// IPv4头</span><br>    <span class="hljs-type">tcp_t</span>        tcp; <span class="hljs-comment">// TCP头</span><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>Parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C">parser <span class="hljs-title function_">MyParser</span><span class="hljs-params">(packet_in packet, <span class="hljs-comment">// 定义解析器，输入为packet</span></span><br><span class="hljs-params">                out headers hdr, <span class="hljs-comment">// 输出解析出的headers</span></span><br><span class="hljs-params">                inout metadata meta, <span class="hljs-comment">// 传入并修改的元数据</span></span><br><span class="hljs-params">                inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123; <span class="hljs-comment">// 标准元数据输入输出</span><br><br>    state start &#123; <span class="hljs-comment">// 解析起始状态</span><br>        transition parse_ethernet; <span class="hljs-comment">// 转到解析以太网头</span><br>    &#125;<br><br>    state parse_ethernet &#123; <span class="hljs-comment">// 解析以太网头状态</span><br>        packet.extract(hdr.ethernet); <span class="hljs-comment">// 从包中提取以太网头</span><br>        transition <span class="hljs-title function_">select</span><span class="hljs-params">(hdr.ethernet.etherType)</span>&#123; <span class="hljs-comment">// 根据以太网类型字段选择下一状态</span><br>            TYPE_IPV4: parse_ipv4; <span class="hljs-comment">// 如果是IPv4，进入IPv4解析状态</span><br>            TYPE_TELEMETRY: parse_telemetry; <span class="hljs-comment">// 如果是遥测报文，进入遥测解析状态</span><br>            TYPE_FEEDBACK: parse_ipv4; <span class="hljs-comment">// 反馈类型当作IPv4解析</span><br>            <span class="hljs-keyword">default</span>: accept; <span class="hljs-comment">// 其它类型直接接受，停止解析</span><br>        &#125;<br>    &#125;<br><br>    state parse_telemetry &#123; <span class="hljs-comment">// 解析遥测头状态</span><br>        packet.extract(hdr.telemetry); <span class="hljs-comment">// 提取遥测头</span><br>        transition <span class="hljs-title function_">select</span><span class="hljs-params">(hdr.telemetry.nextHeaderType)</span>&#123; <span class="hljs-comment">// 根据遥测头中下一协议字段选择</span><br>            TYPE_IPV4: parse_ipv4; <span class="hljs-comment">// 如果是IPv4，继续解析IPv4头</span><br>            <span class="hljs-keyword">default</span>: accept; <span class="hljs-comment">// 否则结束解析</span><br>        &#125;<br>    &#125;<br><br>    state parse_ipv4 &#123; <span class="hljs-comment">// 解析IPv4头状态</span><br>        packet.extract(hdr.ipv4); <span class="hljs-comment">// 提取IPv4头</span><br>        transition <span class="hljs-title function_">select</span><span class="hljs-params">(hdr.ipv4.protocol)</span>&#123; <span class="hljs-comment">// 根据IPv4中的协议字段选择</span><br>            <span class="hljs-number">6</span> : parse_tcp; <span class="hljs-comment">// 协议号6为TCP，继续解析TCP头</span><br>            <span class="hljs-keyword">default</span>: accept; <span class="hljs-comment">// 其他协议直接结束解析</span><br>        &#125;<br>    &#125;<br><br>    state parse_tcp &#123; <span class="hljs-comment">// 解析TCP头状态</span><br>        packet.extract(hdr.tcp); <span class="hljs-comment">// 提取TCP头</span><br>        transition accept; <span class="hljs-comment">// 解析结束，接受包</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Verification <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyVerifyChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123; <span class="hljs-comment">// 校验和验证控制块，输入输出头部和元数据</span><br>    apply &#123;  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Ingress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyIngress</span><span class="hljs-params">(inout headers hdr, <span class="hljs-comment">// ingress处理控制块，输入输出头部</span></span><br><span class="hljs-params">                  inout metadata meta, <span class="hljs-comment">// 输入输出元数据</span></span><br><span class="hljs-params">                  inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123; <span class="hljs-comment">// 标准元数据输入输出</span><br><br>    <span class="hljs-keyword">register</span> &lt;bit&lt;REGISTER_WIDTH&gt;&gt;(REGISTER_SIZE) loadbalance_seed; <span class="hljs-comment">// 定义负载均衡种子寄存器，宽度32位，大小1024</span><br><br>    action <span class="hljs-title function_">drop</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 丢弃包动作</span><br>        mark_to_drop(standard_metadata); <span class="hljs-comment">// 标记包为丢弃</span><br>    &#125;<br><br>    action <span class="hljs-title function_">set_egress_type</span> <span class="hljs-params">(bit&lt;<span class="hljs-number">4</span>&gt; egress_type)</span>&#123; <span class="hljs-comment">// 设置出口类型动作，传入4位类型码</span><br>        meta.egress_type = egress_type; <span class="hljs-comment">// 将传入值写入元数据egress_type</span><br>    &#125;<br><br>    table egress_type &#123; <span class="hljs-comment">// 定义出口类型匹配表</span><br>        key = &#123;<br>            standard_metadata.egress_spec: exact; <span class="hljs-comment">// 精确匹配出口端口号</span><br>        &#125;<br><br>        actions = &#123;<br>            set_egress_type; <span class="hljs-comment">// 设置出口类型动作</span><br>            NoAction; <span class="hljs-comment">// 不执行任何动作</span><br>        &#125;<br>        size=<span class="hljs-number">64</span>; <span class="hljs-comment">// 表大小为64条</span><br>        default_action = NoAction; <span class="hljs-comment">// 默认不执行任何动作</span><br>    &#125;<br><br>    action <span class="hljs-title function_">update_flow_seed</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 更新流种子动作</span><br>        bit&lt;<span class="hljs-number">12</span>&gt; register_index; <span class="hljs-comment">// 12位寄存器索引变量</span><br>        bit&lt;<span class="hljs-number">32</span>&gt; seed; <span class="hljs-comment">// 32位随机种子变量</span><br>        random(seed, (bit&lt;<span class="hljs-number">32</span>&gt;)<span class="hljs-number">0</span>, (bit&lt;<span class="hljs-number">32</span>&gt;)<span class="hljs-number">1234567</span>); <span class="hljs-comment">// 生成0到1234567间随机数写入seed</span><br><br>        hash(register_index, <span class="hljs-comment">// 计算寄存器索引hash值</span><br>    HashAlgorithm.crc16, <span class="hljs-comment">// 采用CRC16算法</span><br>    (bit&lt;<span class="hljs-number">1</span>&gt;)<span class="hljs-number">0</span>, <span class="hljs-comment">// 初始种子0</span><br>    &#123; hdr.ipv4.dstAddr, <span class="hljs-comment">// hash输入字段：目的IP</span><br>      hdr.ipv4.srcAddr, <span class="hljs-comment">// 源IP</span><br>              hdr.tcp.srcPort, <span class="hljs-comment">// TCP源端口</span><br>              hdr.tcp.dstPort, <span class="hljs-comment">// TCP目的端口</span><br>              hdr.ipv4.protocol&#125;, <span class="hljs-comment">// IP协议号</span><br>      (bit&lt;<span class="hljs-number">12</span>&gt;)REGISTER_SIZE); <span class="hljs-comment">// 输出范围为REGISTER_SIZE（1024）</span><br><br>loadbalance_seed.write((bit&lt;<span class="hljs-number">32</span>&gt;)register_index, seed); <span class="hljs-comment">// 将随机种子写入负载均衡寄存器对应位置</span><br>    &#125;<br><br>    action <span class="hljs-title function_">ecmp_group</span><span class="hljs-params">(bit&lt;<span class="hljs-number">14</span>&gt; ecmp_group_id, bit&lt;<span class="hljs-number">16</span>&gt; num_nhops)</span>&#123; <span class="hljs-comment">// ECMP分组动作，传入组ID和下一跳数</span><br><br>        bit&lt;<span class="hljs-number">12</span>&gt; register_index; <span class="hljs-comment">// 12位寄存器索引变量</span><br>        bit&lt;<span class="hljs-number">32</span>&gt; seed; <span class="hljs-comment">// 32位随机种子变量</span><br><br>        hash(register_index, <span class="hljs-comment">// 计算寄存器索引hash值</span><br>    HashAlgorithm.crc16, <span class="hljs-comment">// CRC16算法</span><br>    (bit&lt;<span class="hljs-number">1</span>&gt;)<span class="hljs-number">0</span>, <span class="hljs-comment">// 初始种子0</span><br>    &#123; hdr.ipv4.srcAddr, <span class="hljs-comment">// hash输入字段：源IP</span><br>      hdr.ipv4.dstAddr, <span class="hljs-comment">// 目的IP</span><br>              hdr.tcp.srcPort, <span class="hljs-comment">// TCP源端口</span><br>              hdr.tcp.dstPort, <span class="hljs-comment">// TCP目的端口</span><br>              hdr.ipv4.protocol&#125;, <span class="hljs-comment">// IP协议号</span><br>      (bit&lt;<span class="hljs-number">12</span>&gt;)REGISTER_SIZE); <span class="hljs-comment">// 输出范围1024</span><br><br>loadbalance_seed.read(seed, (bit&lt;<span class="hljs-number">32</span>&gt;)register_index); <span class="hljs-comment">// 从寄存器读取对应随机种子</span><br><br>        hash(meta.ecmp_hash, <span class="hljs-comment">// 计算最终ECMP哈希值</span><br>    HashAlgorithm.crc16, <span class="hljs-comment">// CRC16算法</span><br>    (bit&lt;<span class="hljs-number">1</span>&gt;)<span class="hljs-number">0</span>, <span class="hljs-comment">// 初始种子0</span><br>    &#123; hdr.ipv4.srcAddr, <span class="hljs-comment">// hash输入字段：源IP</span><br>      hdr.ipv4.dstAddr, <span class="hljs-comment">// 目的IP</span><br>              hdr.tcp.srcPort, <span class="hljs-comment">// TCP源端口</span><br>              hdr.tcp.dstPort, <span class="hljs-comment">// TCP目的端口</span><br>              hdr.ipv4.protocol, <span class="hljs-comment">// IP协议号</span><br>              seed&#125;, <span class="hljs-comment">// 加入负载均衡随机种子增强hash随机性</span><br>      num_nhops); <span class="hljs-comment">// hash结果模num_nhops作为选择</span><br>    meta.ecmp_group_id = ecmp_group_id; <span class="hljs-comment">// 设置元数据ECMP组ID</span><br>    &#125;<br><br>    action <span class="hljs-title function_">set_nhop</span><span class="hljs-params">(macAddr_t dstAddr, egressSpec_t port)</span> &#123; <span class="hljs-comment">// 设置下一跳动作，传入下一跳MAC和出口端口</span><br><br>        <span class="hljs-comment">//set the src mac address as the previous dst, this is not correct right?</span><br>        hdr.ethernet.srcAddr = hdr.ethernet.dstAddr; <span class="hljs-comment">// 将以太网源MAC设置为当前目的MAC（注释质疑正确性）</span><br><br>       <span class="hljs-comment">//set the destination mac address that we got from the match in the table</span><br>        hdr.ethernet.dstAddr = dstAddr; <span class="hljs-comment">// 设置目的MAC地址为查表得到的下一跳MAC</span><br><br>        <span class="hljs-comment">//set the output port that we also get from the table</span><br>        standard_metadata.egress_spec = port; <span class="hljs-comment">// 设置出口端口为查表得到的端口</span><br><br>        <span class="hljs-comment">//decrease ttl by 1</span><br>        hdr.ipv4.ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>; <span class="hljs-comment">// IPv4生存时间减1，防止环路</span><br>    &#125;<br><br>    table ecmp_group_to_nhop &#123; <span class="hljs-comment">// ECMP组到下一跳映射表</span><br>        key = &#123;<br>            meta.ecmp_group_id: exact; <span class="hljs-comment">// 精确匹配ECMP组ID</span><br>            meta.ecmp_hash: exact; <span class="hljs-comment">// 精确匹配ECMP哈希值</span><br>        &#125;<br>        actions = &#123;<br>            drop; <span class="hljs-comment">// 丢弃包动作</span><br>            set_nhop; <span class="hljs-comment">// 设置下一跳动作</span><br>        &#125;<br>        size = <span class="hljs-number">1024</span>; <span class="hljs-comment">// 表大小1024</span><br>    &#125;<br><br>    table ipv4_lpm &#123; <span class="hljs-comment">// IPv4最长前缀匹配表，用于路由查找</span><br>        key = &#123;<br>            hdr.ipv4.dstAddr: lpm; <span class="hljs-comment">// 以目的IP做最长前缀匹配</span><br>        &#125;<br>        actions = &#123;<br>            set_nhop; <span class="hljs-comment">// 设置下一跳动作</span><br>            ecmp_group; <span class="hljs-comment">// ECMP分组动作</span><br>            drop; <span class="hljs-comment">// 丢弃动作</span><br>        &#125;<br>        size = <span class="hljs-number">1024</span>; <span class="hljs-comment">// 表大小1024</span><br>        default_action = drop; <span class="hljs-comment">// 默认丢弃</span><br>    &#125;<br><br>    apply &#123; <span class="hljs-comment">// 主体处理逻辑</span><br><br>        <span class="hljs-keyword">if</span> (standard_metadata.instance_type == PKT_INSTANCE_TYPE_INGRESS_RECIRC)&#123; <span class="hljs-comment">// 如果是ingress重循环包</span><br>            bit&lt;<span class="hljs-number">32</span>&gt; src_ip = hdr.ipv4.srcAddr; <span class="hljs-comment">// 保存源IP</span><br>            hdr.ipv4.srcAddr = hdr.ipv4.dstAddr; <span class="hljs-comment">// 交换源和目的IP</span><br>            hdr.ipv4.dstAddr = src_ip;<br>            hdr.ethernet.etherType = TYPE_FEEDBACK; <span class="hljs-comment">// 以太网类型改为反馈类型</span><br>        &#125;<br><br>        <span class="hljs-comment">//Only forward packets if they are IP and TTL &gt; 1</span><br>        <span class="hljs-keyword">if</span> (hdr.ipv4.isValid() &amp;&amp; hdr.ipv4.ttl &gt; <span class="hljs-number">1</span>)&#123; <span class="hljs-comment">// 仅处理有效IPv4包且TTL大于1的包</span><br>            <span class="hljs-keyword">switch</span> (ipv4_lpm.apply().action_run)&#123; <span class="hljs-comment">// 应用IPv4最长前缀匹配表</span><br>                ecmp_group: &#123; <span class="hljs-comment">// 如果执行动作为ECMP分组</span><br>                    ecmp_group_to_nhop.apply(); <span class="hljs-comment">// 执行ECMP组到下一跳表</span><br>                &#125;<br>            &#125;<br>        &#125;<br><br>        egress_type.apply(); <span class="hljs-comment">// 应用出口类型匹配表</span><br><br>        <span class="hljs-keyword">if</span> (standard_metadata.instance_type == PKT_INSTANCE_TYPE_NORMAL &amp;&amp; hdr.ethernet.etherType == TYPE_FEEDBACK &amp;&amp; meta.egress_type == TYPE_EGRESS_HOST)&#123;<br>            <span class="hljs-comment">// 如果是普通包，类型是反馈，且出口为主机类型</span><br>            update_flow_seed(); <span class="hljs-comment">// 更新流负载均衡种子</span><br>            drop(); <span class="hljs-comment">// 丢弃该包</span><br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>Egress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyEgress</span><span class="hljs-params">(inout headers hdr, <span class="hljs-comment">// 出口处理控制块</span></span><br><span class="hljs-params">                 inout metadata meta, <span class="hljs-comment">// 元数据</span></span><br><span class="hljs-params">                 inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123; <span class="hljs-comment">// 标准元数据</span><br><br>    <span class="hljs-keyword">register</span> &lt;bit&lt;<span class="hljs-number">48</span>&gt;&gt;(REGISTER_SIZE) feedback_ts; <span class="hljs-comment">// 反馈时间戳寄存器，宽度48位，大小1024</span><br><br>    action <span class="hljs-title function_">read_feedback_ts</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 读取反馈时间戳动作</span><br><br>        hash(meta.feedback_register_index, <span class="hljs-comment">// 计算反馈寄存器索引hash值</span><br>    HashAlgorithm.crc16,<br>    (bit&lt;<span class="hljs-number">1</span>&gt;)<span class="hljs-number">0</span>,<br>    &#123; hdr.ipv4.srcAddr,<br>      hdr.ipv4.dstAddr,<br>              hdr.tcp.srcPort,<br>              hdr.tcp.dstPort,<br>              hdr.ipv4.protocol&#125;,<br>      (bit&lt;<span class="hljs-number">12</span>&gt;)REGISTER_SIZE);<br><br>feedback_ts.read(meta.feedback_ts, (bit&lt;<span class="hljs-number">32</span>&gt;)meta.feedback_register_index); <span class="hljs-comment">// 从寄存器读取时间戳</span><br>    &#125;<br><br>    apply &#123; <span class="hljs-comment">// 出口处理主逻辑</span><br>        <span class="hljs-comment">//Cloned packet, used to generate probe</span><br>        <span class="hljs-keyword">if</span> (standard_metadata.instance_type == PKT_INSTANCE_TYPE_EGRESS_CLONE)&#123; <span class="hljs-comment">// 如果是egress克隆包</span><br>            recirculate_preserving_field_list(<span class="hljs-number">0</span>); <span class="hljs-comment">// 重新循环报文，保持字段列表0的内容</span><br>        &#125;<br><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (standard_metadata.instance_type == PKT_INSTANCE_TYPE_NORMAL &amp;&amp; hdr.ethernet.etherType != TYPE_FEEDBACK) &#123;<br>            <span class="hljs-comment">// 普通包且不是反馈包时处理</span><br><br>            <span class="hljs-keyword">if</span> (hdr.tcp.isValid())&#123; <span class="hljs-comment">// TCP头有效</span><br>                <span class="hljs-keyword">if</span> (hdr.telemetry.isValid())&#123; <span class="hljs-comment">// 遥测头有效</span><br>                    <span class="hljs-keyword">if</span> (hdr.telemetry.enq_qdepth &lt; (bit&lt;<span class="hljs-number">16</span>&gt;)standard_metadata.enq_qdepth &amp;&amp; meta.egress_type == TYPE_EGRESS_SWITCH)&#123;<br>                        <span class="hljs-comment">// 如果当前遥测队列深度小于当前排队深度，且出口为交换机</span><br>                        hdr.telemetry.enq_qdepth = (bit&lt;<span class="hljs-number">16</span>&gt;)standard_metadata.enq_qdepth; <span class="hljs-comment">// 更新遥测队列深度</span><br>                    &#125;<br>                    <span class="hljs-comment">//If egresss. We do not update the queue of the last hop because this can not be changed anyways.</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (meta.egress_type == TYPE_EGRESS_HOST)&#123;<br>                        <span class="hljs-comment">// 出口为主机时，不更新最后一跳队列深度</span><br>                        hdr.ethernet.etherType = TYPE_IPV4; <span class="hljs-comment">// 恢复以太网类型为IPv4</span><br>                        hdr.telemetry.setInvalid(); <span class="hljs-comment">// 标记遥测头无效</span><br><br>                        <span class="hljs-comment">//clone packet if above threshold</span><br>                        <span class="hljs-keyword">if</span> (hdr.telemetry.enq_qdepth &gt; <span class="hljs-number">50</span>)&#123; <span class="hljs-comment">// 队列深度超过阈值时克隆探针包</span><br>                            read_feedback_ts(); <span class="hljs-comment">// 读取反馈时间戳</span><br>                            bit&lt;<span class="hljs-number">48</span>&gt; backoff;<br>                            random(backoff, <span class="hljs-number">48</span>w500000, <span class="hljs-number">48</span>w1000000); <span class="hljs-comment">// 生成随机后备时间，500ms到1s</span><br>                            <span class="hljs-keyword">if</span> ((standard_metadata.ingress_global_timestamp - meta.feedback_ts) &gt; backoff)&#123;<br>                        feedback_ts.write((bit&lt;<span class="hljs-number">32</span>&gt;)meta.feedback_register_index, standard_metadata.ingress_global_timestamp);<br>                        bit&lt;<span class="hljs-number">8</span>&gt; probability;<br>                        random(probability, <span class="hljs-number">8</span>w0, <span class="hljs-number">8</span>w3); <span class="hljs-comment">// 生成0~3的随机数</span><br>                        <span class="hljs-keyword">if</span> (probability == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 25%概率执行克隆</span><br>                                    clone(CloneType.E2E, <span class="hljs-number">100</span>); <span class="hljs-comment">// 克隆包，优先级100</span><br>                                &#125;<br>                             &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//If ingress and next hop is a switch</span><br>                    <span class="hljs-keyword">if</span> (meta.egress_type == TYPE_EGRESS_SWITCH)&#123; <span class="hljs-comment">// 遥测头无效，且出口是交换机时</span><br>                        hdr.telemetry.setValid(); <span class="hljs-comment">// 标记遥测头有效</span><br>                        hdr.telemetry.enq_qdepth = (bit&lt;<span class="hljs-number">16</span>&gt;)standard_metadata.enq_qdepth; <span class="hljs-comment">// 设置遥测队列深度</span><br>                        hdr.ethernet.etherType = TYPE_TELEMETRY; <span class="hljs-comment">// 以太网类型设置为遥测类型</span><br>                        hdr.telemetry.nextHeaderType = TYPE_IPV4; <span class="hljs-comment">// 遥测头指明下一层为IPv4</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Computation <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyComputeChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123; <span class="hljs-comment">// 校验和计算控制块</span><br>    apply &#123;<br>update_checksum(<br>    hdr.ipv4.isValid(), <span class="hljs-comment">// IPv4头有效才计算</span><br>            &#123; hdr.ipv4.version, <span class="hljs-comment">// 计算校验和的字段列表，包含IPv4头部重要字段</span><br>      hdr.ipv4.ihl,<br>              hdr.ipv4.tos,<br>              hdr.ipv4.totalLen,<br>              hdr.ipv4.identification,<br>              hdr.ipv4.flags,<br>              hdr.ipv4.fragOffset,<br>              hdr.ipv4.ttl,<br>              hdr.ipv4.protocol,<br>              hdr.ipv4.srcAddr,<br>              hdr.ipv4.dstAddr&#125;,<br>              hdr.ipv4.hdrChecksum, <span class="hljs-comment">// 计算结果写入头部校验和字段</span><br>              HashAlgorithm.csum16); <span class="hljs-comment">// 采用16位校验和算法</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>DE parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyDeparser</span><span class="hljs-params">(packet_out packet, in headers hdr)</span> &#123; <span class="hljs-comment">// 出口解解析器，将头部重新打包</span><br>    apply &#123;<br><br>        packet.emit(hdr.ethernet); <span class="hljs-comment">// 发送以太网头</span><br>        packet.emit(hdr.telemetry); <span class="hljs-comment">// 发送遥测头</span><br>        packet.emit(hdr.ipv4); <span class="hljs-comment">// 发送IPv4头</span><br>        packet.emit(hdr.tcp); <span class="hljs-comment">// 发送TCP头</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Switch <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C">V1Switch( <br>MyParser(), <br>MyVerifyChecksum(), <br>MyIngress(),<br>MyEgress(),<br>MyComputeChecksum(),<br>MyDeparser() <br>) main; <br></code></pre></td></tr></table></figure></li><li><code>routing-controller.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> p4utils.utils.helper <span class="hljs-keyword">import</span> load_topo  <span class="hljs-comment"># 导入加载拓扑的函数</span><br><span class="hljs-keyword">from</span> p4utils.utils.sswitch_thrift_API <span class="hljs-keyword">import</span> SimpleSwitchThriftAPI  <span class="hljs-comment"># 导入简单交换机Thrift API类</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RoutingController</span>(<span class="hljs-title class_ inherited__">object</span>):  <span class="hljs-comment"># 定义路由控制器类</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 构造函数初始化</span><br><br>        <span class="hljs-variable language_">self</span>.topo = load_topo(<span class="hljs-string">&#x27;topology.json&#x27;</span>)  <span class="hljs-comment"># 加载网络拓扑文件</span><br>        <span class="hljs-variable language_">self</span>.controllers = &#123;&#125;  <span class="hljs-comment"># 初始化一个字典保存交换机控制器对象</span><br>        <span class="hljs-variable language_">self</span>.init()  <span class="hljs-comment"># 调用初始化方法</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 初始化流程</span><br>        <span class="hljs-variable language_">self</span>.connect_to_switches()  <span class="hljs-comment"># 连接所有交换机的控制接口</span><br>        <span class="hljs-variable language_">self</span>.reset_states()  <span class="hljs-comment"># 重置所有交换机状态</span><br>        <span class="hljs-variable language_">self</span>.set_table_defaults()  <span class="hljs-comment"># 设置表的默认行为</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reset_states</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 重置状态方法</span><br>        [controller.reset_state() <span class="hljs-keyword">for</span> controller <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.controllers.values()]  <span class="hljs-comment"># 遍历所有控制器调用reset_state</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">connect_to_switches</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 连接交换机控制接口</span><br>        <span class="hljs-keyword">for</span> p4switch <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.topo.get_p4switches():  <span class="hljs-comment"># 遍历拓扑中所有P4交换机</span><br>            thrift_port = <span class="hljs-variable language_">self</span>.topo.get_thrift_port(p4switch)  <span class="hljs-comment"># 获取交换机对应的thrift端口号</span><br>            <span class="hljs-variable language_">self</span>.controllers[p4switch] = SimpleSwitchThriftAPI(thrift_port)  <span class="hljs-comment"># 用thrift端口初始化控制器对象并保存</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_table_defaults</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 设置所有交换机表的默认动作</span><br>        <span class="hljs-keyword">for</span> controller <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.controllers.values():  <span class="hljs-comment"># 遍历所有控制器</span><br>            controller.table_set_default(<span class="hljs-string">&quot;ipv4_lpm&quot;</span>, <span class="hljs-string">&quot;drop&quot;</span>, [])  <span class="hljs-comment"># ipv4_lpm表默认动作设为丢弃</span><br>            controller.table_set_default(<span class="hljs-string">&quot;ecmp_group_to_nhop&quot;</span>, <span class="hljs-string">&quot;drop&quot;</span>, [])  <span class="hljs-comment"># ecmp_group_to_nhop表默认动作设为丢弃</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_mirroring_ids</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 为所有交换机添加镜像ID</span><br><br>        <span class="hljs-keyword">for</span> sw_name, controller <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.controllers.items():  <span class="hljs-comment"># 遍历所有交换机控制器</span><br>            controller.mirroring_add(<span class="hljs-number">100</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment"># 添加镜像ID为100，端口1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_egress_type_table</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 设置出口类型表</span><br><br>        <span class="hljs-keyword">for</span> sw_name, controller <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.controllers.items():  <span class="hljs-comment"># 遍历所有交换机</span><br>            <span class="hljs-keyword">for</span> intf, node <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.topo.get_interfaces_to_node(sw_name).items():  <span class="hljs-comment"># 遍历交换机接口对应的节点</span><br>                port_number = <span class="hljs-variable language_">self</span>.topo.interface_to_port(sw_name, intf)  <span class="hljs-comment"># 获取接口对应端口号</span><br><br>                <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.topo.isHost(node):  <span class="hljs-comment"># 如果节点是主机</span><br>                    node_type_num = <span class="hljs-number">1</span>  <span class="hljs-comment"># 类型编码为1</span><br>                <span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.topo.isP4Switch(node):  <span class="hljs-comment"># 如果节点是P4交换机</span><br>                    node_type_num = <span class="hljs-number">2</span>  <span class="hljs-comment"># 类型编码为2</span><br><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;table_add at &#123;&#125;:&quot;</span>.<span class="hljs-built_in">format</span>(sw_name))  <span class="hljs-comment"># 打印操作信息</span><br>                <span class="hljs-variable language_">self</span>.controllers[sw_name].table_add(<span class="hljs-string">&quot;egress_type&quot;</span>, <span class="hljs-string">&quot;set_egress_type&quot;</span>, [<span class="hljs-built_in">str</span>(port_number)], [<span class="hljs-built_in">str</span>(node_type_num)])<br>                <span class="hljs-comment"># 添加egress_type表项，匹配端口号，设置对应出口类型</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">route</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 路由表配置函数</span><br><br>        switch_ecmp_groups = &#123;sw_name:&#123;&#125; <span class="hljs-keyword">for</span> sw_name <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.topo.get_p4switches().keys()&#125;  <br>        <span class="hljs-comment"># 初始化每台交换机的ECMP组字典，key为交换机名，值为空字典</span><br><br>        <span class="hljs-keyword">for</span> sw_name, controller <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.controllers.items():  <span class="hljs-comment"># 遍历所有交换机控制器</span><br>            <span class="hljs-keyword">for</span> sw_dst <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.topo.get_p4switches():  <span class="hljs-comment"># 遍历所有目的交换机</span><br><br>                <span class="hljs-comment">#if its ourselves we create direct connections</span><br>                <span class="hljs-keyword">if</span> sw_name == sw_dst:  <span class="hljs-comment"># 如果源交换机和目的交换机是同一个（直连情况）</span><br>                    <span class="hljs-keyword">for</span> host <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.topo.get_hosts_connected_to(sw_name):  <span class="hljs-comment"># 遍历连接到该交换机的主机</span><br>                        sw_port = <span class="hljs-variable language_">self</span>.topo.node_to_node_port_num(sw_name, host)  <span class="hljs-comment"># 获取交换机到主机的端口号</span><br>                        host_ip = <span class="hljs-variable language_">self</span>.topo.get_host_ip(host) + <span class="hljs-string">&quot;/32&quot;</span>  <span class="hljs-comment"># 获取主机IP，设置子网掩码为32位</span><br>                        host_mac = <span class="hljs-variable language_">self</span>.topo.get_host_mac(host)  <span class="hljs-comment"># 获取主机MAC地址</span><br><br>                        <span class="hljs-comment">#add rule</span><br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;table_add at &#123;&#125;:&quot;</span>.<span class="hljs-built_in">format</span>(sw_name))  <span class="hljs-comment"># 打印添加表项信息</span><br>                        <span class="hljs-variable language_">self</span>.controllers[sw_name].table_add(<span class="hljs-string">&quot;ipv4_lpm&quot;</span>, <span class="hljs-string">&quot;set_nhop&quot;</span>, [<span class="hljs-built_in">str</span>(host_ip)], [<span class="hljs-built_in">str</span>(host_mac), <span class="hljs-built_in">str</span>(sw_port)])<br>                        <span class="hljs-comment"># 在ipv4_lpm表添加直连主机下一跳条目</span><br><br>                <span class="hljs-comment">#check if there are directly connected hosts</span><br>                <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 如果目的交换机和源交换机不同（多跳情况）</span><br>                    <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.topo.get_hosts_connected_to(sw_dst):  <span class="hljs-comment"># 如果目的交换机有连接主机</span><br>                        paths = <span class="hljs-variable language_">self</span>.topo.get_shortest_paths_between_nodes(sw_name, sw_dst)  <span class="hljs-comment"># 获取源交换机到目的交换机所有最短路径</span><br>                        <span class="hljs-keyword">for</span> host <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.topo.get_hosts_connected_to(sw_dst):  <span class="hljs-comment"># 遍历目的交换机连接的主机</span><br><br>                            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(paths) == <span class="hljs-number">1</span>:  <span class="hljs-comment"># 如果只有一条最短路径</span><br>                                next_hop = paths[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]  <span class="hljs-comment"># 下一跳节点为路径上的第二个节点</span><br><br>                                host_ip = <span class="hljs-variable language_">self</span>.topo.get_host_ip(host) + <span class="hljs-string">&quot;/24&quot;</span>  <span class="hljs-comment"># 获取主机IP，子网掩码24位</span><br>                                sw_port = <span class="hljs-variable language_">self</span>.topo.node_to_node_port_num(sw_name, next_hop)  <span class="hljs-comment"># 获取源交换机到下一跳端口号</span><br>                                dst_sw_mac = <span class="hljs-variable language_">self</span>.topo.node_to_node_mac(next_hop, sw_name)  <span class="hljs-comment"># 获取下一跳到源交换机的MAC地址</span><br><br>                                <span class="hljs-comment">#add rule</span><br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;table_add at &#123;&#125;:&quot;</span>.<span class="hljs-built_in">format</span>(sw_name))  <span class="hljs-comment"># 打印信息</span><br>                                <span class="hljs-variable language_">self</span>.controllers[sw_name].table_add(<span class="hljs-string">&quot;ipv4_lpm&quot;</span>, <span class="hljs-string">&quot;set_nhop&quot;</span>, [<span class="hljs-built_in">str</span>(host_ip)],<br>                                                                    [<span class="hljs-built_in">str</span>(dst_sw_mac), <span class="hljs-built_in">str</span>(sw_port)])<br>                                <span class="hljs-comment"># 添加下一跳规则</span><br><br>                            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(paths) &gt; <span class="hljs-number">1</span>:  <span class="hljs-comment"># 多条最短路径（ECMP）</span><br>                                next_hops = [x[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> paths]  <span class="hljs-comment"># 提取所有下一跳节点列表</span><br>                                dst_macs_ports = [(<span class="hljs-variable language_">self</span>.topo.node_to_node_mac(next_hop, sw_name),<br>                                                   <span class="hljs-variable language_">self</span>.topo.node_to_node_port_num(sw_name, next_hop))<br>                                                  <span class="hljs-keyword">for</span> next_hop <span class="hljs-keyword">in</span> next_hops]  <span class="hljs-comment"># 获取每个下一跳的MAC和端口号</span><br>                                host_ip = <span class="hljs-variable language_">self</span>.topo.get_host_ip(host) + <span class="hljs-string">&quot;/24&quot;</span>  <span class="hljs-comment"># 主机IP/24掩码</span><br><br>                                <span class="hljs-comment">#check if the ecmp group already exists. The ecmp group is defined by the number of next</span><br>                                <span class="hljs-comment">#ports used, thus we can use dst_macs_ports as key</span><br>                                <span class="hljs-keyword">if</span> switch_ecmp_groups[sw_name].get(<span class="hljs-built_in">tuple</span>(dst_macs_ports), <span class="hljs-literal">None</span>):  <span class="hljs-comment"># 判断该ECMP组是否已存在</span><br>                                    ecmp_group_id = switch_ecmp_groups[sw_name].get(<span class="hljs-built_in">tuple</span>(dst_macs_ports), <span class="hljs-literal">None</span>)  <span class="hljs-comment"># 取出组ID</span><br>                                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;table_add at &#123;&#125;:&quot;</span>.<span class="hljs-built_in">format</span>(sw_name))  <span class="hljs-comment"># 打印信息</span><br>                                    <span class="hljs-variable language_">self</span>.controllers[sw_name].table_add(<span class="hljs-string">&quot;ipv4_lpm&quot;</span>, <span class="hljs-string">&quot;ecmp_group&quot;</span>, [<span class="hljs-built_in">str</span>(host_ip)],<br>                                                                        [<span class="hljs-built_in">str</span>(ecmp_group_id), <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(dst_macs_ports))])<br>                                    <span class="hljs-comment"># 添加ECMP分组路由规则</span><br><br>                                <span class="hljs-comment">#new ecmp group for this switch</span><br>                                <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 新的ECMP组</span><br>                                    new_ecmp_group_id = <span class="hljs-built_in">len</span>(switch_ecmp_groups[sw_name]) + <span class="hljs-number">1</span>  <span class="hljs-comment"># 新组ID为当前组数加1</span><br>                                    switch_ecmp_groups[sw_name][<span class="hljs-built_in">tuple</span>(dst_macs_ports)] = new_ecmp_group_id  <span class="hljs-comment"># 记录新组</span><br><br>                                    <span class="hljs-comment">#add group</span><br>                                    <span class="hljs-keyword">for</span> i, (mac, port) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dst_macs_ports):  <span class="hljs-comment"># 遍历每个下一跳MAC和端口</span><br>                                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;table_add at &#123;&#125;:&quot;</span>.<span class="hljs-built_in">format</span>(sw_name))  <span class="hljs-comment"># 打印信息</span><br>                                        <span class="hljs-variable language_">self</span>.controllers[sw_name].table_add(<span class="hljs-string">&quot;ecmp_group_to_nhop&quot;</span>, <span class="hljs-string">&quot;set_nhop&quot;</span>,<br>                                                                            [<span class="hljs-built_in">str</span>(new_ecmp_group_id), <span class="hljs-built_in">str</span>(i)],<br>                                                                            [<span class="hljs-built_in">str</span>(mac), <span class="hljs-built_in">str</span>(port)])<br>                                        <span class="hljs-comment"># 添加ecmp_group_to_nhop表，映射组和端口索引到具体下一跳MAC端口</span><br><br>                                    <span class="hljs-comment">#add forwarding rule</span><br>                                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;table_add at &#123;&#125;:&quot;</span>.<span class="hljs-built_in">format</span>(sw_name))  <span class="hljs-comment"># 打印信息</span><br>                                    <span class="hljs-variable language_">self</span>.controllers[sw_name].table_add(<span class="hljs-string">&quot;ipv4_lpm&quot;</span>, <span class="hljs-string">&quot;ecmp_group&quot;</span>, [<span class="hljs-built_in">str</span>(host_ip)],<br>                                                                        [<span class="hljs-built_in">str</span>(new_ecmp_group_id), <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(dst_macs_ports))])<br>                                    <span class="hljs-comment"># 添加最终转发规则，指定ECMP组和下一跳数</span><br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 主函数入口</span><br>        <span class="hljs-variable language_">self</span>.set_egress_type_table()  <span class="hljs-comment"># 设置出口类型表</span><br>        <span class="hljs-variable language_">self</span>.add_mirroring_ids()  <span class="hljs-comment"># 添加镜像ID</span><br>        <span class="hljs-variable language_">self</span>.route()  <span class="hljs-comment"># 执行路由配置</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:  <span class="hljs-comment"># 程序入口判断</span><br>    controller = RoutingController().main()  <span class="hljs-comment"># 创建控制器实例并调用主函数</span><br><br></code></pre></td></tr></table></figure></li><li><code>send.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> struct<br><br><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> sendp, get_if_list, get_if_hwaddr<br><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> Ether, IP, UDP, TCP<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_if</span>():<br>    ifs=get_if_list()<br>    iface=<span class="hljs-literal">None</span> <span class="hljs-comment"># &quot;h1-eth0&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> get_if_list():<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;eth0&quot;</span> <span class="hljs-keyword">in</span> i:<br>            iface=i<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> iface:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cannot find eth0 interface&quot;</span>)<br>        exit(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> iface<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv)&lt;<span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;pass 2 arguments: &lt;destination&gt; &lt;number_of_random_packets&gt;&#x27;</span>)<br>        exit(<span class="hljs-number">1</span>)<br><br>    addr = socket.gethostbyname(sys.argv[<span class="hljs-number">1</span>])<br>    iface = get_if()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sending on interface %s to %s&quot;</span> % (iface, <span class="hljs-built_in">str</span>(addr)))<br><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">2</span>])):<br>        pkt = Ether(src=get_if_hwaddr(iface), dst=<span class="hljs-string">&#x27;ff:ff:ff:ff:ff:ff&#x27;</span>)<br>        pkt = pkt /IP(dst=addr) / TCP(dport=<span class="hljs-number">7777</span>, sport=random.randint(<span class="hljs-number">2000</span>,<span class="hljs-number">65535</span>))<br>        sendp(pkt, iface=iface, verbose=<span class="hljs-literal">False</span>)<br>        time.sleep(<span class="hljs-number">0.1</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure></li><li><code>receive.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> sniff, get_if_list, Ether, get_if_hwaddr, IP, Raw, Packet, BitField, bind_layers<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_if</span>():<br>    iface=<span class="hljs-literal">None</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> get_if_list():<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;eth0&quot;</span> <span class="hljs-keyword">in</span> i:<br>            iface=i<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> iface:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cannot find eth0 interface&quot;</span>)<br>        exit(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> iface<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Telemetry</span>(<span class="hljs-title class_ inherited__">Packet</span>):<br>   fields_desc = [ BitField(<span class="hljs-string">&quot;enq_depth&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>),<br>                   <span class="hljs-comment">#BitField(&quot;deq_depth&quot;, 0, 16),</span><br>                   BitField(<span class="hljs-string">&quot;nextHeaderType&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isNotOutgoing</span>(<span class="hljs-params">my_mac</span>):<br>    my_mac = my_mac<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_isNotOutgoing</span>(<span class="hljs-params">pkt</span>):<br>        <span class="hljs-keyword">return</span> pkt[Ether].src != my_mac<br><br>    <span class="hljs-keyword">return</span> _isNotOutgoing<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_pkt</span>(<span class="hljs-params">pkt</span>):<br><br>    ether = pkt.getlayer(Ether)<br><br>    telemetry = pkt.getlayer(Telemetry)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Queue Info:&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;enq_depth&quot;</span>, telemetry.enq_depth)<br>    <span class="hljs-comment">#print &quot;deq_depth&quot;, telemetry.deq_depth</span><br>    <span class="hljs-built_in">print</span>()<br><br>bind_layers(Ether, Telemetry, <span class="hljs-built_in">type</span>=<span class="hljs-number">0x7777</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    ifaces = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> os.listdir(<span class="hljs-string">&#x27;/sys/class/net/&#x27;</span>) <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;eth&#x27;</span> <span class="hljs-keyword">in</span> i]<br>    iface = ifaces[<span class="hljs-number">0</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sniffing on %s&quot;</span> % iface)<br>    sys.stdout.flush()<br><br>    my_filter = isNotOutgoing(get_if_hwaddr(get_if()))<br><br>    sniff(<span class="hljs-built_in">filter</span>=<span class="hljs-string">&quot;ether proto 0x7777&quot;</span>, iface = iface,<br>          prn = <span class="hljs-keyword">lambda</span> x: handle_pkt(x), lfilter=my_filter)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure></li><li><code>send_traffic.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">mport sys<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> p4utils.utils.helper <span class="hljs-keyword">import</span> load_topo<br><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> Popen<br><br>topo = load_topo(<span class="hljs-string">&#x27;topology.json&#x27;</span>)<br><br>iperf_send = <span class="hljs-string">&quot;mx &#123;0&#125; iperf3 -c &#123;1&#125; -M 9000 -t &#123;2&#125; --bind &#123;3&#125; --cport &#123;4&#125; -p &#123;5&#125; 2&gt;&amp;1 &gt;/dev/null&quot;</span><br>iperf_recv = <span class="hljs-string">&quot;mx &#123;0&#125; iperf3 -s -p &#123;1&#125; --one-off 2&gt;&amp;1 &gt;/dev/null&quot;</span><br><br>Popen(<span class="hljs-string">&quot;sudo killall iperf iperf3&quot;</span>, shell=<span class="hljs-literal">True</span>)<br><br>dst_port1 = random.randint(<span class="hljs-number">1024</span>, <span class="hljs-number">65000</span>)<br>dst_port2 = random.randint(<span class="hljs-number">1024</span>, <span class="hljs-number">65000</span>)<br><br>Popen(iperf_recv.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;h3&quot;</span>, dst_port1), shell=<span class="hljs-literal">True</span>)<br>Popen(iperf_recv.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;h4&quot;</span>, dst_port2), shell=<span class="hljs-literal">True</span>)<br><br>time.sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">import</span> sys<br>duration = <span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">1</span>])<br><br>Popen(iperf_send.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;h1&quot;</span>, topo.get_host_ip(<span class="hljs-string">&quot;h3&quot;</span>), duration, topo.get_host_ip(<span class="hljs-string">&quot;h1&quot;</span>), dst_port1, dst_port1), shell=<span class="hljs-literal">True</span>)<br>Popen(iperf_send.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;h2&quot;</span>, topo.get_host_ip(<span class="hljs-string">&quot;h4&quot;</span>), duration, topo.get_host_ip(<span class="hljs-string">&quot;h2&quot;</span>), dst_port2, dst_port2), shell=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure></li><li><code>network.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> p4utils.mininetlib.network_API <span class="hljs-keyword">import</span> NetworkAPI<br><br>net = NetworkAPI()<br><br><span class="hljs-comment"># Network general options</span><br>net.setLogLevel(<span class="hljs-string">&#x27;info&#x27;</span>)<br>net.execScript(<span class="hljs-string">&#x27;python routing-controller.py&#x27;</span>, reboot=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># Network definition</span><br>net.addP4Switch(<span class="hljs-string">&#x27;s1&#x27;</span>)<br>net.addP4Switch(<span class="hljs-string">&#x27;s2&#x27;</span>)<br>net.addP4Switch(<span class="hljs-string">&#x27;s3&#x27;</span>)<br>net.addP4Switch(<span class="hljs-string">&#x27;s4&#x27;</span>)<br>net.setP4SourceAll(<span class="hljs-string">&#x27;p4src/loadbalancer.p4&#x27;</span>)<br><br>net.addHost(<span class="hljs-string">&#x27;h1&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h2&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h3&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h4&#x27;</span>)<br><br>net.addLink(<span class="hljs-string">&quot;h1&quot;</span>, <span class="hljs-string">&quot;s1&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;h2&quot;</span>, <span class="hljs-string">&quot;s1&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;h3&quot;</span>, <span class="hljs-string">&quot;s4&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;h4&quot;</span>, <span class="hljs-string">&quot;s4&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-string">&quot;s2&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s2&quot;</span>, <span class="hljs-string">&quot;s3&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s2&quot;</span>, <span class="hljs-string">&quot;s4&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s3&quot;</span>, <span class="hljs-string">&quot;s4&quot;</span>)<br>net.setBwAll(<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># Assignment strategy</span><br>net.l3()<br><br><span class="hljs-comment"># Nodes general options</span><br>net.enablePcapDumpAll()<br>net.enableLogAll()<br>net.enableCli()<br>net.startNetwork()<br></code></pre></td></tr></table></figure></li><li><code>get_switch_interfaces.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> p4utils.utils.helper <span class="hljs-keyword">import</span> load_topo<br><br>topo = load_topo(<span class="hljs-string">&#x27;topology.json&#x27;</span>)<br><br><span class="hljs-keyword">for</span> host <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(topo.get_hosts().keys(), key = <span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">int</span>(x[<span class="hljs-number">1</span>:])):<br><br>    host_intf = topo.get_host_first_interface(host)<br>    sw = topo.interface_to_node(host, host_intf)<br>    <span class="hljs-built_in">print</span>(host, topo.get_intfs()[sw][host][<span class="hljs-string">&#x27;intfName&#x27;</span>])<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>P4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>P4</tag>
      
      <tag>SDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P4 09-Flowlet Switching</title>
    <link href="/2025/08/08/P4%2009-Flowlet%20Switching/"/>
    <url>/2025/08/08/P4%2009-Flowlet%20Switching/</url>
    
    <content type="html"><![CDATA[<h1 id="p4示例程序-09-flowlet">P4示例程序-09 Flowlet</h1><ul><li><h1 id="功能">功能</h1><p>当网络中有多条到目的地的等成本路径时，ECMP把流哈希到不同路径。如果几个象流恰好哈希到同一条路径，就会造成该链路拥塞，而其他链路闲置，非常影响性能。Flowlet技术将流拆分为多个体积更小的Flowlet，并将Flowlet哈希到不同的路径，通过细粒度的哈希实现更好的负载均衡。具体而言：如果检测到同一个流的连续两个数据包之间有比较大的空隙，就把接下来的这段重新哈希到另一条路径</p></li><li><h1 id="拓扑结构">拓扑结构</h1></li></ul><figure><img src="/2025/08/08/P4%2009-Flowlet%20Switching/1.png" alt="拓扑结构"><figcaption aria-hidden="true">拓扑结构</figcaption></figure><ul><li><h1 id="代码">代码</h1></li></ul><ol type="1"><li><code>p4app.json</code> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;p4_src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;p4src/flowlet_switching.p4&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cli&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;pcap_dump&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;enable_log&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;topology&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;assignment_strategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mixed&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;links&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s6&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s2&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s3&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s4&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s5&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s6&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s6&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s4&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s6&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s5&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s6&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;h1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;h2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;switches&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;s1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;cli_input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sw-commands/s1-commands.txt&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;s2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;cli_input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sw-commands/s2-commands.txt&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;s3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;cli_input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sw-commands/s3-commands.txt&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;s4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;cli_input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sw-commands/s4-commands.txt&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;s5&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;cli_input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sw-commands/s5-commands.txt&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;s6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;cli_input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sw-commands/s6-commands.txt&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li>Headers <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">const</span> bit&lt;<span class="hljs-number">16</span>&gt; TYPE_IPV4 = <span class="hljs-number">0x800</span>; <span class="hljs-comment">// IPv4 的 EtherType 值</span><br><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">9</span>&gt;  egressSpec_t; <span class="hljs-comment">// 出口端口类型</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">48</span>&gt; macAddr_t; <span class="hljs-comment">// MAC 地址类型</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">32</span>&gt; ip4Addr_t; <span class="hljs-comment">// IPv4 地址类型</span><br><br>header <span class="hljs-type">ethernet_t</span> &#123;<br>    macAddr_t dstAddr; <span class="hljs-comment">// 目标 MAC 地址</span><br>    macAddr_t srcAddr; <span class="hljs-comment">// 源 MAC 地址</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   etherType; <span class="hljs-comment">// 以太网类型字段</span><br>&#125;<br><br>header <span class="hljs-type">ipv4_t</span> &#123;<br>    bit&lt;<span class="hljs-number">4</span>&gt;    version; <span class="hljs-comment">// IP 版本</span><br>    bit&lt;<span class="hljs-number">4</span>&gt;    ihl; <span class="hljs-comment">// 首部长度</span><br>    bit&lt;<span class="hljs-number">6</span>&gt;    dscp; <span class="hljs-comment">// 服务类别</span><br>    bit&lt;<span class="hljs-number">2</span>&gt;    ecn; <span class="hljs-comment">// 显式拥塞通知</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   totalLen; <span class="hljs-comment">// 总长度</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   identification; <span class="hljs-comment">// 标识符</span><br>    bit&lt;<span class="hljs-number">3</span>&gt;    flags; <span class="hljs-comment">// 标志位</span><br>    bit&lt;<span class="hljs-number">13</span>&gt;   fragOffset; <span class="hljs-comment">// 分片偏移</span><br>    bit&lt;<span class="hljs-number">8</span>&gt;    ttl; <span class="hljs-comment">// 生存时间</span><br>    bit&lt;<span class="hljs-number">8</span>&gt;    protocol; <span class="hljs-comment">// 上层协议</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   hdrChecksum; <span class="hljs-comment">// 首部校验和</span><br>    ip4Addr_t srcAddr; <span class="hljs-comment">// 源 IP 地址</span><br>    ip4Addr_t dstAddr; <span class="hljs-comment">// 目标 IP 地址</span><br>&#125;<br><br>header <span class="hljs-type">tcp_t</span> &#123;<br>    bit&lt;<span class="hljs-number">16</span>&gt; srcPort; <span class="hljs-comment">// 源端口</span><br>    bit&lt;<span class="hljs-number">16</span>&gt; dstPort; <span class="hljs-comment">// 目标端口</span><br>    bit&lt;<span class="hljs-number">32</span>&gt; seqNo; <span class="hljs-comment">// 序列号</span><br>    bit&lt;<span class="hljs-number">32</span>&gt; ackNo; <span class="hljs-comment">// 确认号</span><br>    bit&lt;<span class="hljs-number">4</span>&gt;  dataOffset; <span class="hljs-comment">// 数据偏移</span><br>    bit&lt;<span class="hljs-number">4</span>&gt;  res; <span class="hljs-comment">// 保留字段</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  cwr; <span class="hljs-comment">// 拥塞窗口减少</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  ece; <span class="hljs-comment">// ECN 回应</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  urg; <span class="hljs-comment">// 紧急</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  ack; <span class="hljs-comment">// 确认</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  psh; <span class="hljs-comment">// 推送</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  rst; <span class="hljs-comment">// 重置</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  syn; <span class="hljs-comment">// 同步</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  fin; <span class="hljs-comment">// 终止</span><br>    bit&lt;<span class="hljs-number">16</span>&gt; window; <span class="hljs-comment">// 窗口大小</span><br>    bit&lt;<span class="hljs-number">16</span>&gt; checksum; <span class="hljs-comment">// 校验和</span><br>    bit&lt;<span class="hljs-number">16</span>&gt; urgentPtr; <span class="hljs-comment">// 紧急指针</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">metadata</span> &#123;</span><br>    bit&lt;<span class="hljs-number">14</span>&gt; ecmp_hash; <span class="hljs-comment">// ECMP 哈希值</span><br>    bit&lt;<span class="hljs-number">14</span>&gt; ecmp_group_id; <span class="hljs-comment">// ECMP 组 ID</span><br><br>    bit&lt;<span class="hljs-number">48</span>&gt; flowlet_last_stamp; <span class="hljs-comment">// 上一个 flowlet 的时间戳</span><br>    bit&lt;<span class="hljs-number">48</span>&gt; flowlet_time_diff; <span class="hljs-comment">// 当前与上一次包的时间差</span><br><br>    bit&lt;<span class="hljs-number">13</span>&gt; flowlet_register_index; <span class="hljs-comment">// 寄存器索引值</span><br>    bit&lt;<span class="hljs-number">16</span>&gt; flowlet_id; <span class="hljs-comment">// 当前包所属 flowlet 的 ID</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">headers</span> &#123;</span><br>    <span class="hljs-type">ethernet_t</span>   ethernet; <span class="hljs-comment">// 以太网头</span><br>    <span class="hljs-type">ipv4_t</span>       ipv4; <span class="hljs-comment">// IPv4 头</span><br>    <span class="hljs-type">tcp_t</span>        tcp; <span class="hljs-comment">// TCP 头</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C">parser <span class="hljs-title function_">MyParser</span><span class="hljs-params">(packet_in packet,</span><br><span class="hljs-params">                out headers hdr,</span><br><span class="hljs-params">                inout metadata meta,</span><br><span class="hljs-params">                inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    state start &#123;<br>        transition parse_ethernet; <span class="hljs-comment">// 初始状态跳转到解析以太网</span><br>    &#125;<br><br>    state parse_ethernet &#123;<br>        packet.extract(hdr.ethernet); <span class="hljs-comment">// 解析以太网头</span><br>        transition <span class="hljs-title function_">select</span><span class="hljs-params">(hdr.ethernet.etherType)</span>&#123;<br>            TYPE_IPV4: parse_ipv4; <span class="hljs-comment">// 若是 IPv4，跳转到解析 IPv4</span><br>            <span class="hljs-keyword">default</span>: accept; <span class="hljs-comment">// 否则直接接受</span><br>        &#125;<br>    &#125;<br><br>    state parse_ipv4 &#123;<br>        packet.extract(hdr.ipv4); <span class="hljs-comment">// 解析 IPv4 头</span><br>        transition <span class="hljs-title function_">select</span><span class="hljs-params">(hdr.ipv4.protocol)</span>&#123;<br>            <span class="hljs-number">6</span> : parse_tcp; <span class="hljs-comment">// 如果协议号是 6（TCP），解析 TCP</span><br>            <span class="hljs-keyword">default</span>: accept; <span class="hljs-comment">// 否则直接接受</span><br>        &#125;<br>    &#125;<br><br>    state parse_tcp &#123;<br>        packet.extract(hdr.tcp); <span class="hljs-comment">// 解析 TCP 头</span><br>        transition accept; <span class="hljs-comment">// 解析完成</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Verification <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyVerifyChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>    apply &#123; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Ingress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyIngress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                  inout metadata meta,</span><br><span class="hljs-params">                  inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    <span class="hljs-keyword">register</span>&lt;bit&lt;ID_WIDTH&gt;&gt;(REGISTER_SIZE) flowlet_to_id; <span class="hljs-comment">// 存储每个 flowlet 的 ID</span><br>    <span class="hljs-keyword">register</span>&lt;bit&lt;TIMESTAMP_WIDTH&gt;&gt;(REGISTER_SIZE) flowlet_time_stamp; <span class="hljs-comment">// 存储 flowlet 上一次时间戳</span><br><br>    action <span class="hljs-title function_">drop</span><span class="hljs-params">()</span> &#123;<br>        mark_to_drop(standard_metadata); <span class="hljs-comment">// 标记丢包</span><br>    &#125;<br><br>    action <span class="hljs-title function_">read_flowlet_registers</span><span class="hljs-params">()</span> &#123;<br>        hash(meta.flowlet_register_index, HashAlgorithm.crc16, <span class="hljs-comment">// 计算 flowlet 的哈希索引</span><br>            (bit&lt;<span class="hljs-number">16</span>&gt;)<span class="hljs-number">0</span>,<br>            &#123; hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.tcp.srcPort, hdr.tcp.dstPort, hdr.ipv4.protocol &#125;,<br>            (bit&lt;<span class="hljs-number">14</span>&gt;)<span class="hljs-number">8192</span>);<br><br>        flowlet_time_stamp.read(meta.flowlet_last_stamp, (bit&lt;<span class="hljs-number">32</span>&gt;)meta.flowlet_register_index); <span class="hljs-comment">// 读取上次时间戳</span><br>        flowlet_to_id.read(meta.flowlet_id, (bit&lt;<span class="hljs-number">32</span>&gt;)meta.flowlet_register_index); <span class="hljs-comment">// 读取 flowlet ID</span><br>        flowlet_time_stamp.write((bit&lt;<span class="hljs-number">32</span>&gt;)meta.flowlet_register_index, standard_metadata.ingress_global_timestamp); <span class="hljs-comment">// 写入当前时间戳</span><br>    &#125;<br><br>    action <span class="hljs-title function_">update_flowlet_id</span><span class="hljs-params">()</span> &#123;<br>        bit&lt;<span class="hljs-number">32</span>&gt; <span class="hljs-type">random_t</span>;<br>        random(<span class="hljs-type">random_t</span>, (bit&lt;<span class="hljs-number">32</span>&gt;)<span class="hljs-number">0</span>, (bit&lt;<span class="hljs-number">32</span>&gt;)<span class="hljs-number">65000</span>); <span class="hljs-comment">// 生成随机 ID</span><br>        meta.flowlet_id = (bit&lt;<span class="hljs-number">16</span>&gt;)<span class="hljs-type">random_t</span>;<br>        flowlet_to_id.write((bit&lt;<span class="hljs-number">32</span>&gt;)meta.flowlet_register_index, (bit&lt;<span class="hljs-number">16</span>&gt;)meta.flowlet_id); <span class="hljs-comment">// 写入新的 flowlet ID</span><br>    &#125;<br><br>    action <span class="hljs-title function_">ecmp_group</span><span class="hljs-params">(bit&lt;<span class="hljs-number">14</span>&gt; ecmp_group_id, bit&lt;<span class="hljs-number">16</span>&gt; num_nhops)</span> &#123;<br>        hash(meta.ecmp_hash, HashAlgorithm.crc16, (bit&lt;<span class="hljs-number">1</span>&gt;)<span class="hljs-number">0</span>, <span class="hljs-comment">// 计算 ECMP 哈希</span><br>            &#123; hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.tcp.srcPort, hdr.tcp.dstPort, hdr.ipv4.protocol, meta.flowlet_id &#125;,<br>            num_nhops);<br><br>        meta.ecmp_group_id = ecmp_group_id; <span class="hljs-comment">// 设置 ECMP 组 ID</span><br>    &#125;<br><br>    action <span class="hljs-title function_">set_nhop</span><span class="hljs-params">(macAddr_t dstAddr, egressSpec_t port)</span> &#123;<br>        hdr.ethernet.srcAddr = hdr.ethernet.dstAddr; <span class="hljs-comment">// 将源 MAC 设置为原目标 MAC（占位）</span><br>        hdr.ethernet.dstAddr = dstAddr; <span class="hljs-comment">// 设置目标 MAC 地址</span><br>        standard_metadata.egress_spec = port; <span class="hljs-comment">// 设置输出端口</span><br>        hdr.ipv4.ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>; <span class="hljs-comment">// TTL 减 1</span><br>    &#125;<br><br>    table ecmp_group_to_nhop &#123;<br>        key = &#123;<br>            meta.ecmp_group_id: exact;<br>            meta.ecmp_hash: exact;<br>        &#125;<br>        actions = &#123;<br>            drop;<br>            set_nhop;<br>        &#125;<br>        size = <span class="hljs-number">1024</span>;<br>    &#125;<br><br>    table ipv4_lpm &#123;<br>        key = &#123;<br>            hdr.ipv4.dstAddr: lpm; <span class="hljs-comment">// 目的 IP 地址最长前缀匹配</span><br>        &#125;<br>        actions = &#123;<br>            set_nhop;<br>            ecmp_group;<br>            drop;<br>        &#125;<br>        size = <span class="hljs-number">1024</span>;<br>        default_action = drop;<br>    &#125;<br><br>    apply &#123;<br>        <span class="hljs-keyword">if</span> (hdr.ipv4.isValid()) &#123;<br><br>            @atomic &#123;<br>                read_flowlet_registers(); <span class="hljs-comment">// 读取寄存器</span><br>                meta.flowlet_time_diff = standard_metadata.ingress_global_timestamp - meta.flowlet_last_stamp; <span class="hljs-comment">// 计算时间差</span><br><br>                <span class="hljs-keyword">if</span> (meta.flowlet_time_diff &gt; FLOWLET_TIMEOUT) &#123; <span class="hljs-comment">// 若时间差超过超时时间</span><br>                    update_flowlet_id(); <span class="hljs-comment">// 更新 flowlet ID</span><br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">switch</span> (ipv4_lpm.apply().action_run) &#123;<br>                ecmp_group: &#123;<br>                    ecmp_group_to_nhop.apply(); <span class="hljs-comment">// 应用 ECMP 下一跳</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Egress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyEgress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                 inout metadata meta,</span><br><span class="hljs-params">                 inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br>    apply &#123; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Computation <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyComputeChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>    apply &#123;<br>        update_checksum( <span class="hljs-comment">// 更新 IPv4 首部校验和</span><br>            hdr.ipv4.isValid(),<br>            &#123;<br>                hdr.ipv4.version,<br>                hdr.ipv4.ihl,<br>                hdr.ipv4.dscp,<br>                hdr.ipv4.ecn,<br>                hdr.ipv4.totalLen,<br>                hdr.ipv4.identification,<br>                hdr.ipv4.flags,<br>                hdr.ipv4.fragOffset,<br>                hdr.ipv4.ttl,<br>                hdr.ipv4.protocol,<br>                hdr.ipv4.srcAddr,<br>                hdr.ipv4.dstAddr<br>            &#125;,<br>            hdr.ipv4.hdrChecksum,<br>            HashAlgorithm.csum16<br>        );<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>DE parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyDeparser</span><span class="hljs-params">(packet_out packet, in headers hdr)</span> &#123;<br>    apply &#123;<br>        packet.emit(hdr.ethernet); <span class="hljs-comment">// 输出以太网头</span><br>        packet.emit(hdr.ipv4); <span class="hljs-comment">// 输出 IPv4 头</span><br>        packet.emit(hdr.tcp); <span class="hljs-comment">// 若存在，输出 TCP 头</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Switch <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C">V1Switch(<br>    MyParser(),<br>    MyVerifyChecksum(),<br>    MyIngress(),<br>    MyEgress(),<br>    MyComputeChecksum(),<br>    MyDeparser()<br>) main;<br></code></pre></td></tr></table></figure></li><li><code>s1-commands.txt</code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 交换机S1<br>// 设置匹配表ipv4_lpm和匹配表ecmp_group_to_nhop的默认动作为丢包<br>table_set_default ipv4_lpm drop<br>table_set_default ecmp_group_to_nhop drop<br>// 设置发完主机Host1的数据包直接通过1端口发出，不使用ECMP<br>table_add ipv4_lpm set_nhop 10.0.1.1/32 =&gt;  00:00:0a:00:01:01 1<br>// 设置发完Host2的数据包使用ECMP，ECMP的组号为1、共包含4条可选路径<br>table_add ipv4_lpm ecmp_group 10.0.6.2/32 =&gt; 1 4<br>// 在ECMP组1中，针对哈希结果0、1、2、3分布设置出端口为2、3、4、5<br>table_add ecmp_group_to_nhop set_nhop 1 0 =&gt;  00:00:00:02:01:00 2<br>table_add ecmp_group_to_nhop set_nhop 1 1 =&gt;  00:00:00:03:01:00 3<br>table_add ecmp_group_to_nhop set_nhop 1 2 =&gt;  00:00:00:04:01:00 4<br>table_add ecmp_group_to_nhop set_nhop 1 3 =&gt;  00:00:00:05:01:00 5<br></code></pre></td></tr></table></figure></li><li><code>s2-commands.txt</code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 交换机S2<br>// 设置匹配表ipv4_lpm和匹配表ecmp_group_to_nhop的默认动作为丢包<br>table_set_default ipv4_lpm drop<br>table_set_default ecmp_group_to_nhop drop<br>// 设置发完Host2的数据包直接通过1端口发送出去<br>table_add ipv4_lpm set_nhop 10.0.1.1/32 =&gt; 00:00:00:01:02:00 1<br>// 设置发完Host1的数据包直接通过2端口发送出去<br>table_add ipv4_lpm set_nhop 10.0.6.2/32 =&gt; 00:00:00:06:02:00 2<br></code></pre></td></tr></table></figure></li><li><code>s3-commands.txt</code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 交换机S3<br>// 设置匹配表ipv4_lpm和匹配表ecmp_group_to_nhop的默认动作为丢包<br>table_set_default ipv4_lpm drop<br>table_set_default ecmp_group_to_nhop drop<br>// 设置发完Host2的数据包直接通过1端口发送出去<br>table_add ipv4_lpm set_nhop 10.0.1.1/32 =&gt; 00:00:00:01:03:00 1<br>// 设置发完Host1的数据包直接通过2端口发送出去<br>table_add ipv4_lpm set_nhop 10.0.6.2/32 =&gt; 00:00:00:06:03:00 2<br></code></pre></td></tr></table></figure></li><li><code>s4-commands.txt</code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 交换机S4<br>// 设置匹配表ipv4_lpm和匹配表ecmp_group_to_nhop的默认动作为丢包<br>table_set_default ipv4_lpm drop<br>table_set_default ecmp_group_to_nhop drop<br>// 设置发完Host2的数据包直接通过1端口发送出去<br>table_add ipv4_lpm set_nhop 10.0.1.1/32 =&gt; 00:00:00:01:04:00 1<br>// 设置发完Host1的数据包直接通过2端口发送出去<br>table_add ipv4_lpm set_nhop 10.0.6.2/32 =&gt; 00:00:00:06:04:00 2<br></code></pre></td></tr></table></figure></li><li><code>s5-commands.txt</code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 交换机S5<br>// 设置匹配表ipv4_lpm和匹配表ecmp_group_to_nhop的默认动作为丢包<br>table_set_default ipv4_lpm drop<br>table_set_default ecmp_group_to_nhop drop<br>// 设置发完Host2的数据包直接通过1端口发送出去<br>table_add ipv4_lpm set_nhop 10.0.1.1/32 =&gt; 00:00:00:01:05:00 1<br>// 设置发完Host1的数据包直接通过2端口发送出去<br>table_add ipv4_lpm set_nhop 10.0.6.2/32 =&gt; 00:00:00:06:05:00 2<br></code></pre></td></tr></table></figure></li><li><code>s6-commands.txt</code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 交换机S6<br>// 设置匹配表ipv4_lpm和匹配表ecmp_group_to_nhop的默认动作为丢包<br>table_set_default ipv4_lpm drop<br>table_set_default ecmp_group_to_nhop drop<br>// 设置发完主机Host2的数据包直接通过1端口发出，不使用ECMP<br>table_add ipv4_lpm set_nhop 10.0.6.2/32 =&gt;  00:00:0a:00:06:02 1<br>// 设置发完Host1的数据包使用ECMP，ECMP的组号为1、共包含4条可选路径<br>table_add ipv4_lpm ecmp_group 10.0.1.0/24 =&gt; 1 4<br>// 在ECMP组1中，针对哈希结果0、1、2、3分布设置出端口为2、3、4、5<br>table_add ecmp_group_to_nhop set_nhop 1 0 =&gt;  00:00:00:02:06:00 2<br>table_add ecmp_group_to_nhop set_nhop 1 1 =&gt;  00:00:00:03:06:00 3<br>table_add ecmp_group_to_nhop set_nhop 1 2 =&gt;  00:00:00:04:06:00 4<br>table_add ecmp_group_to_nhop set_nhop 1 3 =&gt;  00:00:00:05:06:00 5<br></code></pre></td></tr></table></figure></li><li><code>network.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> p4utils.mininetlib.network_API <span class="hljs-keyword">import</span> NetworkAPI<br><br>net = NetworkAPI()<br><br><span class="hljs-comment"># Network general options</span><br>net.setLogLevel(<span class="hljs-string">&#x27;info&#x27;</span>)<br><br><span class="hljs-comment"># Network definition</span><br>net.addP4Switch(<span class="hljs-string">&#x27;s1&#x27;</span>, cli_input=<span class="hljs-string">&#x27;sw-commands/s1-commands.txt&#x27;</span>)<br>net.addP4Switch(<span class="hljs-string">&#x27;s2&#x27;</span>, cli_input=<span class="hljs-string">&#x27;sw-commands/s2-commands.txt&#x27;</span>)<br>net.addP4Switch(<span class="hljs-string">&#x27;s3&#x27;</span>, cli_input=<span class="hljs-string">&#x27;sw-commands/s3-commands.txt&#x27;</span>)<br>net.addP4Switch(<span class="hljs-string">&#x27;s4&#x27;</span>, cli_input=<span class="hljs-string">&#x27;sw-commands/s4-commands.txt&#x27;</span>)<br>net.addP4Switch(<span class="hljs-string">&#x27;s5&#x27;</span>, cli_input=<span class="hljs-string">&#x27;sw-commands/s5-commands.txt&#x27;</span>)<br>net.addP4Switch(<span class="hljs-string">&#x27;s6&#x27;</span>, cli_input=<span class="hljs-string">&#x27;sw-commands/s6-commands.txt&#x27;</span>)<br>net.setP4SourceAll(<span class="hljs-string">&#x27;p4src/flowlet_switching.p4&#x27;</span>)<br><br>net.addHost(<span class="hljs-string">&#x27;h1&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h2&#x27;</span>)<br><br>net.addLink(<span class="hljs-string">&quot;h1&quot;</span>, <span class="hljs-string">&quot;s1&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;h2&quot;</span>, <span class="hljs-string">&quot;s6&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-string">&quot;s2&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-string">&quot;s3&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-string">&quot;s4&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-string">&quot;s5&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s2&quot;</span>, <span class="hljs-string">&quot;s6&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s3&quot;</span>, <span class="hljs-string">&quot;s6&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s4&quot;</span>, <span class="hljs-string">&quot;s6&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s5&quot;</span>, <span class="hljs-string">&quot;s6&quot;</span>)<br><br><span class="hljs-comment"># Assignment strategy</span><br>net.mixed()<br><br><span class="hljs-comment"># Nodes general options</span><br>net.enablePcapDumpAll()<br>net.enableLogAll()<br>net.enableCli()<br>net.startNetwork()<br></code></pre></td></tr></table></figure></li></ol><ul><li><h1 id="p4仿真">P4仿真</h1></li></ul><ol type="1"><li>启动网络拓扑</li></ol><figure><img src="/2025/08/08/P4%2009-Flowlet%20Switching/2.png" alt="启动网络拓扑"><figcaption aria-hidden="true">启动网络拓扑</figcaption></figure><ol start="2" type="1"><li>使用<code>pingall</code>命令测试<code>h1</code>,<code>h2</code>是否联通</li></ol><figure><img src="/2025/08/08/P4%2009-Flowlet%20Switching/3.png" alt="测试联通"><figcaption aria-hidden="true">测试联通</figcaption></figure><ol start="3" type="1"><li>监控4条链路 (从<code>s1-eth2</code>至<code>s1-eth5</code>)<code>sudo tcpdump -enn -i s1-ethX</code></li></ol><figure><img src="/2025/08/08/P4%2009-Flowlet%20Switching/4.png" alt="监控四条链路"><figcaption aria-hidden="true">监控四条链路</figcaption></figure><ol start="4" type="1"><li>再次<code>pingall</code>测试<code>h1</code>,<code>h2</code>之间的连接</li></ol><figure><img src="/2025/08/08/P4%2009-Flowlet%20Switching/5.png" alt="再次测试pingall"><figcaption aria-hidden="true">再次测试pingall</figcaption></figure><ol start="5" type="1"><li>使用<code>iperf</code>命令测试<code>h1</code>,<code>h2</code></li></ol><figure><img src="/2025/08/08/P4%2009-Flowlet%20Switching/6.png" alt="iperf命令"><figcaption aria-hidden="true">iperf命令</figcaption></figure><p>6.打开<code>h1</code>终端. 使用<code>send.py</code>文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python send.py <span class="hljs-number">10.0</span><span class="hljs-number">.6</span><span class="hljs-number">.2</span> <span class="hljs-number">1000</span> &lt;sleep_time_between_packets&gt;<br></code></pre></td></tr></table></figure></p><figure><img src="/2025/08/08/P4%2009-Flowlet%20Switching/7.png" alt="h1终端"><figcaption aria-hidden="true">h1终端</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>P4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>P4</tag>
      
      <tag>SDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P4 08-ECMP</title>
    <link href="/2025/08/06/P4%2008-ECMP/"/>
    <url>/2025/08/06/P4%2008-ECMP/</url>
    
    <content type="html"><![CDATA[<h1 id="p4示例程序-08-ecmp">P4示例程序-08 ECMP</h1><ul><li><h1 id="功能">功能</h1><p>ECMP即等价多路径路由，网络里如果存在多条到达同一目的地且代价相同的路径，就可以把流量分散到这些路径上，实现负载均衡，以提高带宽利用率。在P4交换机的实现中主要涉及哈希函数</p></li><li><h1 id="拓扑结构">拓扑结构</h1></li></ul><figure><img src="/2025/08/06/P4%2008-ECMP/1.png" alt="拓扑结构"><figcaption aria-hidden="true">拓扑结构</figcaption></figure><ul><li><h1 id="代码">代码</h1></li></ul><ol type="1"><li><code>p4app.json</code> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;p4_src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;p4src/ecmp.p4&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cli&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;pcap_dump&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;enable_log&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;topology&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;assignment_strategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mixed&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;links&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s6&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s2&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s3&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s4&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s5&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s6&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s6&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s4&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s6&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s5&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s6&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;h1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;h2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;switches&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;s1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;cli_input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sw-commands/s1-commands.txt&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;s2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;cli_input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sw-commands/s2-commands.txt&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;s3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;cli_input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sw-commands/s3-commands.txt&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;s4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;cli_input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sw-commands/s4-commands.txt&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;s5&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;cli_input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sw-commands/s5-commands.txt&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;s6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;cli_input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sw-commands/s6-commands.txt&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li>Headers <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">const</span> bit&lt;<span class="hljs-number">16</span>&gt; TYPE_IPV4 = <span class="hljs-number">0x800</span>; <span class="hljs-comment">// IPv4以太网类型</span><br><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">9</span>&gt;  egressSpec_t; <span class="hljs-comment">// 定义出口端口类型</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">48</span>&gt; macAddr_t; <span class="hljs-comment">// 定义MAC地址类型</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">32</span>&gt; ip4Addr_t; <span class="hljs-comment">// 定义IPv4地址类型</span><br><br>header <span class="hljs-type">ethernet_t</span> &#123;<br>    macAddr_t dstAddr; <span class="hljs-comment">// 目的MAC地址</span><br>    macAddr_t srcAddr; <span class="hljs-comment">// 源MAC地址</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   etherType; <span class="hljs-comment">// 以太网类型字段</span><br>&#125;<br><br>header <span class="hljs-type">ipv4_t</span> &#123;<br>    bit&lt;<span class="hljs-number">4</span>&gt;    version; <span class="hljs-comment">// IP版本</span><br>    bit&lt;<span class="hljs-number">4</span>&gt;    ihl; <span class="hljs-comment">// 首部长度</span><br>    bit&lt;<span class="hljs-number">6</span>&gt;    dscp; <span class="hljs-comment">// 区分服务字段</span><br>    bit&lt;<span class="hljs-number">2</span>&gt;    ecn; <span class="hljs-comment">// 显式拥塞通知</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   totalLen; <span class="hljs-comment">// 总长度</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   identification; <span class="hljs-comment">// 标识</span><br>    bit&lt;<span class="hljs-number">3</span>&gt;    flags; <span class="hljs-comment">// 标志</span><br>    bit&lt;<span class="hljs-number">13</span>&gt;   fragOffset; <span class="hljs-comment">// 分段偏移</span><br>    bit&lt;<span class="hljs-number">8</span>&gt;    ttl; <span class="hljs-comment">// 生存时间</span><br>    bit&lt;<span class="hljs-number">8</span>&gt;    protocol; <span class="hljs-comment">// 上层协议类型</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   hdrChecksum; <span class="hljs-comment">// 头部校验和</span><br>    ip4Addr_t srcAddr; <span class="hljs-comment">// 源IPv4地址</span><br>    ip4Addr_t dstAddr; <span class="hljs-comment">// 目的IPv4地址</span><br>&#125;<br><br>header <span class="hljs-type">tcp_t</span>&#123;<br>    bit&lt;<span class="hljs-number">16</span>&gt; srcPort; <span class="hljs-comment">// 源端口号</span><br>    bit&lt;<span class="hljs-number">16</span>&gt; dstPort; <span class="hljs-comment">// 目的端口号</span><br>    bit&lt;<span class="hljs-number">32</span>&gt; seqNo; <span class="hljs-comment">// 序列号</span><br>    bit&lt;<span class="hljs-number">32</span>&gt; ackNo; <span class="hljs-comment">// 确认号</span><br>    bit&lt;<span class="hljs-number">4</span>&gt;  dataOffset; <span class="hljs-comment">// 数据偏移</span><br>    bit&lt;<span class="hljs-number">4</span>&gt;  res; <span class="hljs-comment">// 保留字段</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  cwr; <span class="hljs-comment">// CWR位</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  ece; <span class="hljs-comment">// ECE位</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  urg; <span class="hljs-comment">// 紧急指针有效</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  ack; <span class="hljs-comment">// 确认位</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  psh; <span class="hljs-comment">// 推送标志</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  rst; <span class="hljs-comment">// 重置连接</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  syn; <span class="hljs-comment">// 同步序列编号</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;  fin; <span class="hljs-comment">// 终止连接</span><br>    bit&lt;<span class="hljs-number">16</span>&gt; window; <span class="hljs-comment">// 滑动窗口大小</span><br>    bit&lt;<span class="hljs-number">16</span>&gt; checksum; <span class="hljs-comment">// TCP校验和</span><br>    bit&lt;<span class="hljs-number">16</span>&gt; urgentPtr; <span class="hljs-comment">// 紧急指针</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">metadata</span> &#123;</span><br>    bit&lt;<span class="hljs-number">14</span>&gt; ecmp_hash; <span class="hljs-comment">// ECMP哈希值</span><br>    bit&lt;<span class="hljs-number">14</span>&gt; ecmp_group_id; <span class="hljs-comment">// ECMP组ID</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">headers</span> &#123;</span><br>    <span class="hljs-type">ethernet_t</span>   ethernet; <span class="hljs-comment">// 以太网头部</span><br>    <span class="hljs-type">ipv4_t</span>       ipv4; <span class="hljs-comment">// IPv4头部</span><br>    <span class="hljs-type">tcp_t</span>        tcp; <span class="hljs-comment">// TCP头部</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C">parser <span class="hljs-title function_">MyParser</span><span class="hljs-params">(packet_in packet,</span><br><span class="hljs-params">                out headers hdr,</span><br><span class="hljs-params">                inout metadata meta,</span><br><span class="hljs-params">                inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    state start &#123;<br>        transition parse_ethernet; <span class="hljs-comment">// 初始状态转到以太网解析</span><br>    &#125;<br><br>    state parse_ethernet &#123;<br>        packet.extract(hdr.ethernet); <span class="hljs-comment">// 提取以太网头部</span><br>        transition <span class="hljs-title function_">select</span><span class="hljs-params">(hdr.ethernet.etherType)</span>&#123; <span class="hljs-comment">// 根据类型字段选择下一状态</span><br>            TYPE_IPV4: parse_ipv4; <span class="hljs-comment">// 如果是IPv4，转到IPv4解析</span><br>            <span class="hljs-keyword">default</span>: accept; <span class="hljs-comment">// 否则接受包</span><br>        &#125;<br>    &#125;<br><br>    state parse_ipv4 &#123;<br>        packet.extract(hdr.ipv4); <span class="hljs-comment">// 提取IPv4头部</span><br>        transition <span class="hljs-title function_">select</span><span class="hljs-params">(hdr.ipv4.protocol)</span>&#123; <span class="hljs-comment">// 根据协议字段判断下一状态</span><br>            <span class="hljs-number">6</span> : parse_tcp; <span class="hljs-comment">// TCP协议则进入TCP解析</span><br>            <span class="hljs-keyword">default</span>: accept; <span class="hljs-comment">// 其他协议直接接受</span><br>        &#125;<br>    &#125;<br><br>    state parse_tcp &#123;<br>        packet.extract(hdr.tcp); <span class="hljs-comment">// 提取TCP头部</span><br>        transition accept; <span class="hljs-comment">// 接受包</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Verification <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyVerifyChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>    apply &#123;  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Ingress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyIngress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                  inout metadata meta,</span><br><span class="hljs-params">                  inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br>    action <span class="hljs-title function_">drop</span><span class="hljs-params">()</span> &#123;<br>        mark_to_drop(standard_metadata); <span class="hljs-comment">// 丢弃数据包</span><br>    &#125;<br><br>    action <span class="hljs-title function_">ecmp_group</span><span class="hljs-params">(bit&lt;<span class="hljs-number">14</span>&gt; ecmp_group_id, bit&lt;<span class="hljs-number">16</span>&gt; num_nhops)</span>&#123;<br>        hash(meta.ecmp_hash, <span class="hljs-comment">// 对以下字段进行哈希计算</span><br>    HashAlgorithm.crc16, <span class="hljs-comment">// 哈希算法为crc16</span><br>    (bit&lt;<span class="hljs-number">1</span>&gt;)<span class="hljs-number">0</span>, <span class="hljs-comment">// 随机种子</span><br>    &#123; hdr.ipv4.srcAddr,<br>      hdr.ipv4.dstAddr,<br>          hdr.tcp.srcPort,<br>          hdr.tcp.dstPort,<br>          hdr.ipv4.protocol&#125;,<br>    num_nhops); <span class="hljs-comment">// 取模运算基数为下一跳数</span><br><br>    meta.ecmp_group_id = ecmp_group_id; <span class="hljs-comment">// 存储ECMP组ID</span><br>    &#125;<br><br>    action <span class="hljs-title function_">set_nhop</span><span class="hljs-params">(macAddr_t dstAddr, egressSpec_t port)</span> &#123;<br>        hdr.ethernet.srcAddr = hdr.ethernet.dstAddr; <span class="hljs-comment">// 源MAC地址设为原先的目的地址</span><br>        hdr.ethernet.dstAddr = dstAddr; <span class="hljs-comment">// 设置新的目的MAC地址</span><br>        standard_metadata.egress_spec = port; <span class="hljs-comment">// 设置转发端口</span><br>        hdr.ipv4.ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>; <span class="hljs-comment">// TTL减1</span><br>    &#125;<br><br>    table ecmp_group_to_nhop &#123;<br>        key = &#123;<br>            meta.ecmp_group_id:    exact; <span class="hljs-comment">// ECMP组ID精确匹配</span><br>            meta.ecmp_hash: exact; <span class="hljs-comment">// 哈希值精确匹配</span><br>        &#125;<br>        actions = &#123;<br>            drop; <span class="hljs-comment">// 丢弃</span><br>            set_nhop; <span class="hljs-comment">// 设置下一跳</span><br>        &#125;<br>        size = <span class="hljs-number">1024</span>; <span class="hljs-comment">// 表大小为1024</span><br>    &#125;<br><br>    table ipv4_lpm &#123;<br>        key = &#123;<br>            hdr.ipv4.dstAddr: lpm; <span class="hljs-comment">// 目的IP地址最长前缀匹配</span><br>        &#125;<br>        actions = &#123;<br>            set_nhop; <span class="hljs-comment">// 设置下一跳</span><br>            ecmp_group; <span class="hljs-comment">// 使用ECMP</span><br>            drop; <span class="hljs-comment">// 丢弃</span><br>        &#125;<br>        size = <span class="hljs-number">1024</span>; <span class="hljs-comment">// 表大小为1024</span><br>        default_action = drop; <span class="hljs-comment">// 默认动作为丢弃</span><br>    &#125;<br><br>    apply &#123;<br>        <span class="hljs-keyword">if</span> (hdr.ipv4.isValid())&#123; <span class="hljs-comment">// 如果IPv4头部有效</span><br>            <span class="hljs-keyword">switch</span> (ipv4_lpm.apply().action_run)&#123; <span class="hljs-comment">// 应用ipv4_lpm表并获取运行的action</span><br>                ecmp_group: &#123;<br>                    ecmp_group_to_nhop.apply(); <span class="hljs-comment">// 若是ECMP则再应用映射表</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Egress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyEgress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                 inout metadata meta,</span><br><span class="hljs-params">                 inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br>    apply &#123;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Computation <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyComputeChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>     apply &#123;<br>update_checksum(<br>    hdr.ipv4.isValid(), <span class="hljs-comment">// 仅在IPv4有效时计算校验和</span><br>            &#123; hdr.ipv4.version,<br>          hdr.ipv4.ihl,<br>              hdr.ipv4.dscp,<br>              hdr.ipv4.ecn,<br>              hdr.ipv4.totalLen,<br>              hdr.ipv4.identification,<br>              hdr.ipv4.flags,<br>              hdr.ipv4.fragOffset,<br>              hdr.ipv4.ttl,<br>              hdr.ipv4.protocol,<br>              hdr.ipv4.srcAddr,<br>              hdr.ipv4.dstAddr &#125;,<br>              hdr.ipv4.hdrChecksum, <span class="hljs-comment">// 要更新的校验和字段</span><br>              HashAlgorithm.csum16); <span class="hljs-comment">// 使用16位加法算法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>DE parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyDeparser</span><span class="hljs-params">(packet_out packet, in headers hdr)</span> &#123;<br>    apply &#123;<br>        packet.emit(hdr.ethernet); <span class="hljs-comment">// 重新封装以太网头部</span><br>        packet.emit(hdr.ipv4); <span class="hljs-comment">// 重新封装IPv4头部</span><br>        packet.emit(hdr.tcp); <span class="hljs-comment">// 重新封装TCP头部</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Switch <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C">V1Switch(<br>MyParser(),<br>MyVerifyChecksum(),<br>MyIngress(),<br>MyEgress(),<br>MyComputeChecksum(),<br>MyDeparser()<br>) main;<br></code></pre></td></tr></table></figure></li><li><code>s1-commands.txt</code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 交换机S1<br>// 设置匹配表ipv4_lpm和匹配表ecmp_group_to_nhop的默认动作为丢包<br>table_set_default ipv4_lpm drop<br>table_set_default ecmp_group_to_nhop drop<br>// 设置发完主机Host1的数据包直接通过1端口发出，不使用ECMP<br>table_add ipv4_lpm set_nhop 10.0.1.1/32 =&gt;  00:00:0a:00:01:01 1<br>// 设置发完Host2的数据包使用ECMP，ECMP的组号为1、共包含4条可选路径<br>table_add ipv4_lpm ecmp_group 10.0.6.2/32 =&gt; 1 4<br>// 在ECMP组1中，针对哈希结果0、1、2、3分布设置出端口为2、3、4、5<br>table_add ecmp_group_to_nhop set_nhop 1 0 =&gt;  00:00:00:02:01:00 2<br>table_add ecmp_group_to_nhop set_nhop 1 1 =&gt;  00:00:00:03:01:00 3<br>table_add ecmp_group_to_nhop set_nhop 1 2 =&gt;  00:00:00:04:01:00 4<br>table_add ecmp_group_to_nhop set_nhop 1 3 =&gt;  00:00:00:05:01:00 5<br></code></pre></td></tr></table></figure></li><li><code>s2-commands.txt</code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 交换机S2<br>// 设置匹配表ipv4_lpm和匹配表ecmp_group_to_nhop的默认动作为丢包<br>table_set_default ipv4_lpm drop<br>table_set_default ecmp_group_to_nhop drop<br>// 设置发完Host2的数据包直接通过1端口发送出去<br>table_add ipv4_lpm set_nhop 10.0.1.1/32 =&gt; 00:00:00:01:02:00 1<br>// 设置发完Host1的数据包直接通过2端口发送出去<br>table_add ipv4_lpm set_nhop 10.0.6.2/32 =&gt; 00:00:00:06:02:00 2<br></code></pre></td></tr></table></figure></li><li><code>s3-commands.txt</code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 交换机S3<br>// 设置匹配表ipv4_lpm和匹配表ecmp_group_to_nhop的默认动作为丢包<br>table_set_default ipv4_lpm drop<br>table_set_default ecmp_group_to_nhop drop<br>// 设置发完Host2的数据包直接通过1端口发送出去<br>table_add ipv4_lpm set_nhop 10.0.1.1/32 =&gt; 00:00:00:01:03:00 1<br>// 设置发完Host1的数据包直接通过2端口发送出去<br>table_add ipv4_lpm set_nhop 10.0.6.2/32 =&gt; 00:00:00:06:03:00 2<br></code></pre></td></tr></table></figure></li><li><code>s4-commands.txt</code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 交换机S4<br>// 设置匹配表ipv4_lpm和匹配表ecmp_group_to_nhop的默认动作为丢包<br>table_set_default ipv4_lpm drop<br>table_set_default ecmp_group_to_nhop drop<br>// 设置发完Host2的数据包直接通过1端口发送出去<br>table_add ipv4_lpm set_nhop 10.0.1.1/32 =&gt; 00:00:00:01:04:00 1<br>// 设置发完Host1的数据包直接通过2端口发送出去<br>table_add ipv4_lpm set_nhop 10.0.6.2/32 =&gt; 00:00:00:06:04:00 2<br></code></pre></td></tr></table></figure></li><li><code>s5-commands.txt</code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 交换机S5<br>// 设置匹配表ipv4_lpm和匹配表ecmp_group_to_nhop的默认动作为丢包<br>table_set_default ipv4_lpm drop<br>table_set_default ecmp_group_to_nhop drop<br>// 设置发完Host2的数据包直接通过1端口发送出去<br>table_add ipv4_lpm set_nhop 10.0.1.1/32 =&gt; 00:00:00:01:05:00 1<br>// 设置发完Host1的数据包直接通过2端口发送出去<br>table_add ipv4_lpm set_nhop 10.0.6.2/32 =&gt; 00:00:00:06:05:00 2<br></code></pre></td></tr></table></figure></li><li><code>s6-commands.txt</code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 交换机S6<br>// 设置匹配表ipv4_lpm和匹配表ecmp_group_to_nhop的默认动作为丢包<br>table_set_default ipv4_lpm drop<br>table_set_default ecmp_group_to_nhop drop<br>// 设置发完主机Host2的数据包直接通过1端口发出，不使用ECMP<br>table_add ipv4_lpm set_nhop 10.0.6.2/32 =&gt;  00:00:0a:00:06:02 1<br>// 设置发完Host1的数据包使用ECMP，ECMP的组号为1、共包含4条可选路径<br>table_add ipv4_lpm ecmp_group 10.0.1.0/24 =&gt; 1 4<br>// 在ECMP组1中，针对哈希结果0、1、2、3分布设置出端口为2、3、4、5<br>table_add ecmp_group_to_nhop set_nhop 1 0 =&gt;  00:00:00:02:06:00 2<br>table_add ecmp_group_to_nhop set_nhop 1 1 =&gt;  00:00:00:03:06:00 3<br>table_add ecmp_group_to_nhop set_nhop 1 2 =&gt;  00:00:00:04:06:00 4<br>table_add ecmp_group_to_nhop set_nhop 1 3 =&gt;  00:00:00:05:06:00 5<br></code></pre></td></tr></table></figure></li><li><code>send.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># 指定解释器为 Python 3</span><br><br><span class="hljs-keyword">import</span> argparse   <span class="hljs-comment"># 可选模块，用于命令行参数解析（此脚本未使用）</span><br><span class="hljs-keyword">import</span> sys        <span class="hljs-comment"># 用于访问命令行参数</span><br><span class="hljs-keyword">import</span> socket     <span class="hljs-comment"># 用于主机名到 IP 的转换</span><br><span class="hljs-keyword">import</span> random     <span class="hljs-comment"># 用于生成随机端口号</span><br><span class="hljs-keyword">import</span> struct     <span class="hljs-comment"># 用于处理二进制数据（此脚本未使用）</span><br><br><span class="hljs-comment"># 从 Scapy 导入必要的函数和协议层</span><br><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> sendp, get_if_list, get_if_hwaddr<br><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> Ether, IP, UDP, TCP<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_if</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    自动获取名为 eth0 的网络接口名称。</span><br><span class="hljs-string">    返回值：接口名称字符串，如 &#x27;h1-eth0&#x27;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    ifs = get_if_list()  <span class="hljs-comment"># 获取所有网络接口列表</span><br>    iface = <span class="hljs-literal">None</span>         <span class="hljs-comment"># 默认未找到接口</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ifs:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;eth0&quot;</span> <span class="hljs-keyword">in</span> i:  <span class="hljs-comment"># 查找包含 &#x27;eth0&#x27; 的接口（适用于 Mininet 环境）</span><br>            iface = i<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> iface:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cannot find eth0 interface&quot;</span>)<br>        exit(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> iface<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    主函数：向指定目标地址发送指定数量的随机 TCP 数据包。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &lt; <span class="hljs-number">3</span>:<br>        <span class="hljs-comment"># 如果命令行参数数量不足，则提示用法并退出</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;pass 2 arguments: &lt;destination&gt; &lt;number_of_random_packets&gt;&#x27;</span>)<br>        exit(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 获取目标地址（第一个参数）并解析为 IP 地址</span><br>    addr = socket.gethostbyname(sys.argv[<span class="hljs-number">1</span>])<br><br>    <span class="hljs-comment"># 获取网卡名称</span><br>    iface = get_if()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sending on interface %s to %s&quot;</span> % (iface, <span class="hljs-built_in">str</span>(addr)))<br><br>    <span class="hljs-comment"># 发送指定数量的随机 TCP 包</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">2</span>])):<br>        <span class="hljs-comment"># 构造以太网帧，目的地址为广播地址 ff:ff:ff:ff:ff:ff</span><br>        pkt = Ether(src=get_if_hwaddr(iface), dst=<span class="hljs-string">&#x27;ff:ff:ff:ff:ff:ff&#x27;</span>)<br>        <br>        <span class="hljs-comment"># 添加 IP 层，目标 IP 为用户输入的地址</span><br>        <span class="hljs-comment"># 添加 TCP 层，目标端口和源端口随机生成</span><br>        pkt = pkt / IP(dst=addr) / TCP(<br>            dport=random.randint(<span class="hljs-number">5000</span>, <span class="hljs-number">60000</span>),  <span class="hljs-comment"># 随机目的端口</span><br>            sport=random.randint(<span class="hljs-number">49152</span>, <span class="hljs-number">65535</span>)  <span class="hljs-comment"># 随机源端口</span><br>        )<br><br>        <span class="hljs-comment"># 发送数据包（通过指定接口），不显示详细信息</span><br>        sendp(pkt, iface=iface, verbose=<span class="hljs-literal">False</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure></li><li><code>network.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> p4utils.mininetlib.network_API <span class="hljs-keyword">import</span> NetworkAPI<br><br>net = NetworkAPI()<br><br><span class="hljs-comment"># Network general options</span><br>net.setLogLevel(<span class="hljs-string">&#x27;info&#x27;</span>)<br><br><span class="hljs-comment"># Network definition</span><br>net.addP4Switch(<span class="hljs-string">&#x27;s1&#x27;</span>, cli_input=<span class="hljs-string">&#x27;sw-commands/s1-commands.txt&#x27;</span>)<br>net.addP4Switch(<span class="hljs-string">&#x27;s2&#x27;</span>, cli_input=<span class="hljs-string">&#x27;sw-commands/s2-commands.txt&#x27;</span>)<br>net.addP4Switch(<span class="hljs-string">&#x27;s3&#x27;</span>, cli_input=<span class="hljs-string">&#x27;sw-commands/s3-commands.txt&#x27;</span>)<br>net.addP4Switch(<span class="hljs-string">&#x27;s4&#x27;</span>, cli_input=<span class="hljs-string">&#x27;sw-commands/s4-commands.txt&#x27;</span>)<br>net.addP4Switch(<span class="hljs-string">&#x27;s5&#x27;</span>, cli_input=<span class="hljs-string">&#x27;sw-commands/s5-commands.txt&#x27;</span>)<br>net.addP4Switch(<span class="hljs-string">&#x27;s6&#x27;</span>, cli_input=<span class="hljs-string">&#x27;sw-commands/s6-commands.txt&#x27;</span>)<br>net.setP4SourceAll(<span class="hljs-string">&#x27;p4src/ecmp.p4&#x27;</span>)<br><br>net.addHost(<span class="hljs-string">&#x27;h1&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h2&#x27;</span>)<br><br>net.addLink(<span class="hljs-string">&quot;h1&quot;</span>, <span class="hljs-string">&quot;s1&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;h2&quot;</span>, <span class="hljs-string">&quot;s6&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-string">&quot;s2&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-string">&quot;s3&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-string">&quot;s4&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-string">&quot;s5&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s2&quot;</span>, <span class="hljs-string">&quot;s6&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s3&quot;</span>, <span class="hljs-string">&quot;s6&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s4&quot;</span>, <span class="hljs-string">&quot;s6&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s5&quot;</span>, <span class="hljs-string">&quot;s6&quot;</span>)<br><br><span class="hljs-comment"># Assignment strategy</span><br>net.mixed()<br><br><span class="hljs-comment"># Nodes general options</span><br>net.enablePcapDumpAll()<br>net.enableLogAll()<br>net.enableCli()<br>net.startNetwork()<br></code></pre></td></tr></table></figure></li></ol><ul><li><h1 id="p4仿真">P4仿真</h1></li></ul><ol type="1"><li>启动网络拓扑<code>sudo p4run</code></li></ol><figure><img src="/2025/08/06/P4%2008-ECMP/2.png" alt="启动网络拓扑"><figcaption aria-hidden="true">启动网络拓扑</figcaption></figure><ol start="2" type="1"><li>使用<code>pingall</code>命令测试<code>h1</code>,<code>h2</code>是否联通</li></ol><figure><img src="/2025/08/06/P4%2008-ECMP/3.png" alt="使用ping命令"><figcaption aria-hidden="true">使用ping命令</figcaption></figure><ol start="3" type="1"><li>监控4条链路 (从<code>s1-eth2</code>至<code>s1-eth5</code>)<code>sudo tcpdump -enn -i s1-ethX</code></li></ol><figure><img src="/2025/08/06/P4%2008-ECMP/4.png" alt="监控四条链路"><figcaption aria-hidden="true">监控四条链路</figcaption></figure><ol start="4" type="1"><li>再次<code>pingall</code>测试<code>h1</code>,<code>h2</code>之间的连接</li></ol><figure><img src="/2025/08/06/P4%2008-ECMP/5.png" alt="再次pingall"><figcaption aria-hidden="true">再次pingall</figcaption></figure><ol start="5" type="1"><li>在两个主机之间做 <code>iperf</code>由于属于同一流的所有数据包都有相同的5元元组,因此哈希总是返回相同的索引</li></ol><figure><img src="/2025/08/06/P4%2008-ECMP/6.png" alt="iperf测试"><figcaption aria-hidden="true">iperf测试</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>P4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>P4</tag>
      
      <tag>SDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P4 07-RSVP</title>
    <link href="/2025/08/04/P4%2007-RSVP/"/>
    <url>/2025/08/04/P4%2007-RSVP/</url>
    
    <content type="html"><![CDATA[<h1 id="p4示例程序-07-rsvp">P4示例程序-07 RSVP</h1><ul><li><h1 id="功能">功能</h1>使用Meter表实现带宽限速。Meter本质就是一个流量计量器，它支持实时统计通过的流量，并根据配置的速率限制流量。底层实现一般是用令牌桶或者类似算法，令牌桶维护两个计数器：桶容量代表允许突发的最大流量、令牌生成速率用于控制流量的平均速率。在交换机中的逻辑实现可采用如下配置，当有数据包到达时：</li></ul><ol type="1"><li>桶里有足够令牌时：包被标记为绿色（正常，合规流量），消耗对应令牌数；</li><li>桶里令牌不足但尚未完全溢出时：包被标记为黄色（轻微超出限速，可以容忍）；</li><li>令牌完全用完时：包被标记为红色（超出限速，丢弃或降级处理）。</li></ol><ul><li><h1 id="拓扑结构">拓扑结构</h1></li></ul><figure><img src="/2025/08/04/P4%2007-RSVP/1.png" alt="拓扑结构"><figcaption aria-hidden="true">拓扑结构</figcaption></figure><ul><li><h1 id="代码">代码</h1></li></ul><ol type="1"><li><code>p4app.json</code> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;topology&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;assignment_strategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;l3&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bw&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;links&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s2&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s3&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s4&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s4&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s5&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s6&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s4&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s5&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s4&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s6&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s5&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s7&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s6&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s7&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s7&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;h5&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s7&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;h6&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s3&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h4&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s5&quot;</span><span class="hljs-punctuation">]</span><br>          <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;h1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;h2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;h3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;h4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;h5&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;h6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;switches&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;s1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;s2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;s3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;s4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;s5&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;s6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;s7&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li>Headers <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">9</span>&gt;  egressSpec_t;        <span class="hljs-comment">// 9位出口端口号</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">48</span>&gt; macAddr_t;           <span class="hljs-comment">// 48位 MAC 地址类型</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">32</span>&gt; ip4Addr_t;           <span class="hljs-comment">// 32位 IPv4 地址类型</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">20</span>&gt; <span class="hljs-type">label_t</span>;             <span class="hljs-comment">// 20位 MPLS 标签类型</span><br><br>header <span class="hljs-type">ethernet_t</span> &#123;<br>    macAddr_t dstAddr;              <span class="hljs-comment">// 目的 MAC 地址</span><br>    macAddr_t srcAddr;              <span class="hljs-comment">// 源 MAC 地址</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   etherType;            <span class="hljs-comment">// 以太网类型字段（IPv4/MPLS）</span><br>&#125;<br><br>header <span class="hljs-type">mpls_t</span> &#123;<br>    bit&lt;<span class="hljs-number">20</span>&gt;   label;                <span class="hljs-comment">// MPLS 标签值</span><br>    bit&lt;<span class="hljs-number">3</span>&gt;    <span class="hljs-built_in">exp</span>;                  <span class="hljs-comment">// 实验字段（一般用于 QoS）</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;    s;                    <span class="hljs-comment">// Bottom of Stack 标志位</span><br>    bit&lt;<span class="hljs-number">8</span>&gt;    ttl;                  <span class="hljs-comment">// Time To Live</span><br>&#125;<br><br>header <span class="hljs-type">ipv4_t</span> &#123;<br>    bit&lt;<span class="hljs-number">4</span>&gt;    version;              <span class="hljs-comment">// IP 版本</span><br>    bit&lt;<span class="hljs-number">4</span>&gt;    ihl;                  <span class="hljs-comment">// 头部长度</span><br>    bit&lt;<span class="hljs-number">8</span>&gt;    diffserv;             <span class="hljs-comment">// 服务类型字段</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   totalLen;             <span class="hljs-comment">// 总长度</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   identification;       <span class="hljs-comment">// 标识字段</span><br>    bit&lt;<span class="hljs-number">3</span>&gt;    flags;                <span class="hljs-comment">// 标志位</span><br>    bit&lt;<span class="hljs-number">13</span>&gt;   fragOffset;           <span class="hljs-comment">// 分段偏移量</span><br>    bit&lt;<span class="hljs-number">8</span>&gt;    ttl;                  <span class="hljs-comment">// 生存时间</span><br>    bit&lt;<span class="hljs-number">8</span>&gt;    protocol;             <span class="hljs-comment">// 上层协议</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   hdrChecksum;          <span class="hljs-comment">// IP 头校验和</span><br>    ip4Addr_t srcAddr;              <span class="hljs-comment">// 源 IP 地址</span><br>    ip4Addr_t dstAddr;              <span class="hljs-comment">// 目的 IP 地址</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">metadata</span> &#123;</span><br>    bit&lt;<span class="hljs-number">2</span>&gt; meter_color;             <span class="hljs-comment">// 速率限制颜色：0绿、1黄、2红（rsvp meter 读入）</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">headers</span> &#123;</span><br>    <span class="hljs-type">ethernet_t</span>                      ethernet;   <span class="hljs-comment">// 以太网头</span><br>    <span class="hljs-type">mpls_t</span>[CONST_MAX_MPLS_HOPS]     mpls;       <span class="hljs-comment">// MPLS 标签栈（最多8个）</span><br>    <span class="hljs-type">ipv4_t</span>                          ipv4;       <span class="hljs-comment">// IPv4 头</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C"><br>parser <span class="hljs-title function_">MyParser</span><span class="hljs-params">(packet_in packet,</span><br><span class="hljs-params">                out headers hdr,</span><br><span class="hljs-params">                inout metadata meta,</span><br><span class="hljs-params">                inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    state start &#123;<br>        transition parse_ethernet;  <span class="hljs-comment">// 起始状态跳转到以太网解析</span><br>    &#125;<br><br>    state parse_ethernet &#123;<br>        packet.extract(hdr.ethernet);  <span class="hljs-comment">// 提取以太网头</span><br>        transition <span class="hljs-title function_">select</span><span class="hljs-params">(hdr.ethernet.etherType)</span> &#123;<br>            TYPE_MPLS: parse_mpls;    <span class="hljs-comment">// 若为 MPLS 类型，则跳转到 MPLS 解析状态</span><br>            TYPE_IPV4: parse_ipv4;    <span class="hljs-comment">// 若为 IPv4 类型，则跳转到 IPv4 解析状态</span><br>            <span class="hljs-keyword">default</span>: accept;          <span class="hljs-comment">// 否则直接接受</span><br>        &#125;<br>    &#125;<br><br>    state parse_mpls &#123;<br>        packet.extract(hdr.mpls.next);       <span class="hljs-comment">// 提取下一个 MPLS 标签</span><br>        transition <span class="hljs-title function_">select</span><span class="hljs-params">(hdr.mpls.last.s)</span> &#123;<br>            <span class="hljs-number">1</span>: parse_ipv4;                   <span class="hljs-comment">// 如果是最后一个 MPLS 标签，跳转 IPv4</span><br>            <span class="hljs-keyword">default</span>: parse_mpls;             <span class="hljs-comment">// 否则继续提取下一个 MPLS</span><br>        &#125;<br>    &#125;<br><br>    state parse_ipv4 &#123;<br>        packet.extract(hdr.ipv4);  <span class="hljs-comment">// 提取 IPv4 头</span><br>        transition accept;         <span class="hljs-comment">// 接受并结束解析</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Verification <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyVerifyChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>    apply &#123; <br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure></li><li>Ingress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyIngress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                  inout metadata meta,</span><br><span class="hljs-params">                  inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    <span class="hljs-comment">/* Direct meter*/</span>               <span class="hljs-comment">// 定义基于字节的直接计量器，meter_color宽度2位</span><br>    direct_meter&lt;bit&lt;<span class="hljs-number">2</span>&gt;&gt;(MeterType.bytes) rsvp_meter;<br><br>    <span class="hljs-comment">// 丢弃包动作，标记丢弃</span><br>    action <span class="hljs-title function_">drop</span><span class="hljs-params">()</span> &#123;<br>        mark_to_drop(standard_metadata);<br>    &#125;<br><br>    <span class="hljs-comment">// IPv4转发动作，设置以太网MAC和出口端口，同时TTL减1</span><br>    action <span class="hljs-title function_">ipv4_forward</span><span class="hljs-params">(macAddr_t dstAddr, egressSpec_t port)</span> &#123;<br><br>        hdr.ethernet.srcAddr = hdr.ethernet.dstAddr;  <span class="hljs-comment">// 以太网源地址设为原目标地址</span><br>        hdr.ethernet.dstAddr = dstAddr;               <span class="hljs-comment">// 以太网目标地址更新为下一跳地址</span><br><br>        standard_metadata.egress_spec = port;         <span class="hljs-comment">// 设置包出口端口</span><br>        hdr.ipv4.ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;              <span class="hljs-comment">// IP TTL减1</span><br>    &#125;<br><br>    <span class="hljs-comment">// MPLS入栈1跳标签动作</span><br>    action <span class="hljs-title function_">mpls_ingress_1_hop</span><span class="hljs-params">(<span class="hljs-type">label_t</span> label_1)</span> &#123;<br><br>        rsvp_meter.read(meta.meter_color);            <span class="hljs-comment">// 读计量器状态，更新meter_color</span><br><br>        hdr.ethernet.etherType = TYPE_MPLS;            <span class="hljs-comment">// 修改以太网类型为MPLS</span><br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);                         <span class="hljs-comment">// 在标签栈前端插入1个标签</span><br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();                         <span class="hljs-comment">// 设置标签有效</span><br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_1;                    <span class="hljs-comment">// 设置标签值</span><br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;             <span class="hljs-comment">// TTL设置为IPv4 TTL-1</span><br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">1</span>;                              <span class="hljs-comment">// 标记为栈底标签</span><br>    &#125;<br><br>    <span class="hljs-comment">// MPLS入栈2跳标签动作</span><br>    action <span class="hljs-title function_">mpls_ingress_2_hop</span><span class="hljs-params">(<span class="hljs-type">label_t</span> label_1, <span class="hljs-type">label_t</span> label_2)</span> &#123;<br>        rsvp_meter.read(meta.meter_color);<br><br>        hdr.ethernet.etherType = TYPE_MPLS;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);                     <span class="hljs-comment">// 先插入第1个标签</span><br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_1;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">1</span>;                          <span class="hljs-comment">// 栈底标签</span><br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);                     <span class="hljs-comment">// 再插入第2个标签，成为新的栈顶</span><br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_2;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;                          <span class="hljs-comment">// 非栈底标签</span><br>    &#125;<br><br>    <span class="hljs-comment">// MPLS入栈3跳标签动作</span><br>    action <span class="hljs-title function_">mpls_ingress_3_hop</span><span class="hljs-params">(<span class="hljs-type">label_t</span> label_1, <span class="hljs-type">label_t</span> label_2, <span class="hljs-type">label_t</span> label_3)</span> &#123;<br>        rsvp_meter.read(meta.meter_color);<br><br>        hdr.ethernet.etherType = TYPE_MPLS;<br><br>        <span class="hljs-comment">// 依次插入3个标签，注意s字段只有第1个为1，其他为0</span><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_1;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">1</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_2;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_3;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// MPLS入栈4跳标签动作（以下类似，依次插入标签）</span><br>    action <span class="hljs-title function_">mpls_ingress_4_hop</span><span class="hljs-params">(<span class="hljs-type">label_t</span> label_1, <span class="hljs-type">label_t</span> label_2, <span class="hljs-type">label_t</span> label_3, <span class="hljs-type">label_t</span> label_4)</span> &#123;<br>        rsvp_meter.read(meta.meter_color);<br><br>        hdr.ethernet.etherType = TYPE_MPLS;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_1;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">1</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_2;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_3;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_4;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// MPLS入栈5跳标签动作</span><br>    action <span class="hljs-title function_">mpls_ingress_5_hop</span><span class="hljs-params">(<span class="hljs-type">label_t</span> label_1, <span class="hljs-type">label_t</span> label_2, <span class="hljs-type">label_t</span> label_3, <span class="hljs-type">label_t</span> label_4, <span class="hljs-type">label_t</span> label_5)</span> &#123;<br>        rsvp_meter.read(meta.meter_color);<br><br>        hdr.ethernet.etherType = TYPE_MPLS;<br><br>        <span class="hljs-comment">// 依次插入5个标签，s字段仅第1个标签为1</span><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_1;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">1</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_2;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_3;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_4;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_5;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// MPLS入栈6跳标签动作</span><br>    action <span class="hljs-title function_">mpls_ingress_6_hop</span><span class="hljs-params">(<span class="hljs-type">label_t</span> label_1, <span class="hljs-type">label_t</span> label_2, <span class="hljs-type">label_t</span> label_3, <span class="hljs-type">label_t</span> label_4, <span class="hljs-type">label_t</span> label_5, <span class="hljs-type">label_t</span> label_6)</span> &#123;<br>        rsvp_meter.read(meta.meter_color);<br><br>        hdr.ethernet.etherType = TYPE_MPLS;<br><br>        <span class="hljs-comment">// 依次插入6个标签</span><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_1;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">1</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_2;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_3;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_4;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_5;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_6;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// MPLS入栈7跳标签动作</span><br>    action <span class="hljs-title function_">mpls_ingress_7_hop</span><span class="hljs-params">(<span class="hljs-type">label_t</span> label_1, <span class="hljs-type">label_t</span> label_2, <span class="hljs-type">label_t</span> label_3, <span class="hljs-type">label_t</span> label_4, <span class="hljs-type">label_t</span> label_5, <span class="hljs-type">label_t</span> label_6, <span class="hljs-type">label_t</span> label_7)</span> &#123;<br>        rsvp_meter.read(meta.meter_color);<br><br>        hdr.ethernet.etherType = TYPE_MPLS;<br><br>        <span class="hljs-comment">// 依次插入7个标签</span><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_1;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">1</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_2;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_3;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_4;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_5;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_6;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_7;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// MPLS入栈8跳标签动作</span><br>    action <span class="hljs-title function_">mpls_ingress_8_hop</span><span class="hljs-params">(<span class="hljs-type">label_t</span> label_1, <span class="hljs-type">label_t</span> label_2, <span class="hljs-type">label_t</span> label_3, <span class="hljs-type">label_t</span> label_4, <span class="hljs-type">label_t</span> label_5, <span class="hljs-type">label_t</span> label_6, <span class="hljs-type">label_t</span> label_7, <span class="hljs-type">label_t</span> label_8)</span> &#123;<br>        rsvp_meter.read(meta.meter_color);<br><br>        hdr.ethernet.etherType = TYPE_MPLS;<br><br>        <span class="hljs-comment">// 依次插入8个标签，s字段同前</span><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_1;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">1</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_2;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_3;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_4;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_5;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_6;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_7;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br><br>        hdr.mpls.push_front(<span class="hljs-number">1</span>);<br>        hdr.mpls[<span class="hljs-number">0</span>].setValid();<br>        hdr.mpls[<span class="hljs-number">0</span>].label = label_8;<br>        hdr.mpls[<span class="hljs-number">0</span>].ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>;<br>        hdr.mpls[<span class="hljs-number">0</span>].s = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// FEC（Forwarding Equivalence Class）查表，匹配IP源和目的地址</span><br>    table FEC_tbl &#123;<br>        key = &#123;<br>            hdr.ipv4.srcAddr: lpm;        <span class="hljs-comment">// 源地址最长前缀匹配</span><br>            hdr.ipv4.dstAddr: exact;      <span class="hljs-comment">// 目的地址精确匹配</span><br>        &#125;<br>        actions = &#123;                      <span class="hljs-comment">// 可执行动作集</span><br>            ipv4_forward;                <span class="hljs-comment">// IPv4转发</span><br>            mpls_ingress_1_hop;          <span class="hljs-comment">// MPLS入栈1跳</span><br>            mpls_ingress_2_hop;          <span class="hljs-comment">// MPLS入栈2跳</span><br>            mpls_ingress_3_hop;          <span class="hljs-comment">// MPLS入栈3跳</span><br>            mpls_ingress_4_hop;          <span class="hljs-comment">// MPLS入栈4跳</span><br>            mpls_ingress_5_hop;          <span class="hljs-comment">// MPLS入栈5跳</span><br>            mpls_ingress_6_hop;          <span class="hljs-comment">// MPLS入栈6跳</span><br>            mpls_ingress_7_hop;          <span class="hljs-comment">// MPLS入栈7跳</span><br>            mpls_ingress_8_hop;          <span class="hljs-comment">// MPLS入栈8跳</span><br>            NoAction;                    <span class="hljs-comment">// 无动作</span><br>        &#125;<br>        default_action = NoAction();     <span class="hljs-comment">// 默认无动作</span><br>        meters = rsvp_meter;             <span class="hljs-comment">// 关联计量器</span><br>        size = <span class="hljs-number">256</span>;                     <span class="hljs-comment">// 表大小256条</span><br>    &#125;<br><br>    <span class="hljs-comment">// MPLS转发动作</span><br>    action <span class="hljs-title function_">mpls_forward</span><span class="hljs-params">(macAddr_t dstAddr, egressSpec_t port)</span> &#123;<br><br>        hdr.ethernet.srcAddr = hdr.ethernet.dstAddr;  <span class="hljs-comment">// 以太网源地址设为原目标地址</span><br>        hdr.ethernet.dstAddr = dstAddr;               <span class="hljs-comment">// 更新以太网目标地址</span><br><br>        standard_metadata.egress_spec = port;         <span class="hljs-comment">// 设置出口端口</span><br><br>        hdr.mpls[<span class="hljs-number">1</span>].ttl = hdr.mpls[<span class="hljs-number">0</span>].ttl - <span class="hljs-number">1</span>;        <span class="hljs-comment">// 下一个MPLS标签TTL减1</span><br><br>        hdr.mpls.pop_front(<span class="hljs-number">1</span>);                         <span class="hljs-comment">// 弹出当前栈顶标签</span><br>    &#125;<br><br>    <span class="hljs-comment">// Penultimate Hop Popping（倒数第二跳弹栈）动作</span><br>    action <span class="hljs-title function_">penultimate</span><span class="hljs-params">(macAddr_t dstAddr, egressSpec_t port)</span> &#123;<br><br>        hdr.ethernet.etherType = TYPE_IPV4;           <span class="hljs-comment">// 将以太网类型设置回IPv4</span><br><br>        hdr.ethernet.srcAddr = hdr.ethernet.dstAddr;  <span class="hljs-comment">// 更新以太网源地址</span><br>        hdr.ethernet.dstAddr = dstAddr;                <span class="hljs-comment">// 更新以太网目标地址</span><br><br>        hdr.ipv4.ttl = hdr.mpls[<span class="hljs-number">0</span>].ttl - <span class="hljs-number">1</span>;            <span class="hljs-comment">// 设置IP TTL</span><br><br>        standard_metadata.egress_spec = port;           <span class="hljs-comment">// 设置出口端口</span><br>        hdr.mpls.pop_front(<span class="hljs-number">1</span>);                          <span class="hljs-comment">// 弹出MPLS栈顶标签</span><br>    &#125;<br><br>    <span class="hljs-comment">// MPLS查表，匹配栈顶标签和栈底标记s</span><br>    table mpls_tbl &#123;<br>        key = &#123;<br>            hdr.mpls[<span class="hljs-number">0</span>].label: exact;     <span class="hljs-comment">// 精确匹配标签</span><br>            hdr.mpls[<span class="hljs-number">0</span>].s: exact;         <span class="hljs-comment">// 精确匹配栈底位</span><br>        &#125;<br>        actions = &#123;<br>            mpls_forward;                <span class="hljs-comment">// 普通MPLS转发动作</span><br>            penultimate;                 <span class="hljs-comment">// 倒数第二跳弹栈动作</span><br>            NoAction;                   <span class="hljs-comment">// 无动作</span><br>        &#125;<br>        default_action = NoAction();    <span class="hljs-comment">// 默认无动作</span><br>        size = CONST_MAX_LABELS;        <span class="hljs-comment">// 表大小128条</span><br>    &#125;<br><br>    apply &#123;<br>        <span class="hljs-comment">/* Ingress Pipeline Control Logic */</span><br>        <span class="hljs-keyword">if</span>(hdr.ipv4.isValid())&#123;          <span class="hljs-comment">// 如果是IPv4包</span><br>            FEC_tbl.apply();             <span class="hljs-comment">// 运行FEC查表</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(hdr.mpls[<span class="hljs-number">0</span>].isValid())&#123;       <span class="hljs-comment">// 如果存在MPLS标签</span><br>            mpls_tbl.apply();            <span class="hljs-comment">// 运行MPLS查表</span><br>        &#125;<br><br>        <span class="hljs-comment">/* 如果计量器颜色不是绿色（0），则丢弃该包 */</span><br>        <span class="hljs-keyword">if</span> (meta.meter_color != <span class="hljs-number">0</span>)<br>        &#123;<br>            drop();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Egress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyEgress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                 inout metadata meta,</span><br><span class="hljs-params">                 inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br>    apply &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Computation <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyComputeChecksum</span><span class="hljs-params">(inout headers  hdr, inout metadata meta)</span> &#123;<br>    apply &#123;<br><br>        <span class="hljs-comment">// 修改了IP TTL，需要重新计算IPv4头部校验和</span><br>        update_checksum(<br>                hdr.ipv4.isValid(),                <span class="hljs-comment">// 仅对有效IPv4头计算</span><br>                &#123; hdr.ipv4.version,<br>                hdr.ipv4.ihl,<br>                hdr.ipv4.diffserv,<br>                hdr.ipv4.totalLen,<br>                hdr.ipv4.identification,<br>                hdr.ipv4.flags,<br>                hdr.ipv4.fragOffset,<br>                hdr.ipv4.ttl,<br>                hdr.ipv4.protocol,<br>                hdr.ipv4.srcAddr,<br>                hdr.ipv4.dstAddr &#125;,<br>                hdr.ipv4.hdrChecksum,              <span class="hljs-comment">// 更新校验和值字段</span><br>                HashAlgorithm.csum16);             <span class="hljs-comment">// 使用16位校验和算法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>DE parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyDeparser</span><span class="hljs-params">(packet_out packet, in headers hdr)</span> &#123;<br>    apply &#123;<br>        packet.emit(hdr.ethernet);         <span class="hljs-comment">// 输出以太网头部</span><br>        packet.emit(hdr.mpls);             <span class="hljs-comment">// 输出MPLS标签栈（全部有效标签）</span><br>        packet.emit(hdr.ipv4);             <span class="hljs-comment">// 输出IPv4头部</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Switch <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C">V1Switch(<br>MyParser(),<br>MyVerifyChecksum(),<br>MyIngress(),<br>MyEgress(),<br>MyComputeChecksum(),<br>MyDeparser()<br>) main;<br></code></pre></td></tr></table></figure></li><li><code>controller.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入标准库和所需模块</span><br><span class="hljs-keyword">import</span> os                                <span class="hljs-comment"># 提供文件和路径操作</span><br><span class="hljs-keyword">import</span> threading                         <span class="hljs-comment"># 用于创建并发线程</span><br><span class="hljs-keyword">import</span> time                              <span class="hljs-comment"># 提供时间控制函数</span><br><span class="hljs-keyword">from</span> p4utils.utils.helper <span class="hljs-keyword">import</span> load_topo                      <span class="hljs-comment"># 导入拓扑加载函数</span><br><span class="hljs-keyword">from</span> p4utils.utils.sswitch_p4runtime_API <span class="hljs-keyword">import</span> SimpleSwitchP4RuntimeAPI  <span class="hljs-comment"># P4Runtime API 控制器</span><br><span class="hljs-keyword">from</span> p4utils.utils.sswitch_thrift_API <span class="hljs-keyword">import</span> SimpleSwitchThriftAPI        <span class="hljs-comment"># Thrift API 控制器</span><br><span class="hljs-keyword">from</span> cli <span class="hljs-keyword">import</span> RSVPCLI                  <span class="hljs-comment"># 命令行接口模块（用户交互）</span><br><br><span class="hljs-comment"># 定义 RSVP 控制器类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RSVPController</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化拓扑与数据结构&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 检查拓扑文件是否存在</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;topology.json&#x27;</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;找不到 topology.json 文件！&#x27;</span>)<br>            <span class="hljs-keyword">raise</span> Exception<br><br>        <span class="hljs-variable language_">self</span>.topo = load_topo(<span class="hljs-string">&#x27;topology.json&#x27;</span>)  <span class="hljs-comment"># 加载拓扑</span><br>        <span class="hljs-variable language_">self</span>.controllers = &#123;&#125;                  <span class="hljs-comment"># 存储每个交换机的控制器对象</span><br>        <span class="hljs-variable language_">self</span>.init()                            <span class="hljs-comment"># 初始化连接与状态重置</span><br><br>        <span class="hljs-variable language_">self</span>.current_reservations = &#123;&#125;         <span class="hljs-comment"># 当前所有活跃的带宽预留请求</span><br>        <span class="hljs-variable language_">self</span>.links_capacity = <span class="hljs-variable language_">self</span>.build_links_capacity()  <span class="hljs-comment"># 初始化链路容量</span><br><br>        <span class="hljs-variable language_">self</span>.update_lock = threading.Lock()    <span class="hljs-comment"># 多线程访问保护锁</span><br>        <span class="hljs-comment"># 创建定时检查预留超时的线程</span><br>        <span class="hljs-variable language_">self</span>.timeout_thread = threading.Thread(target=<span class="hljs-variable language_">self</span>.reservations_timeout_thread, args=(<span class="hljs-number">1</span>,))<br>        <span class="hljs-variable language_">self</span>.timeout_thread.daemon = <span class="hljs-literal">True</span>      <span class="hljs-comment"># 设置为后台线程</span><br>        <span class="hljs-variable language_">self</span>.timeout_thread.start()            <span class="hljs-comment"># 启动线程</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;连接所有交换机并重置其状态&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.connect_to_switches()     <span class="hljs-comment"># 建立与所有交换机的 gRPC 连接</span><br>        <span class="hljs-variable language_">self</span>.reset_states()            <span class="hljs-comment"># 重置交换机状态</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reset_states</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;重置所有交换机的表项和状态&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> p4rtswitch, controller <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.controllers.items():<br>            controller.reset_state()   <span class="hljs-comment"># 重置 P4Runtime 控制器状态</span><br>            thrift_port = <span class="hljs-variable language_">self</span>.topo.get_thrift_port(p4rtswitch)  <span class="hljs-comment"># 获取 Thrift 端口</span><br>            controller_thrift = SimpleSwitchThriftAPI(thrift_port)  <span class="hljs-comment"># 建立 Thrift 连接</span><br>            controller_thrift.reset_state()  <span class="hljs-comment"># 重置 Thrift 交换机状态（如转发表）</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">connect_to_switches</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;连接所有 P4 交换机并初始化控制器&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> p4rtswitch, data <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.topo.get_p4switches().items():<br>            device_id = <span class="hljs-variable language_">self</span>.topo.get_p4switch_id(p4rtswitch)<br>            grpc_port = <span class="hljs-variable language_">self</span>.topo.get_grpc_port(p4rtswitch)<br>            p4rt_path = data[<span class="hljs-string">&#x27;p4rt_path&#x27;</span>]<br>            json_path = data[<span class="hljs-string">&#x27;json_path&#x27;</span>]<br>            <span class="hljs-comment"># 创建 SimpleSwitchP4RuntimeAPI 控制器对象并存储</span><br>            <span class="hljs-variable language_">self</span>.controllers[p4rtswitch] = SimpleSwitchP4RuntimeAPI(<br>                device_id, grpc_port, p4rt_path=p4rt_path, json_path=json_path)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">build_links_capacity</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;构建链路容量字典&quot;&quot;&quot;</span><br>        links_capacity = &#123;&#125;<br>        <span class="hljs-keyword">for</span> src, dst <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.topo.keep_only_p4switches().edges:<br>            bw = <span class="hljs-variable language_">self</span>.topo.edges[(src, dst)][<span class="hljs-string">&#x27;bw&#x27;</span>]  <span class="hljs-comment"># 获取链路带宽</span><br>            links_capacity[(src, dst)] = bw<br>            links_capacity[(dst, src)] = bw         <span class="hljs-comment"># 双向链路</span><br>        <span class="hljs-keyword">return</span> links_capacity<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reservations_timeout_thread</span>(<span class="hljs-params">self, refresh_rate=<span class="hljs-number">1</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;每隔 refresh_rate 秒检查一次是否有超时的预留请求&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            time.sleep(refresh_rate)<br>            <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.update_lock:  <span class="hljs-comment"># 加锁避免数据冲突</span><br>                to_remove = []<br>                <span class="hljs-keyword">for</span> reservation, data <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.current_reservations.items():<br>                    data[<span class="hljs-string">&#x27;timeout&#x27;</span>] -= refresh_rate<br>                    <span class="hljs-keyword">if</span> data[<span class="hljs-string">&#x27;timeout&#x27;</span>] &lt;= <span class="hljs-number">0</span>:       <span class="hljs-comment"># 超时处理</span><br>                        to_remove.append(reservation)<br>                <span class="hljs-keyword">for</span> reservation <span class="hljs-keyword">in</span> to_remove:       <span class="hljs-comment"># 批量删除过期预留</span><br>                    <span class="hljs-variable language_">self</span>.del_reservation(*reservation)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_mpls_tbl_labels</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;设置默认 MPLS 标签转发表项&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> sw_name, controller <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.controllers.items():<br>            <span class="hljs-keyword">for</span> host <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.topo.get_hosts_connected_to(sw_name):<br>                sw_port = <span class="hljs-variable language_">self</span>.topo.node_to_node_port_num(sw_name, host)<br>                host_ip = <span class="hljs-variable language_">self</span>.topo.get_host_ip(host)<br>                host_mac = <span class="hljs-variable language_">self</span>.topo.get_host_mac(host)<br>                controller.table_add(<span class="hljs-string">&#x27;FEC_tbl&#x27;</span>, <span class="hljs-string">&#x27;ipv4_forward&#x27;</span>,<br>                                     [<span class="hljs-string">&#x27;0.0.0.0/0&#x27;</span>, <span class="hljs-built_in">str</span>(host_ip)],<br>                                     [<span class="hljs-built_in">str</span>(host_mac), <span class="hljs-built_in">str</span>(sw_port)])<br>            <span class="hljs-keyword">for</span> switch <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.topo.get_switches_connected_to(sw_name):<br>                sw_port = <span class="hljs-variable language_">self</span>.topo.node_to_node_port_num(sw_name, switch)<br>                other_switch_mac = <span class="hljs-variable language_">self</span>.topo.node_to_node_mac(switch, sw_name)<br>                controller.table_add(<span class="hljs-string">&#x27;mpls_tbl&#x27;</span>, <span class="hljs-string">&#x27;mpls_forward&#x27;</span>,<br>                                     [<span class="hljs-built_in">str</span>(sw_port), <span class="hljs-string">&#x27;0&#x27;</span>], [<span class="hljs-built_in">str</span>(other_switch_mac), <span class="hljs-built_in">str</span>(sw_port)])<br>                controller.table_add(<span class="hljs-string">&#x27;mpls_tbl&#x27;</span>, <span class="hljs-string">&#x27;penultimate&#x27;</span>,<br>                                     [<span class="hljs-built_in">str</span>(sw_port), <span class="hljs-string">&#x27;1&#x27;</span>], [<span class="hljs-built_in">str</span>(other_switch_mac), <span class="hljs-built_in">str</span>(sw_port)])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">build_mpls_path</span>(<span class="hljs-params">self, switches_path</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;生成 MPLS 标签路径（每跳为对应端口号）&quot;&quot;&quot;</span><br>        label_path = []<br>        <span class="hljs-keyword">for</span> current_node, next_node <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(switches_path, switches_path[<span class="hljs-number">1</span>:]):<br>            label = <span class="hljs-variable language_">self</span>.topo.node_to_node_port_num(current_node, next_node)<br>            label_path.append(label)<br>        <span class="hljs-keyword">return</span> label_path<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_sorted_paths</span>(<span class="hljs-params">self, src, dst</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;返回从 src 到 dst 的所有路径，按长度排序&quot;&quot;&quot;</span><br>        paths = <span class="hljs-variable language_">self</span>.topo.get_all_paths_between_nodes(src, dst)<br>        paths = [x[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> paths]  <span class="hljs-comment"># 去除起点和终点（主机）</span><br>        <span class="hljs-keyword">return</span> paths<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_shortest_path</span>(<span class="hljs-params">self, src, dst</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;返回最短路径（不考虑链路带宽）&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.get_sorted_paths(src, dst)[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_if_reservation_fits</span>(<span class="hljs-params">self, path, bw</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;检查路径上所有链路是否都有足够带宽&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(path, path[<span class="hljs-number">1</span>:]):<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">self</span>.links_capacity[link] - bw) &lt; <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_link_capacity</span>(<span class="hljs-params">self, path, bw</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;释放路径上所有链路的带宽（撤销预留）&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(path, path[<span class="hljs-number">1</span>:]):<br>            <span class="hljs-variable language_">self</span>.links_capacity[link] += bw<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_link_capacity</span>(<span class="hljs-params">self, path, bw</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;占用路径上所有链路的带宽&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(path, path[<span class="hljs-number">1</span>:]):<br>            <span class="hljs-variable language_">self</span>.links_capacity[link] -= bw<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_available_path</span>(<span class="hljs-params">self, src, dst, bw</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;返回最短、可用带宽满足的路径&quot;&quot;&quot;</span><br>        paths = <span class="hljs-variable language_">self</span>.get_sorted_paths(src, dst)<br>        <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> paths:<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.check_if_reservation_fits(path, bw):<br>                <span class="hljs-keyword">return</span> path<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_meter_rates_from_bw</span>(<span class="hljs-params">self, bw, burst_size=<span class="hljs-number">700000</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;将带宽转换为 CIR 和 PIR 速率配置（用于速率限制器）&quot;&quot;&quot;</span><br>        rates = []<br>        rates.append((<span class="hljs-built_in">int</span>(<span class="hljs-number">0.125</span> * bw * <span class="hljs-number">1e6</span>), burst_size))<br>        rates.append((<span class="hljs-built_in">int</span>(<span class="hljs-number">0.125</span> * bw * <span class="hljs-number">1e6</span>), burst_size))<br>        <span class="hljs-keyword">return</span> rates<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_add_reservation</span>(<span class="hljs-params">self, src, dst, duration, bandwidth, priority, path, update</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;实际执行添加或更新预留&quot;&quot;&quot;</span><br>        label_path = [<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.build_mpls_path(path)[::-<span class="hljs-number">1</span>]]  <span class="hljs-comment"># 标签反向压栈</span><br>        rates = <span class="hljs-variable language_">self</span>.get_meter_rates_from_bw(bandwidth)<br>        src_gw = path[<span class="hljs-number">0</span>]<br>        action = <span class="hljs-string">&#x27;mpls_ingress_&#123;&#125;_hop&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(label_path))<br>        src_ip = <span class="hljs-built_in">str</span>(<span class="hljs-variable language_">self</span>.topo.get_host_ip(src) + <span class="hljs-string">&#x27;/32&#x27;</span>)<br>        dst_ip = <span class="hljs-built_in">str</span>(<span class="hljs-variable language_">self</span>.topo.get_host_ip(dst))<br>        <span class="hljs-keyword">match</span> = [src_ip, dst_ip]<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(label_path) != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> update:<br>                done = <span class="hljs-variable language_">self</span>.controllers[src_gw].table_add(<span class="hljs-string">&#x27;FEC_tbl&#x27;</span>, action, <span class="hljs-keyword">match</span>, label_path, rates=rates)<br>                entry_match = <span class="hljs-keyword">match</span><br>            <span class="hljs-keyword">else</span>:<br>                entry = <span class="hljs-variable language_">self</span>.current_reservations.get((src, dst))<br>                done = <span class="hljs-variable language_">self</span>.controllers[src_gw].table_modify_match(<span class="hljs-string">&#x27;FEC_tbl&#x27;</span>, action, entry[<span class="hljs-string">&#x27;match&#x27;</span>], label_path, rates=rates)<br>                entry_match = entry[<span class="hljs-string">&#x27;match&#x27;</span>]<br><br>            <span class="hljs-keyword">if</span> done:<br>                <span class="hljs-variable language_">self</span>.sub_link_capacity(path, bandwidth)<br>                <span class="hljs-variable language_">self</span>.current_reservations[(src, dst)] = &#123;<span class="hljs-string">&#x27;timeout&#x27;</span>: duration, <span class="hljs-string">&#x27;bw&#x27;</span>: bandwidth, <span class="hljs-string">&#x27;priority&#x27;</span>: priority, <span class="hljs-string">&#x27;match&#x27;</span>: entry_match, <span class="hljs-string">&#x27;path&#x27;</span>: path&#125;<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Successful reservation(<span class="hljs-subst">&#123;src&#125;</span>-&gt;<span class="hljs-subst">&#123;dst&#125;</span>): path: <span class="hljs-subst">&#123;<span class="hljs-string">&quot;-&gt;&quot;</span>.join(path)&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\033[91mFailed reservation(<span class="hljs-subst">&#123;src&#125;</span>-&gt;<span class="hljs-subst">&#123;dst&#125;</span>): path: <span class="hljs-subst">&#123;<span class="hljs-string">&quot;-&gt;&quot;</span>.join(path)&#125;</span>\033[0m&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Warning: Hosts are connected to the same switch!&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_reservation</span>(<span class="hljs-params">self, src, dst, duration, bandwidth, priority</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;添加新的带宽预留请求，带优先级调度&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.update_lock:<br>            UPDATE_ENTRY = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.current_reservations.get((src, dst)):<br>                data = <span class="hljs-variable language_">self</span>.current_reservations[(src, dst)]<br>                <span class="hljs-variable language_">self</span>.add_link_capacity(data[<span class="hljs-string">&#x27;path&#x27;</span>], data[<span class="hljs-string">&#x27;bw&#x27;</span>])<br>                UPDATE_ENTRY = <span class="hljs-literal">True</span><br><br>            path = <span class="hljs-variable language_">self</span>.get_available_path(src, dst, bandwidth)<br><br>            <span class="hljs-keyword">if</span> path:<br>                <span class="hljs-variable language_">self</span>._add_reservation(src, dst, duration, bandwidth, priority, path, UPDATE_ENTRY)<br>            <span class="hljs-keyword">else</span>:<br>                previous_links_capacities = <span class="hljs-variable language_">self</span>.links_capacity.copy()<br>                <span class="hljs-keyword">for</span> reservation, data <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.current_reservations.items():<br>                    <span class="hljs-keyword">if</span> reservation == (src, dst):<br>                        <span class="hljs-keyword">continue</span><br>                    <span class="hljs-keyword">if</span> data[<span class="hljs-string">&#x27;priority&#x27;</span>] &lt; priority:<br>                        <span class="hljs-variable language_">self</span>.add_link_capacity(data[<span class="hljs-string">&#x27;path&#x27;</span>], data[<span class="hljs-string">&#x27;bw&#x27;</span>])<br><br>                path = <span class="hljs-variable language_">self</span>.get_available_path(src, dst, bandwidth)<br><br>                <span class="hljs-keyword">if</span> path:<br>                    <span class="hljs-variable language_">self</span>._add_reservation(src, dst, duration, bandwidth, priority, path, UPDATE_ENTRY)<br><br>                    <span class="hljs-keyword">for</span> reservation, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(<span class="hljs-variable language_">self</span>.current_reservations.items(), key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;priority&#x27;</span>], reverse=<span class="hljs-literal">True</span>):<br>                        <span class="hljs-keyword">if</span> data[<span class="hljs-string">&#x27;priority&#x27;</span>] &lt; priority:<br>                            src_r, dst_r = reservation<br>                            new_path = <span class="hljs-variable language_">self</span>.get_available_path(src_r, dst_r, data[<span class="hljs-string">&#x27;bw&#x27;</span>])<br>                            <span class="hljs-keyword">if</span> new_path:<br>                                <span class="hljs-variable language_">self</span>._add_reservation(src_r, dst_r, data[<span class="hljs-string">&#x27;timeout&#x27;</span>], data[<span class="hljs-string">&#x27;bw&#x27;</span>], data[<span class="hljs-string">&#x27;priority&#x27;</span>], new_path, <span class="hljs-literal">True</span>)<br>                            <span class="hljs-keyword">else</span>:<br>                                <span class="hljs-variable language_">self</span>.sub_link_capacity(data[<span class="hljs-string">&#x27;path&#x27;</span>], data[<span class="hljs-string">&#x27;bw&#x27;</span>])<br>                                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\033[91mDeleting allocation <span class="hljs-subst">&#123;src_r&#125;</span>-&gt;<span class="hljs-subst">&#123;dst_r&#125;</span> due to a higher priority allocation!\033[0m&#x27;</span>)<br>                                <span class="hljs-variable language_">self</span>.del_reservation(src_r, dst_r)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-variable language_">self</span>.links_capacity = previous_links_capacities<br>                    <span class="hljs-keyword">if</span> UPDATE_ENTRY:<br>                        data = <span class="hljs-variable language_">self</span>.current_reservations[(src, dst)]<br>                        <span class="hljs-variable language_">self</span>.sub_link_capacity(data[<span class="hljs-string">&#x27;path&#x27;</span>], data[<span class="hljs-string">&#x27;bw&#x27;</span>])<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Deleting new allocation. Does not fit anymore!&#x27;</span>)<br>                        <span class="hljs-variable language_">self</span>.del_reservation(src, dst)<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\033[91mRESERVATION FAILURE: no bandwidth available!\033[0m&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">del_reservation</span>(<span class="hljs-params">self, src, dst</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;删除一个预留并恢复链路带宽&quot;&quot;&quot;</span><br>        entry = <span class="hljs-variable language_">self</span>.current_reservations.get((src, dst))<br>        <span class="hljs-keyword">if</span> entry:<br>            sw_gw = <span class="hljs-variable language_">self</span>.topo.get_host_gateway_name(src)<br>            <span class="hljs-variable language_">self</span>.controllers[sw_gw].table_delete_match(<span class="hljs-string">&#x27;FEC_tbl&#x27;</span>, entry[<span class="hljs-string">&#x27;match&#x27;</span>])<br>            <span class="hljs-variable language_">self</span>.add_link_capacity(entry[<span class="hljs-string">&#x27;path&#x27;</span>], entry[<span class="hljs-string">&#x27;bw&#x27;</span>])<br>            <span class="hljs-keyword">del</span> <span class="hljs-variable language_">self</span>.current_reservations[(src, dst)]<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\nRSVP Deleted/Expired Reservation(<span class="hljs-subst">&#123;src&#125;</span>-&gt;<span class="hljs-subst">&#123;dst&#125;</span>): path: <span class="hljs-subst">&#123;<span class="hljs-string">&quot;-&gt;&quot;</span>.join(entry[<span class="hljs-string">&quot;path&quot;</span>])&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;No entry for <span class="hljs-subst">&#123;src&#125;</span> -&gt; <span class="hljs-subst">&#123;dst&#125;</span>&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">del_all_reservations</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;删除所有预留请求&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-variable language_">self</span>.update_lock:<br>            <span class="hljs-keyword">for</span> src, dst <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(<span class="hljs-variable language_">self</span>.current_reservations.keys()):<br>                <span class="hljs-variable language_">self</span>.del_reservation(src, dst)<br><br><span class="hljs-comment"># 主程序入口</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    controller = RSVPController()         <span class="hljs-comment"># 实例化控制器</span><br>    controller.set_mpls_tbl_labels()      <span class="hljs-comment"># 初始化 MPLS 转发表项</span><br>    cli = RSVPCLI(controller)             <span class="hljs-comment"># 启动交互式命令行接口</span><br><br></code></pre></td></tr></table></figure></li><li><code>network.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> p4utils.mininetlib.network_API <span class="hljs-keyword">import</span> NetworkAPI<br><br>net = NetworkAPI()<br><br><span class="hljs-comment"># Network general options</span><br>net.setLogLevel(<span class="hljs-string">&#x27;info&#x27;</span>)<br>net.setCompiler(p4rt=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># Network definition</span><br>net.addP4RuntimeSwitch(<span class="hljs-string">&#x27;s1&#x27;</span>)<br>net.addP4RuntimeSwitch(<span class="hljs-string">&#x27;s2&#x27;</span>)<br>net.addP4RuntimeSwitch(<span class="hljs-string">&#x27;s3&#x27;</span>)<br>net.addP4RuntimeSwitch(<span class="hljs-string">&#x27;s4&#x27;</span>)<br>net.addP4RuntimeSwitch(<span class="hljs-string">&#x27;s5&#x27;</span>)<br>net.addP4RuntimeSwitch(<span class="hljs-string">&#x27;s6&#x27;</span>)<br>net.addP4RuntimeSwitch(<span class="hljs-string">&#x27;s7&#x27;</span>)<br>net.setP4SourceAll(<span class="hljs-string">&#x27;rsvp.p4&#x27;</span>)<br><br>net.addHost(<span class="hljs-string">&#x27;h1&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h2&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h3&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h4&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h5&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h6&#x27;</span>)<br><br>net.addLink(<span class="hljs-string">&quot;h1&quot;</span>, <span class="hljs-string">&quot;s1&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;h2&quot;</span>, <span class="hljs-string">&quot;s1&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-string">&quot;s2&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-string">&quot;s3&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s2&quot;</span>, <span class="hljs-string">&quot;s4&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s3&quot;</span>, <span class="hljs-string">&quot;s4&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s2&quot;</span>, <span class="hljs-string">&quot;s5&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s3&quot;</span>, <span class="hljs-string">&quot;s6&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s4&quot;</span>, <span class="hljs-string">&quot;s5&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s4&quot;</span>, <span class="hljs-string">&quot;s6&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s5&quot;</span>, <span class="hljs-string">&quot;s7&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s6&quot;</span>, <span class="hljs-string">&quot;s7&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s7&quot;</span>, <span class="hljs-string">&quot;h5&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;s7&quot;</span>, <span class="hljs-string">&quot;h6&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;h3&quot;</span>, <span class="hljs-string">&quot;s3&quot;</span>)<br>net.addLink(<span class="hljs-string">&quot;h4&quot;</span>, <span class="hljs-string">&quot;s5&quot;</span>)<br>net.setBwAll(<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># Assignment strategy</span><br>net.l3()<br><br><span class="hljs-comment"># Nodes general options</span><br>net.disablePcapDumpAll()<br>net.enableLogAll()<br>net.enableCli()<br>net.startNetwork()<br></code></pre></td></tr></table></figure></li></ol><ul><li><h1 id="p4仿真以rsvp功能为例">P4仿真(以rsvp功能为例)</h1></li></ul><ol type="1"><li>启动网络拓扑<code>sudo p4run</code></li></ol><figure><img src="/2025/08/04/P4%2007-RSVP/2.png" alt="启动网络拓扑"><figcaption aria-hidden="true">启动网络拓扑</figcaption></figure><ol start="2" type="1"><li>启动控制器<code>python rsvp_controller.py</code></li></ol><figure><img src="/2025/08/04/P4%2007-RSVP/3.png" alt="启动控制器"><figcaption aria-hidden="true">启动控制器</figcaption></figure><ol start="3" type="1"><li>在<code>mininet</code>CLI命令窗口输入<code>h1 ping h6</code>，发现无法通信</li></ol><figure><img src="/2025/08/04/P4%2007-RSVP/4.png" alt="无法通信"><figcaption aria-hidden="true">无法通信</figcaption></figure><ol start="4" type="1"><li>在<code>rsvp</code>CLI命令窗口输入<code>add_reservation h1 h6 20 5</code>和`add_reservationh6 h1 20 5</li></ol><figure><img src="/2025/08/04/P4%2007-RSVP/5.png" alt="配置rsvp"><figcaption aria-hidden="true">配置rsvp</figcaption></figure><ol start="5" type="1"><li>再次在<code>mininet</code>CLI命令窗口输入<code>h1 ping h6</code>，发现成功通信</li></ol><figure><img src="/2025/08/04/P4%2007-RSVP/6.png" alt="成功通信"><figcaption aria-hidden="true">成功通信</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>P4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>P4</tag>
      
      <tag>SDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RL-08 Value Function Approximation</title>
    <link href="/2025/08/03/RL-08%20Value%20Function%20Approximation/"/>
    <url>/2025/08/03/RL-08%20Value%20Function%20Approximation/</url>
    
    <content type="html"><![CDATA[<h1 id="rl学习笔记-08-值函数近似">RL学习笔记-08 值函数近似</h1><h1 id="声明本笔记是学习b站强化学习的数学原理课程的个人笔记">声明：本笔记是学习B站【强化学习的数学原理】课程的个人笔记</h1><p><img src="/2025/08/03/RL-08%20Value%20Function%20Approximation/1.jpg"></p><p><img src="/2025/08/03/RL-08%20Value%20Function%20Approximation/2.jpg"></p><p><img src="/2025/08/03/RL-08%20Value%20Function%20Approximation/3.jpg"></p><p><img src="/2025/08/03/RL-08%20Value%20Function%20Approximation/4.jpg"></p><p><img src="/2025/08/03/RL-08%20Value%20Function%20Approximation/5.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>RL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>RL</tag>
      
      <tag>强化学习</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P4 06-MPLS</title>
    <link href="/2025/07/31/P4%2006-MPLS/"/>
    <url>/2025/07/31/P4%2006-MPLS/</url>
    
    <content type="html"><![CDATA[<h1 id="p4示例程序-06-mpls">P4示例程序-06 MPLS</h1><ul><li><h1 id="功能">功能</h1><p>MPLS是一种高效且可扩展的数据转发机制，它不再根据IP包头里的IP地址来做路由查找，而是根据给数据包加上的短标签来快速转发。</p></li><li><h1 id="拓扑结构">拓扑结构</h1></li></ul><figure><img src="/2025/07/31/P4%2006-MPLS/1.png" alt="拓扑结构"><figcaption aria-hidden="true">拓扑结构</figcaption></figure><ul><li><h1 id="代码">代码</h1></li></ul><ol type="1"><li><code>p4app.json</code> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;topology&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;assignment_strategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;l3&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;links&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>             <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s2&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>             <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s3&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>             <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s4&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>             <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s4&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>             <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s4&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s5&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>             <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s4&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s6&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>             <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s5&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s7&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>             <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s6&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s7&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>             <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s7&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;h2&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>             <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;s7&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;h3&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-attr">&quot;h1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;h2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;h3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-punctuation">&#125;</span><br>   <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;switches&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-attr">&quot;s1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;s2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;s3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;s4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;s5&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;s6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;s7&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-punctuation">&#125;</span><br>   <span class="hljs-punctuation">&#125;</span><br> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li>Headers <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">9</span>&gt;  egressSpec_t; <span class="hljs-comment">// 定义egress端口位宽</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">48</span>&gt; macAddr_t; <span class="hljs-comment">// MAC地址类型</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">32</span>&gt; ip4Addr_t; <span class="hljs-comment">// IPv4地址类型</span><br><br>header <span class="hljs-type">ethernet_t</span> &#123;<br>    macAddr_t dstAddr; <span class="hljs-comment">// 目标MAC地址</span><br>    macAddr_t srcAddr; <span class="hljs-comment">// 源MAC地址</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   etherType; <span class="hljs-comment">// 以太网类型</span><br>&#125;<br><br>header <span class="hljs-type">mpls_t</span> &#123;<br>    bit&lt;<span class="hljs-number">20</span>&gt;   label; <span class="hljs-comment">// MPLS标签字段</span><br>    bit&lt;<span class="hljs-number">3</span>&gt;    <span class="hljs-built_in">exp</span>; <span class="hljs-comment">// 实验字段</span><br>    bit&lt;<span class="hljs-number">1</span>&gt;    s; <span class="hljs-comment">// 最底层标签标志位</span><br>    bit&lt;<span class="hljs-number">8</span>&gt;    ttl; <span class="hljs-comment">// MPLS TTL</span><br>&#125;<br><br>header <span class="hljs-type">ipv4_t</span> &#123;<br>    bit&lt;<span class="hljs-number">4</span>&gt;    version; <span class="hljs-comment">// IP版本</span><br>    bit&lt;<span class="hljs-number">4</span>&gt;    ihl; <span class="hljs-comment">// 首部长度</span><br>    bit&lt;<span class="hljs-number">8</span>&gt;    diffserv; <span class="hljs-comment">// 差异化服务</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   totalLen; <span class="hljs-comment">// 总长度</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   identification; <span class="hljs-comment">// 标识符</span><br>    bit&lt;<span class="hljs-number">3</span>&gt;    flags; <span class="hljs-comment">// 标志位</span><br>    bit&lt;<span class="hljs-number">13</span>&gt;   fragOffset; <span class="hljs-comment">// 分段偏移</span><br>    bit&lt;<span class="hljs-number">8</span>&gt;    ttl; <span class="hljs-comment">// TTL</span><br>    bit&lt;<span class="hljs-number">8</span>&gt;    protocol; <span class="hljs-comment">// 上层协议</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   hdrChecksum; <span class="hljs-comment">// 首部校验和</span><br>    ip4Addr_t srcAddr; <span class="hljs-comment">// 源IP地址</span><br>    ip4Addr_t dstAddr; <span class="hljs-comment">// 目的IP地址</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">metadata</span> &#123;</span><br>    bit&lt;<span class="hljs-number">1</span>&gt; is_ingress_border; <span class="hljs-comment">// 是否是入边界口</span><br>    bit&lt;<span class="hljs-number">1</span>&gt; is_egress_border; <span class="hljs-comment">// 是否是出边界口</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">headers</span> &#123;</span><br>    <span class="hljs-type">ethernet_t</span>              ethernet; <span class="hljs-comment">// 以太网头部</span><br>    <span class="hljs-type">mpls_t</span>                  mpls; <span class="hljs-comment">// MPLS头部</span><br>    <span class="hljs-type">ipv4_t</span>                  ipv4; <span class="hljs-comment">// IPv4头部</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C">parser <span class="hljs-title function_">MyParser</span><span class="hljs-params">(packet_in packet,</span><br><span class="hljs-params">                out headers hdr,</span><br><span class="hljs-params">                inout metadata meta,</span><br><span class="hljs-params">                inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    state start &#123;<br>        transition parse_ethernet; <span class="hljs-comment">// 跳转到以太网解析状态</span><br>    &#125;<br><br>    state parse_ethernet &#123;<br>        packet.extract(hdr.ethernet); <span class="hljs-comment">// 提取以太网头</span><br>        transition <span class="hljs-title function_">select</span><span class="hljs-params">(hdr.ethernet.etherType)</span> &#123;<br>            TYPE_MPLS: parse_mpls; <span class="hljs-comment">// MPLS类型则转mpls解析</span><br>            TYPE_IPV4: parse_ipv4; <span class="hljs-comment">// IPv4类型则转ipv4解析</span><br>            <span class="hljs-keyword">default</span>: accept; <span class="hljs-comment">// 其他则直接接受</span><br>        &#125;<br>    &#125;<br><br>    state parse_mpls &#123;<br>        packet.extract(hdr.mpls); <span class="hljs-comment">// 提取MPLS头部</span><br>        transition parse_ipv4; <span class="hljs-comment">// 继续提取IPv4头</span><br>    &#125;<br><br>    state parse_ipv4 &#123;<br>        packet.extract(hdr.ipv4); <span class="hljs-comment">// 提取IPv4头部</span><br>        transition accept; <span class="hljs-comment">// 完成解析</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Verification <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyVerifyChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>    apply &#123;  <br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure></li><li>Ingress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyIngress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                  inout metadata meta,</span><br><span class="hljs-params">                  inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br>        <br>    action <span class="hljs-title function_">drop</span><span class="hljs-params">()</span> &#123;<br>        mark_to_drop(standard_metadata); <span class="hljs-comment">// 标记丢包</span><br>    &#125;<br><br>    action <span class="hljs-title function_">set_is_ingress_border</span><span class="hljs-params">()</span>&#123;<br>        meta.is_ingress_border = (bit&lt;<span class="hljs-number">1</span>&gt;)<span class="hljs-number">1</span>; <span class="hljs-comment">// 标记为入边界口</span><br>    &#125;<br><br>    table check_is_ingress_border &#123;<br>        key = &#123;<br>            standard_metadata.ingress_port: exact; <span class="hljs-comment">// 根据入端口判断</span><br>        &#125;<br>        actions = &#123;<br>            NoAction; <span class="hljs-comment">// 无操作</span><br>            set_is_ingress_border; <span class="hljs-comment">// 设置入边界标志</span><br>        &#125;<br>        default_action = NoAction; <span class="hljs-comment">// 默认无操作</span><br>        size = CONST_MAX_PORTS; <span class="hljs-comment">// 表大小为32</span><br>    &#125;<br><br>    action <span class="hljs-title function_">add_mpls_header</span><span class="hljs-params">(bit&lt;<span class="hljs-number">20</span>&gt; tag)</span> &#123;<br>        hdr.mpls.setValid(); <span class="hljs-comment">// 设置MPLS头有效</span><br>        hdr.mpls.label = tag; <span class="hljs-comment">// 指定标签</span><br>        hdr.mpls.s = <span class="hljs-number">0</span>; <span class="hljs-comment">// 非最底层</span><br>        hdr.mpls.ttl = <span class="hljs-number">255</span>; <span class="hljs-comment">// 初始TTL</span><br>        hdr.ethernet.etherType = TYPE_MPLS; <span class="hljs-comment">// 修改以太类型为MPLS</span><br>    &#125;<br><br>    table fec_to_label &#123;<br>        key = &#123;<br>            hdr.ipv4.dstAddr: lpm; <span class="hljs-comment">// 匹配目标IP前缀</span><br>        &#125;<br>        actions = &#123;<br>            NoAction; <span class="hljs-comment">// 无操作</span><br>            add_mpls_header; <span class="hljs-comment">// 添加MPLS标签</span><br>        &#125;<br>        default_action = NoAction; <span class="hljs-comment">// 默认不处理</span><br>        size = CONST_MAX_LABELS; <span class="hljs-comment">// 表大小为10</span><br>    &#125;<br><br>    action <span class="hljs-title function_">mpls_forward</span><span class="hljs-params">(macAddr_t dstAddr, egressSpec_t port)</span> &#123;<br>        hdr.ethernet.srcAddr = hdr.ethernet.dstAddr; <span class="hljs-comment">// 设置源地址为本机</span><br>        hdr.ethernet.dstAddr = dstAddr; <span class="hljs-comment">// 设置目标地址</span><br>        standard_metadata.egress_spec = port; <span class="hljs-comment">// 指定出端口</span><br>        hdr.mpls.ttl = hdr.mpls.ttl - <span class="hljs-number">1</span>; <span class="hljs-comment">// TTL减一</span><br>    &#125;<br><br>    table mpls_tbl &#123;<br>        key = &#123;<br>            hdr.mpls.label: exact; <span class="hljs-comment">// 匹配MPLS标签</span><br>        &#125;<br>        actions = &#123;<br>            mpls_forward; <span class="hljs-comment">// MPLS转发</span><br>            drop; <span class="hljs-comment">// 丢弃</span><br>        &#125;<br>        default_action = drop; <span class="hljs-comment">// 默认丢弃</span><br>        size = CONST_MAX_LABELS; <span class="hljs-comment">// 表大小为10</span><br>    &#125;<br><br>    action <span class="hljs-title function_">ipv4_forward</span><span class="hljs-params">(macAddr_t dstAddr, egressSpec_t port)</span> &#123;<br>        hdr.ethernet.srcAddr = hdr.ethernet.dstAddr; <span class="hljs-comment">// 设置源地址为本机</span><br>        hdr.ethernet.dstAddr = dstAddr; <span class="hljs-comment">// 设置目标地址</span><br>        standard_metadata.egress_spec = port; <span class="hljs-comment">// 指定出端口</span><br>        hdr.ipv4.ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>; <span class="hljs-comment">// TTL减一</span><br>    &#125;<br><br>    table ipv4_lpm &#123;<br>        key = &#123;<br>            hdr.ipv4.dstAddr: lpm; <span class="hljs-comment">// 匹配目标IP前缀</span><br>        &#125;<br>        actions = &#123;<br>            ipv4_forward; <span class="hljs-comment">// IPv4转发</span><br>            drop; <span class="hljs-comment">// 丢弃</span><br>        &#125;<br>        default_action = drop; <span class="hljs-comment">// 默认丢弃</span><br>        size = <span class="hljs-number">128</span>; <span class="hljs-comment">// 表大小</span><br>    &#125;<br><br>    apply &#123;<br><br>            <span class="hljs-comment">// We check if it is an ingress border port</span><br>            check_is_ingress_border.apply(); <span class="hljs-comment">// 判断是否入边界口</span><br><br>            <span class="hljs-keyword">if</span>(meta.is_ingress_border == <span class="hljs-number">1</span>)&#123;<br><br>                <span class="hljs-comment">// We need to check if the header is valid since mpls label is based on dst ip</span><br>                <span class="hljs-keyword">if</span>(hdr.ipv4.isValid())&#123;<br>                    <br>                    <span class="hljs-comment">// We add the label based on the destination</span><br>                    fec_to_label.apply(); <span class="hljs-comment">// 添加MPLS标签</span><br>                &#125;<br>            &#125;<br>            <br>            <span class="hljs-comment">// We select the egress port based on the mpls label</span><br>            <span class="hljs-keyword">if</span>(hdr.mpls.isValid())&#123;<br>                mpls_tbl.apply(); <span class="hljs-comment">// MPLS转发表</span><br>            &#125;<br><br>            <span class="hljs-comment">// We implement normal forwarding</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hdr.ipv4.isValid())<br>            &#123;<br>                ipv4_lpm.apply(); <span class="hljs-comment">// 普通IPv4转发</span><br>            &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Egress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyEgress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                 inout metadata meta,</span><br><span class="hljs-params">                 inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    action <span class="hljs-title function_">is_egress_border</span><span class="hljs-params">()</span>&#123;<br>        <br>        <span class="hljs-comment">// We remove the mpls header</span><br>        hdr.mpls.setInvalid(); <span class="hljs-comment">// 删除MPLS头</span><br>        hdr.ethernet.etherType = TYPE_IPV4; <span class="hljs-comment">// 恢复以太类型</span><br>        hdr.ipv4.ttl = hdr.ipv4.ttl - <span class="hljs-number">1</span>; <span class="hljs-comment">// TTL减一</span><br>    &#125;<br><br>    table check_is_egress_border &#123;<br>        key = &#123;<br>            standard_metadata.egress_port: exact; <span class="hljs-comment">// 根据出端口判断</span><br>        &#125;<br>        actions = &#123;<br>            NoAction; <span class="hljs-comment">// 无操作</span><br>            is_egress_border; <span class="hljs-comment">// 设置为出边界口</span><br>        &#125;<br>        default_action = NoAction; <span class="hljs-comment">// 默认无操作</span><br>        size = CONST_MAX_PORTS; <span class="hljs-comment">// 表大小为32</span><br>    &#125;<br><br>    apply &#123; <br>        <span class="hljs-comment">// We check if it is an egress border port</span><br>        <span class="hljs-keyword">if</span> (hdr.mpls.isValid())&#123;<br>            check_is_egress_border.apply(); <span class="hljs-comment">// 判断并处理出边界口</span><br>        &#125;     <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Computation <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyComputeChecksum</span><span class="hljs-params">(inout headers  hdr, inout metadata meta)</span> &#123;<br>    apply &#123;<br>        update_checksum(<br>        hdr.ipv4.isValid(), <span class="hljs-comment">// 检查IPv4有效性</span><br>            &#123; hdr.ipv4.version,<br>          hdr.ipv4.ihl,<br>              hdr.ipv4.diffserv,<br>              hdr.ipv4.totalLen,<br>              hdr.ipv4.identification,<br>              hdr.ipv4.flags,<br>              hdr.ipv4.fragOffset,<br>              hdr.ipv4.ttl,<br>              hdr.ipv4.protocol,<br>              hdr.ipv4.srcAddr,<br>              hdr.ipv4.dstAddr &#125;,<br>              hdr.ipv4.hdrChecksum,<br>              HashAlgorithm.csum16); <span class="hljs-comment">// 计算IPv4首部校验和</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>DE parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyDeparser</span><span class="hljs-params">(packet_out packet, in headers hdr)</span> &#123;<br>    apply &#123;<br>        packet.emit(hdr.ethernet); <span class="hljs-comment">// 发送以太网头部</span><br>        packet.emit(hdr.mpls); <span class="hljs-comment">// 发送MPLS头部（如果有效）</span><br>        packet.emit(hdr.ipv4); <span class="hljs-comment">// 发送IPv4头部（如果有效）</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Switch <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C">V1Switch(<br>MyParser(), <br>MyVerifyChecksum(),<br>MyIngress(), <br>MyEgress(),<br>MyComputeChecksum(), <br>MyDeparser()<br>) main; <br></code></pre></td></tr></table></figure></li><li><code>s1-commands.txt</code> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text"># S1交换机<br># 针对发完主机H2的IPv4数据包添加MPLS标签<br>table_add FEC_tbl mpls_ingress_4_hop 10.7.2.0/24 =&gt; 2 3 2 2<br># 针对发完主机H3的IPv4数据包添加MPLS标签<br>table_add FEC_tbl mpls_ingress_4_hop 10.7.3.0/24 =&gt; 2 3 2 2<br># MPLS标签指示从端口2转发，将到达交换机S2<br>table_add mpls_tbl mpls_forward 2 0 =&gt; 00:00:00:02:01:00 2<br># 正常的IPv4数据包转发，从端口1转发进而到达主机H1<br>table_add FEC_tbl ipv4_forward 10.1.1.0/24 =&gt; 00:00:0a:01:01:02 1<br></code></pre></td></tr></table></figure></li><li><code>s2-commands.txt</code> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text"># S2交换机<br># 剥离顶层MPLS标签，并从端口2转发至下一跳交换机S4<br>table_add mpls_tbl mpls_forward 2 0 =&gt; 00:00:00:04:01:00 2<br></code></pre></td></tr></table></figure></li><li><code>s3-commands.txt</code> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text"># S3交换机<br># 剥离全部MPLS标签、恢复为IPv4数据包，并从1端口转发至交换机S1<br>table_add mpls_tbl penultimate 1 1 =&gt; 00:00:00:01:03:00 1<br></code></pre></td></tr></table></figure></li><li><code>s4-commands.txt</code> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text"># S4交换机<br># 剥离顶层MPLS标签，并从端口3转发至下一跳交换机S5<br>table_add mpls_tbl mpls_forward 3 0 =&gt; 00:00:00:05:01:00 3<br># 剥离顶层MPLS标签，并从端口2转发至下一跳交换机S3<br>table_add mpls_tbl mpls_forward 2 0 =&gt; 00:00:00:03:02:00 2<br></code></pre></td></tr></table></figure></li><li><code>s5-commands.txt</code> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text"># S5交换机<br># 剥离全部MPLS标签、恢复为IPv4数据包，并从2端口转发至交换机S7<br>table_add mpls_tbl penultimate 2 1 =&gt; 00:00:00:07:01:00 2<br></code></pre></td></tr></table></figure></li><li><code>s6-commands.txt</code> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text"># S6交换机<br># 剥离顶层MPLS标签，并从端口1转发至下一跳交换机S4<br>table_add mpls_tbl mpls_forward 1 0 =&gt; 00:00:00:04:04:00 1<br></code></pre></td></tr></table></figure></li><li><code>s7-commands.txt</code> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text"># S7交换机<br># 针对发完主机H1的IPv4数据包添加MPLS标签<br>table_add FEC_tbl mpls_ingress_4_hop 10.1.1.0/24 =&gt; 1 2 1 2<br># MPLS标签指示从端口2转发，将到达交换机S6<br>table_add mpls_tbl mpls_forward 2 0 =&gt; 00:00:00:06:02:00 2<br># 正常的IPv4数据包转发，从端口3转发进而到达主机H2<br>table_add FEC_tbl ipv4_forward 10.7.2.0/24 =&gt; 00:00:0a:07:02:02 3<br># 正常的IPv4数据包转发，从端口4转发进而到达主机H3<br>table_add FEC_tbl ipv4_forward 10.7.3.0/24 =&gt; 00:00:0a:07:03:02 4<br></code></pre></td></tr></table></figure></li><li><code>controller.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> p4utils.utils.helper <span class="hljs-keyword">import</span> load_topo<br><span class="hljs-keyword">from</span> p4utils.utils.sswitch_p4runtime_API <span class="hljs-keyword">import</span> SimpleSwitchP4RuntimeAPI<br><span class="hljs-keyword">from</span> p4utils.utils.sswitch_thrift_API <span class="hljs-keyword">import</span> SimpleSwitchThriftAPI<br><br><span class="hljs-comment"># 加载 topology.json 拓扑配置文件</span><br>topo = load_topo(<span class="hljs-string">&#x27;topology.json&#x27;</span>)<br><span class="hljs-comment"># 用于保存每台交换机的 P4Runtime 控制器对象</span><br>controllers = &#123;&#125;<br><span class="hljs-comment"># 遍历拓扑中所有 P4Runtime 交换机，初始化对应的控制器对象</span><br><span class="hljs-keyword">for</span> switch, data <span class="hljs-keyword">in</span> topo.get_p4rtswitches().items():<br>    controllers[switch] = SimpleSwitchP4RuntimeAPI(<br>        data[<span class="hljs-string">&#x27;device_id&#x27;</span>],<br>        data[<span class="hljs-string">&#x27;grpc_port&#x27;</span>],<br>        p4rt_path=data[<span class="hljs-string">&#x27;p4rt_path&#x27;</span>],<br>        json_path=data[<span class="hljs-string">&#x27;json_path&#x27;</span>]<br>    )<br><br><span class="hljs-comment"># -------------------------------</span><br><span class="hljs-comment"># 配置 s1：入口边界交换机</span><br><span class="hljs-comment"># -------------------------------</span><br>controller = controllers[<span class="hljs-string">&#x27;s1&#x27;</span>]<br><span class="hljs-comment"># 设置端口 1 为入口边界端口</span><br>controller.table_add(<span class="hljs-string">&#x27;check_is_ingress_border&#x27;</span>, <span class="hljs-string">&#x27;set_is_ingress_border&#x27;</span>, [<span class="hljs-string">&#x27;1&#x27;</span>])<br><span class="hljs-comment"># 配置目的地址为 10.7.2.2/32 时添加 MPLS 标签 2（发往 h2）</span><br>controller.table_add(<span class="hljs-string">&#x27;fec_to_label&#x27;</span>, <span class="hljs-string">&#x27;add_mpls_header&#x27;</span>, [<span class="hljs-string">&#x27;10.7.2.2/32&#x27;</span>], [<span class="hljs-string">&#x27;2&#x27;</span>])<br><span class="hljs-comment"># 配置目的地址为 10.7.3.2/32 时添加 MPLS 标签 3（发往 h3）</span><br>controller.table_add(<span class="hljs-string">&#x27;fec_to_label&#x27;</span>, <span class="hljs-string">&#x27;add_mpls_header&#x27;</span>, [<span class="hljs-string">&#x27;10.7.3.2/32&#x27;</span>], [<span class="hljs-string">&#x27;3&#x27;</span>])<br><span class="hljs-comment"># 根据标签 2 进行转发，出端口 2，目的 MAC 为下一跳 s2</span><br>controller.table_add(<span class="hljs-string">&#x27;mpls_tbl&#x27;</span>, <span class="hljs-string">&#x27;mpls_forward&#x27;</span>, [<span class="hljs-string">&#x27;2&#x27;</span>], [<span class="hljs-string">&#x27;00:00:00:02:01:00&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>])<br><span class="hljs-comment"># 根据标签 3 进行转发，出端口 3，目的 MAC 为下一跳 s3</span><br>controller.table_add(<span class="hljs-string">&#x27;mpls_tbl&#x27;</span>, <span class="hljs-string">&#x27;mpls_forward&#x27;</span>, [<span class="hljs-string">&#x27;3&#x27;</span>], [<span class="hljs-string">&#x27;00:00:00:03:01:00&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>])<br><span class="hljs-comment"># 标签 1 用于回程流量（h2/h3 → h1），出端口 1</span><br>controller.table_add(<span class="hljs-string">&#x27;mpls_tbl&#x27;</span>, <span class="hljs-string">&#x27;mpls_forward&#x27;</span>, [<span class="hljs-string">&#x27;1&#x27;</span>], [<span class="hljs-string">&#x27;00:00:0a:01:01:02&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>])<br><span class="hljs-comment"># 设置端口 1 为出口边界（处理回程 MPLS 流量）</span><br>controller.table_add(<span class="hljs-string">&#x27;check_is_egress_border&#x27;</span>, <span class="hljs-string">&#x27;is_egress_border&#x27;</span>, [<span class="hljs-string">&#x27;1&#x27;</span>])<br><br><span class="hljs-comment"># -------------------------------</span><br><span class="hljs-comment"># 配置 s2：中间 MPLS 节点</span><br><span class="hljs-comment"># -------------------------------</span><br>controller = controllers[<span class="hljs-string">&#x27;s2&#x27;</span>]<br><span class="hljs-comment"># 标签 2 → 发往 s4，端口 2</span><br>controller.table_add(<span class="hljs-string">&#x27;mpls_tbl&#x27;</span>, <span class="hljs-string">&#x27;mpls_forward&#x27;</span>, [<span class="hljs-string">&#x27;2&#x27;</span>], [<span class="hljs-string">&#x27;00:00:00:04:02:00&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>])<br><span class="hljs-comment"># 标签 1（回程）→ 发往 s1，端口 1</span><br>controller.table_add(<span class="hljs-string">&#x27;mpls_tbl&#x27;</span>, <span class="hljs-string">&#x27;mpls_forward&#x27;</span>, [<span class="hljs-string">&#x27;1&#x27;</span>], [<span class="hljs-string">&#x27;00:00:00:01:02:00&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>])<br><br><span class="hljs-comment"># -------------------------------</span><br><span class="hljs-comment"># 配置 s3：中间 MPLS 节点</span><br><span class="hljs-comment"># -------------------------------</span><br>controller = controllers[<span class="hljs-string">&#x27;s3&#x27;</span>]<br><span class="hljs-comment"># 标签 3 → 发往 s4，端口 2</span><br>controller.table_add(<span class="hljs-string">&#x27;mpls_tbl&#x27;</span>, <span class="hljs-string">&#x27;mpls_forward&#x27;</span>, [<span class="hljs-string">&#x27;3&#x27;</span>], [<span class="hljs-string">&#x27;00:00:00:04:03:00&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>])<br><br><span class="hljs-comment"># -------------------------------</span><br><span class="hljs-comment"># 配置 s4：汇聚 MPLS 节点</span><br><span class="hljs-comment"># -------------------------------</span><br>controller = controllers[<span class="hljs-string">&#x27;s4&#x27;</span>]<br><span class="hljs-comment"># 标签 2 → 发往 s6，端口 4</span><br>controller.table_add(<span class="hljs-string">&#x27;mpls_tbl&#x27;</span>, <span class="hljs-string">&#x27;mpls_forward&#x27;</span>, [<span class="hljs-string">&#x27;2&#x27;</span>], [<span class="hljs-string">&#x27;00:00:00:06:04:00&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>])<br><span class="hljs-comment"># 标签 3 → 发往 s5，端口 3</span><br>controller.table_add(<span class="hljs-string">&#x27;mpls_tbl&#x27;</span>, <span class="hljs-string">&#x27;mpls_forward&#x27;</span>, [<span class="hljs-string">&#x27;3&#x27;</span>], [<span class="hljs-string">&#x27;00:00:00:05:04:00&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>])<br><span class="hljs-comment"># 标签 1（回程）→ 发往 s2，端口 1</span><br>controller.table_add(<span class="hljs-string">&#x27;mpls_tbl&#x27;</span>, <span class="hljs-string">&#x27;mpls_forward&#x27;</span>, [<span class="hljs-string">&#x27;1&#x27;</span>], [<span class="hljs-string">&#x27;00:00:00:02:04:00&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>])<br><br><span class="hljs-comment"># -------------------------------</span><br><span class="hljs-comment"># 配置 s5：通往 s7 的一条路径</span><br><span class="hljs-comment"># -------------------------------</span><br>controller = controllers[<span class="hljs-string">&#x27;s5&#x27;</span>]<br><span class="hljs-comment"># 标签 3 → 发往 s7，端口 2</span><br>controller.table_add(<span class="hljs-string">&#x27;mpls_tbl&#x27;</span>, <span class="hljs-string">&#x27;mpls_forward&#x27;</span>, [<span class="hljs-string">&#x27;3&#x27;</span>], [<span class="hljs-string">&#x27;00:00:00:07:05:00&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>])<br><br><span class="hljs-comment"># -------------------------------</span><br><span class="hljs-comment"># 配置 s6：另一条路径，最终到达 s7</span><br><span class="hljs-comment"># -------------------------------</span><br>controller = controllers[<span class="hljs-string">&#x27;s6&#x27;</span>]<br><span class="hljs-comment"># 标签 2 → 发往 s7，端口 2</span><br>controller.table_add(<span class="hljs-string">&#x27;mpls_tbl&#x27;</span>, <span class="hljs-string">&#x27;mpls_forward&#x27;</span>, [<span class="hljs-string">&#x27;2&#x27;</span>], [<span class="hljs-string">&#x27;00:00:00:07:06:00&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>])<br><span class="hljs-comment"># 标签 1（回程）→ 发往 s4，端口 1</span><br>controller.table_add(<span class="hljs-string">&#x27;mpls_tbl&#x27;</span>, <span class="hljs-string">&#x27;mpls_forward&#x27;</span>, [<span class="hljs-string">&#x27;1&#x27;</span>], [<span class="hljs-string">&#x27;00:00:00:04:06:00&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>])<br><br><span class="hljs-comment"># -------------------------------</span><br><span class="hljs-comment"># 配置 s7：出口边界交换机（h2、h3）</span><br><span class="hljs-comment"># -------------------------------</span><br>controller = controllers[<span class="hljs-string">&#x27;s7&#x27;</span>]<br><span class="hljs-comment"># 标签 2 → 发往 h2，端口 3</span><br>controller.table_add(<span class="hljs-string">&#x27;mpls_tbl&#x27;</span>, <span class="hljs-string">&#x27;mpls_forward&#x27;</span>, [<span class="hljs-string">&#x27;2&#x27;</span>], [<span class="hljs-string">&#x27;00:00:0a:07:02:02&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>])<br><span class="hljs-comment"># 标签 3 → 发往 h3，端口 4</span><br>controller.table_add(<span class="hljs-string">&#x27;mpls_tbl&#x27;</span>, <span class="hljs-string">&#x27;mpls_forward&#x27;</span>, [<span class="hljs-string">&#x27;3&#x27;</span>], [<span class="hljs-string">&#x27;00:00:0a:07:03:02&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>])<br><span class="hljs-comment"># 设置端口 3 和 4 为 ingress border（回程流量起始点）</span><br>controller.table_add(<span class="hljs-string">&#x27;check_is_ingress_border&#x27;</span>, <span class="hljs-string">&#x27;set_is_ingress_border&#x27;</span>, [<span class="hljs-string">&#x27;3&#x27;</span>])<br>controller.table_add(<span class="hljs-string">&#x27;check_is_ingress_border&#x27;</span>, <span class="hljs-string">&#x27;set_is_ingress_border&#x27;</span>, [<span class="hljs-string">&#x27;4&#x27;</span>])<br><span class="hljs-comment"># 设置端口 3 和 4 为出口边界（解封装流量）</span><br>controller.table_add(<span class="hljs-string">&#x27;check_is_egress_border&#x27;</span>, <span class="hljs-string">&#x27;is_egress_border&#x27;</span>, [<span class="hljs-string">&#x27;3&#x27;</span>])<br>controller.table_add(<span class="hljs-string">&#x27;check_is_egress_border&#x27;</span>, <span class="hljs-string">&#x27;is_egress_border&#x27;</span>, [<span class="hljs-string">&#x27;4&#x27;</span>])<br><span class="hljs-comment"># 配置回程流量（目的为 h1）的 FEC → 标签 1</span><br>controller.table_add(<span class="hljs-string">&#x27;fec_to_label&#x27;</span>, <span class="hljs-string">&#x27;add_mpls_header&#x27;</span>, [<span class="hljs-string">&#x27;10.1.1.2/32&#x27;</span>], [<span class="hljs-string">&#x27;1&#x27;</span>])<br><span class="hljs-comment"># 标签 1（回程）→ 发往 s6，端口 2</span><br>controller.table_add(<span class="hljs-string">&#x27;mpls_tbl&#x27;</span>, <span class="hljs-string">&#x27;mpls_forward&#x27;</span>, [<span class="hljs-string">&#x27;1&#x27;</span>], [<span class="hljs-string">&#x27;00:00:00:06:07:00&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>])<br><br><span class="hljs-comment"># 本地 IP 转发规则：不使用 MPLS，直接发往 h2、h3</span><br>controller.table_add(<span class="hljs-string">&#x27;ipv4_lpm&#x27;</span>, <span class="hljs-string">&#x27;ipv4_forward&#x27;</span>, [<span class="hljs-string">&#x27;10.7.2.2/32&#x27;</span>], [<span class="hljs-string">&#x27;00:00:0a:07:02:02&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>])<br>controller.table_add(<span class="hljs-string">&#x27;ipv4_lpm&#x27;</span>, <span class="hljs-string">&#x27;ipv4_forward&#x27;</span>, [<span class="hljs-string">&#x27;10.7.3.2/32&#x27;</span>], [<span class="hljs-string">&#x27;00:00:0a:07:03:02&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>])<br><br></code></pre></td></tr></table></figure></li><li><code>network.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> p4utils.mininetlib.network_API <span class="hljs-keyword">import</span> NetworkAPI<br><br><span class="hljs-comment"># 创建一个 NetworkAPI 实例，用于定义网络拓扑</span><br>net = NetworkAPI()<br><span class="hljs-comment"># 设置网络日志级别为 &#x27;info&#x27;，可输出适量调试信息</span><br>net.setLogLevel(<span class="hljs-string">&#x27;info&#x27;</span>)<br><span class="hljs-comment"># 指定编译器使用 P4Runtime 模式</span><br>net.setCompiler(p4rt=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 执行名为 controller.py 的控制器脚本，并在每次运行时重新启动该脚本</span><br>net.execScript(<span class="hljs-string">&#x27;python controller.py&#x27;</span>, reboot=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 添加七个基于 P4Runtime 的交换机，分别命名为 s1 至 s7</span><br>net.addP4RuntimeSwitch(<span class="hljs-string">&#x27;s1&#x27;</span>)<br>net.addP4RuntimeSwitch(<span class="hljs-string">&#x27;s2&#x27;</span>)<br>net.addP4RuntimeSwitch(<span class="hljs-string">&#x27;s3&#x27;</span>)<br>net.addP4RuntimeSwitch(<span class="hljs-string">&#x27;s4&#x27;</span>)<br>net.addP4RuntimeSwitch(<span class="hljs-string">&#x27;s5&#x27;</span>)<br>net.addP4RuntimeSwitch(<span class="hljs-string">&#x27;s6&#x27;</span>)<br>net.addP4RuntimeSwitch(<span class="hljs-string">&#x27;s7&#x27;</span>)<br><span class="hljs-comment"># 所有交换机使用名为 basics.p4 的 P4 程序作为数据面逻辑</span><br>net.setP4SourceAll(<span class="hljs-string">&#x27;basics.p4&#x27;</span>)<br><span class="hljs-comment"># 添加三台主机 h1、h2、h3</span><br>net.addHost(<span class="hljs-string">&#x27;h1&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h2&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h3&#x27;</span>)<br><span class="hljs-comment"># 连接主机 h1 到交换机 s1，连接到 s1 的端口 1</span><br>net.addLink(<span class="hljs-string">&quot;h1&quot;</span>, <span class="hljs-string">&quot;s1&quot;</span>, port2=<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 以下构建的是一个多路径菱形结构的拓扑，支持负载均衡和路径冗余</span><br><span class="hljs-comment"># 连接 s1 的端口 2 到 s2 的端口 1</span><br>net.addLink(<span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-string">&quot;s2&quot;</span>, port1=<span class="hljs-number">2</span>, port2=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># 连接 s1 的端口 3 到 s3 的端口 1</span><br>net.addLink(<span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-string">&quot;s3&quot;</span>, port1=<span class="hljs-number">3</span>, port2=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># 连接 s2 的端口 2 到 s4 的端口 1</span><br>net.addLink(<span class="hljs-string">&quot;s2&quot;</span>, <span class="hljs-string">&quot;s4&quot;</span>, port1=<span class="hljs-number">2</span>, port2=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># 连接 s3 的端口 2 到 s4 的端口 2</span><br>net.addLink(<span class="hljs-string">&quot;s3&quot;</span>, <span class="hljs-string">&quot;s4&quot;</span>, port1=<span class="hljs-number">2</span>, port2=<span class="hljs-number">2</span>)<br><span class="hljs-comment"># s4 是拓扑的中间节点，连接两个子路径分支：s5 和 s6</span><br>net.addLink(<span class="hljs-string">&quot;s4&quot;</span>, <span class="hljs-string">&quot;s5&quot;</span>, port1=<span class="hljs-number">3</span>, port2=<span class="hljs-number">1</span>)<br>net.addLink(<span class="hljs-string">&quot;s4&quot;</span>, <span class="hljs-string">&quot;s6&quot;</span>, port1=<span class="hljs-number">4</span>, port2=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># s5 和 s6 都连向汇聚节点 s7</span><br>net.addLink(<span class="hljs-string">&quot;s5&quot;</span>, <span class="hljs-string">&quot;s7&quot;</span>, port1=<span class="hljs-number">2</span>, port2=<span class="hljs-number">1</span>)<br>net.addLink(<span class="hljs-string">&quot;s6&quot;</span>, <span class="hljs-string">&quot;s7&quot;</span>, port1=<span class="hljs-number">2</span>, port2=<span class="hljs-number">2</span>)<br><span class="hljs-comment"># s7 是终点交换机，连接主机 h2（端口 3）和 h3（端口 4）</span><br>net.addLink(<span class="hljs-string">&quot;s7&quot;</span>, <span class="hljs-string">&quot;h2&quot;</span>, port1=<span class="hljs-number">3</span>)<br>net.addLink(<span class="hljs-string">&quot;s7&quot;</span>, <span class="hljs-string">&quot;h3&quot;</span>, port1=<span class="hljs-number">4</span>)<br><br><span class="hljs-comment"># 启用三层自动地址分配与默认路由配置</span><br>net.l3()<br><span class="hljs-comment"># 启用对所有节点的 pcap 抓包功能，便于后续数据包分析</span><br>net.enablePcapDumpAll()<br><span class="hljs-comment"># 启用所有节点的日志记录</span><br>net.enableLogAll()<br><span class="hljs-comment"># 启动命令行交互界面 CLI，便于调试与测试网络行为</span><br>net.enableCli()<br><span class="hljs-comment"># 启动整个网络，包括交换机、主机和控制器</span><br>net.startNetwork()<br></code></pre></td></tr></table></figure></li></ol><ul><li><h1 id="p4仿真">P4仿真</h1></li></ul><ol type="1"><li>配置匹配表</li></ol><figure><img src="/2025/07/31/P4%2006-MPLS/2.png" alt="配置匹配表"><figcaption aria-hidden="true">配置匹配表</figcaption></figure><ol start="2" type="1"><li>启动网络拓扑</li></ol><figure><img src="/2025/07/31/P4%2006-MPLS/3.png" alt="启动网络拓扑"><figcaption aria-hidden="true">启动网络拓扑</figcaption></figure><ol start="3" type="1"><li>启动<code>pingall</code>命令，发现主机间成功通信</li></ol><figure><img src="/2025/07/31/P4%2006-MPLS/4.png" alt="pingall命令"><figcaption aria-hidden="true">pingall命令</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>P4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>P4</tag>
      
      <tag>SDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P4 05-L2_Learning</title>
    <link href="/2025/07/30/P4%2005-L2_Learning/"/>
    <url>/2025/07/30/P4%2005-L2_Learning/</url>
    
    <content type="html"><![CDATA[<h1 id="p4示例程序-05-l2自学习交换机">P4示例程序-05 L2自学习交换机</h1><ul><li><h1 id="功能">功能</h1><p>在L2交换机的基础上，引入控制平面使得交换机能够自学习到转发表、而无需预先配置，类似于实现经典SDN中的Packet-In消息与Packet-Out消息</p></li><li><h1 id="拓扑结构">拓扑结构</h1></li></ul><figure><img src="/2025/07/30/P4%2005-L2_Learning/1.png" alt="拓扑结构"><figcaption aria-hidden="true">拓扑结构</figcaption></figure><ul><li><h1 id="代码">代码</h1></li><li><h3 id="clone">Clone</h3></li></ul><ol type="1"><li><code>p4app_clone.json</code> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;topology&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;assignment_strategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;l2&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;auto_arp_tables&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>    <br>  <span class="hljs-attr">&quot;links&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h4&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;h1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;h2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;h3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;h4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;switches&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;s1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;cpu_port&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li>Headers <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">9</span>&gt;  egressSpec_t; <span class="hljs-comment">// 定义出端口类型</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">48</span>&gt; macAddr_t; <span class="hljs-comment">// 定义 MAC 地址类型</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">32</span>&gt; ip4Addr_t; <span class="hljs-comment">// 定义 IPv4 地址类型</span><br><br>header <span class="hljs-type">ethernet_t</span> &#123;<br>    macAddr_t dstAddr; <span class="hljs-comment">// 目的 MAC 地址</span><br>    macAddr_t srcAddr; <span class="hljs-comment">// 源 MAC 地址</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   etherType; <span class="hljs-comment">// 以太网类型字段</span><br>&#125;<br><br>header <span class="hljs-type">cpu_t</span> &#123;<br>    bit&lt;<span class="hljs-number">48</span>&gt; srcAddr; <span class="hljs-comment">// 记录源 MAC 地址</span><br>    bit&lt;<span class="hljs-number">16</span>&gt; ingress_port; <span class="hljs-comment">// 记录入端口号</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">metadata</span> &#123;</span><br>    @field_list(<span class="hljs-number">0</span>)<br>    bit&lt;<span class="hljs-number">9</span>&gt; ingress_port; <span class="hljs-comment">// 用户自定义元数据，记录入端口</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">headers</span> &#123;</span><br>    <span class="hljs-type">ethernet_t</span>   ethernet; <span class="hljs-comment">// 以太网头部</span><br>    <span class="hljs-type">cpu_t</span>        cpu; <span class="hljs-comment">// 自定义 CPU 学习头部</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C">parser <span class="hljs-title function_">MyParser</span><span class="hljs-params">(packet_in packet,</span><br><span class="hljs-params">                out headers hdr,</span><br><span class="hljs-params">                inout metadata meta,</span><br><span class="hljs-params">                inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    state start &#123;<br>        packet.extract(hdr.ethernet); <span class="hljs-comment">// 提取以太网头部</span><br>        transition accept; <span class="hljs-comment">// 状态转移到 accept</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Verification <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyVerifyChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>    apply &#123;  <br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure></li><li>Ingress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyIngress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                  inout metadata meta,</span><br><span class="hljs-params">                  inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    action <span class="hljs-title function_">drop</span><span class="hljs-params">()</span> &#123;<br>        mark_to_drop(standard_metadata); <span class="hljs-comment">// 标记该数据包丢弃</span><br>    &#125;<br><br>    action <span class="hljs-title function_">mac_learn</span><span class="hljs-params">()</span> &#123;<br>        meta.ingress_port = standard_metadata.ingress_port; <span class="hljs-comment">// 记录入端口</span><br>        clone_preserving_field_list(CloneType.I2E, <span class="hljs-number">100</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// 克隆数据包用于学习</span><br>    &#125;<br><br>    table smac &#123;<br>        key = &#123;<br>            hdr.ethernet.srcAddr: exact; <span class="hljs-comment">// 使用源 MAC 地址匹配</span><br>        &#125;<br><br>        actions = &#123;<br>            mac_learn; <span class="hljs-comment">// 执行学习动作</span><br>            NoAction; <span class="hljs-comment">// 不执行动作</span><br>        &#125;<br>        size = <span class="hljs-number">256</span>; <span class="hljs-comment">// 表项大小为 256</span><br>        default_action = mac_learn; <span class="hljs-comment">// 默认执行学习动作</span><br>    &#125;<br><br>    action <span class="hljs-title function_">forward</span><span class="hljs-params">(bit&lt;<span class="hljs-number">9</span>&gt; egress_port)</span> &#123;<br>        standard_metadata.egress_spec = egress_port; <span class="hljs-comment">// 设置出端口</span><br>    &#125;<br><br>    table dmac &#123;<br>        key = &#123;<br>            hdr.ethernet.dstAddr: exact; <span class="hljs-comment">// 使用目的 MAC 地址匹配</span><br>        &#125;<br><br>        actions = &#123;<br>            forward; <span class="hljs-comment">// 执行转发动作</span><br>            NoAction; <span class="hljs-comment">// 不执行动作</span><br>        &#125;<br>        size = <span class="hljs-number">256</span>; <span class="hljs-comment">// 表项大小为 256</span><br>        default_action = NoAction; <span class="hljs-comment">// 默认不做动作</span><br>    &#125;<br><br>    action <span class="hljs-title function_">set_mcast_grp</span><span class="hljs-params">(bit&lt;<span class="hljs-number">16</span>&gt; mcast_grp)</span> &#123;<br>        standard_metadata.mcast_grp = mcast_grp; <span class="hljs-comment">// 设置多播组</span><br>    &#125;<br><br>    table broadcast &#123;<br>        key = &#123;<br>            standard_metadata.ingress_port: exact; <span class="hljs-comment">// 根据入端口匹配</span><br>        &#125;<br><br>        actions = &#123;<br>            set_mcast_grp; <span class="hljs-comment">// 设置多播组动作</span><br>            NoAction; <span class="hljs-comment">// 不执行动作</span><br>        &#125;<br>        size = <span class="hljs-number">256</span>; <span class="hljs-comment">// 表项大小为 256</span><br>        default_action = NoAction; <span class="hljs-comment">// 默认不设置多播组</span><br>    &#125;<br><br>    apply &#123;<br><br>        smac.apply(); <span class="hljs-comment">// 应用源地址学习表</span><br>        <span class="hljs-keyword">if</span> (dmac.apply().hit)&#123;<br>            <span class="hljs-comment">// # 命中目的地址表，不需要额外处理</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            broadcast.apply(); <span class="hljs-comment">// 未命中则应用广播表</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Egress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyEgress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                 inout metadata meta,</span><br><span class="hljs-params">                 inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    apply &#123;<br><br>        <span class="hljs-comment">// If ingress clone</span><br>        <span class="hljs-keyword">if</span> (standard_metadata.instance_type == <span class="hljs-number">1</span>)&#123;<br>            hdr.cpu.setValid(); <span class="hljs-comment">// 设置 CPU 头部为有效</span><br>            hdr.cpu.srcAddr = hdr.ethernet.srcAddr; <span class="hljs-comment">// 将源 MAC 写入 CPU 头部</span><br>            hdr.cpu.ingress_port = (bit&lt;<span class="hljs-number">16</span>&gt;)meta.ingress_port; <span class="hljs-comment">// 写入入口端口</span><br>            hdr.ethernet.etherType = L2_LEARN_ETHER_TYPE; <span class="hljs-comment">// 更改以太类型为学习类型</span><br>            truncate((bit&lt;<span class="hljs-number">32</span>&gt;)<span class="hljs-number">22</span>); <span class="hljs-comment">//ether+cpu header # 截断包长为 22 字节</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Computation <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyComputeChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>     apply &#123;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure></li><li>DE parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyDeparser</span><span class="hljs-params">(packet_out packet, in headers hdr)</span> &#123;<br>    apply &#123;<br>        <span class="hljs-comment">//parsed headers have to be added again into the packet.</span><br>        packet.emit(hdr.ethernet); <span class="hljs-comment">// 重新打包以太网头部</span><br>        packet.emit(hdr.cpu); <span class="hljs-comment">// 打包 CPU 学习头部</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Switch <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C">V1Switch(<br>MyParser(),<br>MyVerifyChecksum(),<br>MyIngress(),<br>MyEgress(),<br>MyComputeChecksum(),<br>MyDeparser()<br>) main;<br></code></pre></td></tr></table></figure></li><li><code>controller_base.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># controller_base.py</span><br><span class="hljs-keyword">from</span> p4utils.utils.helper <span class="hljs-keyword">import</span> load_topo<br><span class="hljs-keyword">from</span> p4utils.utils.sswitch_p4runtime_API <span class="hljs-keyword">import</span> SimpleSwitchP4RuntimeAPI<br><span class="hljs-keyword">from</span> p4utils.utils.sswitch_thrift_API <span class="hljs-keyword">import</span> SimpleSwitchThriftAPI<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseController</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, sw_name</span>):<br>        <span class="hljs-comment"># 加载交换机拓扑文件 topology.json</span><br>        <span class="hljs-variable language_">self</span>.topo = load_topo(<span class="hljs-string">&#x27;topology.json&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.sw_name = sw_name<br>        <span class="hljs-comment"># 获取连接 CPU 端口的 port index；可能为 None</span><br>        <span class="hljs-variable language_">self</span>.cpu_port = <span class="hljs-variable language_">self</span>.topo.get_cpu_port_index(<span class="hljs-variable language_">self</span>.sw_name)<br><br>        <span class="hljs-comment"># 获取交换机设备 ID（用于 gRPC）</span><br>        device_id = <span class="hljs-variable language_">self</span>.topo.get_p4switch_id(sw_name)<br>        grpc_port = <span class="hljs-variable language_">self</span>.topo.get_grpc_port(sw_name)<br>        sw_data = <span class="hljs-variable language_">self</span>.topo.get_p4rtswitches()[sw_name]<br><br>        <span class="hljs-comment"># 初始化 gRPC 控制面 API 客户端</span><br>        <span class="hljs-variable language_">self</span>.controller = SimpleSwitchP4RuntimeAPI(<br>            device_id,<br>            grpc_port,<br>            p4rt_path=sw_data[<span class="hljs-string">&#x27;p4rt_path&#x27;</span>],<br>            json_path=sw_data[<span class="hljs-string">&#x27;json_path&#x27;</span>]<br>        )<br><br>        <span class="hljs-comment"># 调用初始化逻辑</span><br>        <span class="hljs-variable language_">self</span>.init()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reset</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># gRPC reset 控制面状态</span><br>        <span class="hljs-variable language_">self</span>.controller.reset_state()<br>        <span class="hljs-comment"># 使用 Thrift 完整重置转发面状态</span><br>        thrift_port = <span class="hljs-variable language_">self</span>.topo.get_thrift_port(<span class="hljs-variable language_">self</span>.sw_name)<br>        controller_thrift = SimpleSwitchThriftAPI(thrift_port)<br>        controller_thrift.reset_state()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 执行重置</span><br>        <span class="hljs-variable language_">self</span>.reset()<br>        <span class="hljs-comment"># 配置广播组</span><br>        <span class="hljs-variable language_">self</span>.add_broadcast_groups()<br>        <span class="hljs-comment"># 配置 clone session 用于 CPU 收包</span><br>        <span class="hljs-variable language_">self</span>.add_clone_session()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_clone_session</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 如果有 CPU 端口配置，则创建 clone session，将报文复制到 CPU</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.cpu_port <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-variable language_">self</span>.controller.cs_create(<span class="hljs-number">100</span>, [<span class="hljs-variable language_">self</span>.cpu_port])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_broadcast_groups</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 获取所有接口名对应端口号</span><br>        interfaces_to_port = <span class="hljs-variable language_">self</span>.topo.get_node_intfs(fields=[<span class="hljs-string">&#x27;port&#x27;</span>])[<span class="hljs-variable language_">self</span>.sw_name].copy()<br>        <span class="hljs-comment"># 排除 lo 接口</span><br>        interfaces_to_port.pop(<span class="hljs-string">&#x27;lo&#x27;</span>, <span class="hljs-literal">None</span>)<br>        <span class="hljs-comment"># 排除 CPU 端口接口</span><br>        interfaces_to_port.pop(<span class="hljs-variable language_">self</span>.topo.get_cpu_port_intf(<span class="hljs-variable language_">self</span>.sw_name), <span class="hljs-literal">None</span>)<br><br>        mc_grp_id = <span class="hljs-number">1</span>  <span class="hljs-comment"># 多播组 ID 号</span><br>        <span class="hljs-keyword">for</span> ingress_port <span class="hljs-keyword">in</span> interfaces_to_port.values():<br>            <span class="hljs-comment"># 除去当前 ingress_port，生成目标端口列表</span><br>            port_list = <span class="hljs-built_in">list</span>(interfaces_to_port.values())<br>            port_list.remove(ingress_port)<br><br>            <span class="hljs-comment"># 创建多播组，将所有其它端口加入组</span><br>            <span class="hljs-variable language_">self</span>.controller.mc_mgrp_create(mc_grp_id, port_list)<br>            <span class="hljs-comment"># 添加广播表项：当来自 ingress_port 时，使用 mc_grp_id 多播</span><br>            <span class="hljs-variable language_">self</span>.controller.table_add(<br>                <span class="hljs-string">&quot;broadcast&quot;</span>,<br>                <span class="hljs-string">&quot;set_mcast_grp&quot;</span>,<br>                [<span class="hljs-built_in">str</span>(ingress_port)],<br>                [<span class="hljs-built_in">str</span>(mc_grp_id)]<br>            )<br>            mc_grp_id += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">learn</span>(<span class="hljs-params">self, learning_data</span>):<br>        <span class="hljs-comment"># 根据新学到的 (MAC, port)，添加转发表项</span><br>        <span class="hljs-keyword">for</span> mac_addr, ingress_port <span class="hljs-keyword">in</span> learning_data:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;mac: <span class="hljs-subst">&#123;mac_addr:012X&#125;</span> ingress_port: <span class="hljs-subst">&#123;ingress_port&#125;</span>&quot;</span>)<br>            <span class="hljs-comment"># 添加 smac 表项（标记为已学习）</span><br>            <span class="hljs-variable language_">self</span>.controller.table_add(<span class="hljs-string">&quot;smac&quot;</span>, <span class="hljs-string">&quot;NoAction&quot;</span>, [<span class="hljs-built_in">str</span>(mac_addr)])<br>            <span class="hljs-comment"># 添加 dmac 表项：目的 MAC 转发到 ingress_port</span><br>            <span class="hljs-variable language_">self</span>.controller.table_add(<span class="hljs-string">&quot;dmac&quot;</span>, <span class="hljs-string">&quot;forward&quot;</span>, [<span class="hljs-built_in">str</span>(mac_addr)], [<span class="hljs-built_in">str</span>(ingress_port)])<br></code></pre></td></tr></table></figure></li><li><code>controller_main.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> digest_learning <span class="hljs-keyword">import</span> DigestLearningController<br><span class="hljs-keyword">from</span> cpu_learning <span class="hljs-keyword">import</span> CpuLearningController<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    sw_name = sys.argv[<span class="hljs-number">1</span>]        <span class="hljs-comment"># 交换机名称，例如 &#x27;s1&#x27;</span><br>    receive_from = sys.argv[<span class="hljs-number">2</span>]   <span class="hljs-comment"># 参数 &quot;digest&quot; 或 &quot;cpu&quot;</span><br><br>    <span class="hljs-keyword">if</span> receive_from == <span class="hljs-string">&quot;digest&quot;</span>:<br>        <span class="hljs-comment"># 启动 digest 模式控制器</span><br>        DigestLearningController(sw_name).run()<br>    <span class="hljs-keyword">elif</span> receive_from == <span class="hljs-string">&quot;cpu&quot;</span>:<br>        <span class="hljs-comment"># 启动 cpu 学习模式控制器</span><br>        CpuLearningController(sw_name).run()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python main.py &lt;sw_name&gt; &lt;digest|cpu&gt;&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><code>controller_clone.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># cpu_learning.py</span><br><span class="hljs-keyword">from</span> controller_base <span class="hljs-keyword">import</span> BaseController<br><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> Ether, sniff, Packet, BitField, raw<br><br><span class="hljs-comment"># 定义一个自定义报文格式，用于解析 clone 到 CPU 的包负载</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CpuHeader</span>(<span class="hljs-title class_ inherited__">Packet</span>):<br>    name = <span class="hljs-string">&#x27;CpuPacket&#x27;</span><br>    fields_desc = [<br>        BitField(<span class="hljs-string">&#x27;macAddr&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">48</span>),       <span class="hljs-comment"># 源 MAC 地址字段</span><br>        BitField(<span class="hljs-string">&#x27;ingress_port&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>)   <span class="hljs-comment"># ingress port 字段</span><br>    ]<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CpuLearningController</span>(<span class="hljs-title class_ inherited__">BaseController</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv_msg_cpu</span>(<span class="hljs-params">self, pkt</span>):<br>        <span class="hljs-comment"># 使用 scapy 解包原始数据包</span><br>        packet = Ether(raw(pkt))<br>        <span class="hljs-comment"># 判断以太类型是否匹配自定义 CPU 协议</span><br>        <span class="hljs-keyword">if</span> packet.<span class="hljs-built_in">type</span> == <span class="hljs-number">0x1234</span>:<br>            cpu_header = CpuHeader(<span class="hljs-built_in">bytes</span>(packet.load))<br>            <span class="hljs-comment"># 从 header 中提取 mac 和 ingress_port，进行学习</span><br>            <span class="hljs-variable language_">self</span>.learn([(cpu_header.macAddr, cpu_header.ingress_port)])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 获取 CPU 接口名称（从拓扑中，并将 eth0→eth1）</span><br>        cpu_port_intf = <span class="hljs-built_in">str</span>(<span class="hljs-variable language_">self</span>.topo.get_cpu_port_intf(<span class="hljs-variable language_">self</span>.sw_name).replace(<span class="hljs-string">&quot;eth0&quot;</span>, <span class="hljs-string">&quot;eth1&quot;</span>))<br>        <span class="hljs-comment"># 使用 scapy 抓包监听 CPU 接口，调用 recv_msg_cpu 处理每个包</span><br>        sniff(iface=cpu_port_intf, prn=<span class="hljs-variable language_">self</span>.recv_msg_cpu)<br><br></code></pre></td></tr></table></figure></li><li><code>network_clone.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> p4utils.mininetlib.network_API <span class="hljs-keyword">import</span> NetworkAPI<br><br>net = NetworkAPI()<br><br><span class="hljs-comment"># Network general options</span><br>net.setLogLevel(<span class="hljs-string">&#x27;info&#x27;</span>)<br>net.setCompiler(p4rt=<span class="hljs-literal">True</span>)<br>net.disableArpTables()<br><br><span class="hljs-comment"># Network definition</span><br>net.addP4RuntimeSwitch(<span class="hljs-string">&#x27;s1&#x27;</span>)<br>net.setP4Source(<span class="hljs-string">&#x27;s1&#x27;</span>,<span class="hljs-string">&#x27;./p4src/l2_learning_copy_to_cpu.p4&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h1&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h2&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h3&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h4&#x27;</span>)<br>net.addLink(<span class="hljs-string">&#x27;s1&#x27;</span>, <span class="hljs-string">&#x27;h1&#x27;</span>)<br>net.addLink(<span class="hljs-string">&#x27;s1&#x27;</span>, <span class="hljs-string">&#x27;h2&#x27;</span>)<br>net.addLink(<span class="hljs-string">&#x27;s1&#x27;</span>, <span class="hljs-string">&#x27;h3&#x27;</span>)<br>net.addLink(<span class="hljs-string">&#x27;s1&#x27;</span>, <span class="hljs-string">&#x27;h4&#x27;</span>)<br><br><span class="hljs-comment"># Assignment strategy</span><br>net.l2()<br><br><span class="hljs-comment"># Nodes general options</span><br>net.enableCpuPortAll()<br>net.enablePcapDumpAll()<br>net.enableLogAll()<br>net.enableCli()<br>net.startNetwork()<br></code></pre></td></tr></table></figure></li></ol><ul><li><h3 id="digest">Digest</h3></li></ul><ol type="1"><li><code>p4app_digest.json</code> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;topology&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;assignment_strategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;l2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;auto_arp_tables&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;links&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h4&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;h1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;h2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;h3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;h4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;switches&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;s1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li>Headers <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C">ypedef bit&lt;<span class="hljs-number">9</span>&gt;  egressSpec_t; <span class="hljs-comment">// 定义egress端口字段类型</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">48</span>&gt; macAddr_t; <span class="hljs-comment">// 定义MAC地址类型</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">32</span>&gt; ip4Addr_t; <span class="hljs-comment">// 定义IPv4地址类型</span><br><br>header <span class="hljs-type">ethernet_t</span> &#123; <span class="hljs-comment">// 定义以太网头部结构</span><br>    macAddr_t dstAddr; <span class="hljs-comment">// 目标MAC地址</span><br>    macAddr_t srcAddr; <span class="hljs-comment">// 源MAC地址</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   etherType; <span class="hljs-comment">// 以太网类型字段</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">learn_t</span> &#123;</span> <span class="hljs-comment">// 定义学习信息结构</span><br>    bit&lt;<span class="hljs-number">48</span>&gt; srcAddr; <span class="hljs-comment">// 源MAC地址</span><br>    bit&lt;<span class="hljs-number">9</span>&gt;  ingress_port; <span class="hljs-comment">// 入端口号</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">metadata</span> &#123;</span> <span class="hljs-comment">// 定义元数据结构</span><br>    <span class="hljs-comment">/* empty */</span><br>    <span class="hljs-type">learn_t</span> learn; <span class="hljs-comment">// 添加学习字段</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">headers</span> &#123;</span> <span class="hljs-comment">// 定义报文头部集合</span><br>    <span class="hljs-type">ethernet_t</span>   ethernet; <span class="hljs-comment">// 以太网头部</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C">parser <span class="hljs-title function_">MyParser</span><span class="hljs-params">(packet_in packet,</span><br><span class="hljs-params">                out headers hdr,</span><br><span class="hljs-params">                inout metadata meta,</span><br><span class="hljs-params">                inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    state start &#123; <span class="hljs-comment">// 起始状态</span><br>        packet.extract(hdr.ethernet); <span class="hljs-comment">// 提取以太网头部</span><br>        transition accept; <span class="hljs-comment">// 状态转移至accept</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Verification <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyVerifyChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>    apply &#123;  <br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure></li><li>Ingress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyIngress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                  inout metadata meta,</span><br><span class="hljs-params">                  inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    action <span class="hljs-title function_">drop</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 丢弃动作</span><br>        mark_to_drop(standard_metadata); <span class="hljs-comment">// 设置为丢弃</span><br>    &#125;<br><br>    action <span class="hljs-title function_">mac_learn</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 学习源MAC地址</span><br>        meta.learn.srcAddr = hdr.ethernet.srcAddr; <span class="hljs-comment">// 存储源MAC</span><br>        meta.learn.ingress_port = standard_metadata.ingress_port; <span class="hljs-comment">// 存储入端口</span><br>        digest&lt;<span class="hljs-type">learn_t</span>&gt;(<span class="hljs-number">1</span>, meta.learn); <span class="hljs-comment">// 发送digest到控制器</span><br>    &#125;<br><br>    table smac &#123; <span class="hljs-comment">// 源MAC学习表</span><br>        key = &#123;<br>            hdr.ethernet.srcAddr: exact; <span class="hljs-comment">// 匹配源MAC</span><br>        &#125;<br>        actions = &#123;<br>            mac_learn; <span class="hljs-comment">// 调用学习动作</span><br>            NoAction; <span class="hljs-comment">// 或不执行</span><br>        &#125;<br>        size = <span class="hljs-number">256</span>; <span class="hljs-comment">// 表项大小</span><br>        default_action = mac_learn; <span class="hljs-comment">// 默认进行学习</span><br>    &#125;<br><br>    action <span class="hljs-title function_">forward</span><span class="hljs-params">(bit&lt;<span class="hljs-number">9</span>&gt; egress_port)</span> &#123; <span class="hljs-comment">// 转发动作</span><br>        standard_metadata.egress_spec = egress_port; <span class="hljs-comment">// 设置出端口</span><br>    &#125;<br><br>    table dmac &#123; <span class="hljs-comment">// 目标MAC转发表</span><br>        key = &#123;<br>            hdr.ethernet.dstAddr: exact; <span class="hljs-comment">// 匹配目标MAC</span><br>        &#125;<br>        actions = &#123;<br>            forward; <span class="hljs-comment">// 调用转发动作</span><br>            NoAction; <span class="hljs-comment">// 或不执行</span><br>        &#125;<br>        size = <span class="hljs-number">256</span>; <span class="hljs-comment">// 表项大小</span><br>        default_action = NoAction; <span class="hljs-comment">// 默认不转发</span><br>    &#125;<br><br>    action <span class="hljs-title function_">set_mcast_grp</span><span class="hljs-params">(bit&lt;<span class="hljs-number">16</span>&gt; mcast_grp)</span> &#123; <span class="hljs-comment">// 设置多播组</span><br>        standard_metadata.mcast_grp = mcast_grp; <span class="hljs-comment">// 设置多播字段</span><br>    &#125;<br><br>    table broadcast &#123; <span class="hljs-comment">// 广播表</span><br>        key = &#123;<br>            standard_metadata.ingress_port: exact; <span class="hljs-comment">// 匹配入端口</span><br>        &#125;<br>        actions = &#123;<br>            set_mcast_grp; <span class="hljs-comment">// 设置多播组</span><br>            NoAction; <span class="hljs-comment">// 或不执行</span><br>        &#125;<br>        size = <span class="hljs-number">256</span>; <span class="hljs-comment">// 表项大小</span><br>        default_action = NoAction; <span class="hljs-comment">// 默认不设置</span><br>    &#125;<br><br>    apply &#123; <span class="hljs-comment">// 应用阶段</span><br>        smac.apply(); <span class="hljs-comment">// 应用源MAC表</span><br>        <span class="hljs-keyword">if</span> (dmac.apply().hit)&#123; <span class="hljs-comment">// 若目标MAC命中</span><br>            <span class="hljs-comment">// 什么都不做（继续转发）</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            broadcast.apply(); <span class="hljs-comment">// 否则执行广播表</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Egress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyEgress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                 inout metadata meta,</span><br><span class="hljs-params">                 inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    apply &#123;  &#125; <span class="hljs-comment">// 不做egress处理</span><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>Checksum Computation <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyComputeChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>     apply &#123;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure></li><li>DE parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyDeparser</span><span class="hljs-params">(packet_out packet, in headers hdr)</span> &#123;<br>    apply &#123;<br>        <span class="hljs-comment">//parsed headers have to be added again into the packet.</span><br>        packet.emit(hdr.ethernet); <span class="hljs-comment">// 重新打包以太网头部</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>Switch <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C">V1Switch(<br>MyParser(),<br>MyVerifyChecksum(),<br>MyIngress(),<br>MyEgress(),<br>MyComputeChecksum(),<br>MyDeparser()<br>) main;<br><br></code></pre></td></tr></table></figure></li><li><code>controller_digest.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># digest_learning.py</span><br><span class="hljs-keyword">from</span> controller_base <span class="hljs-keyword">import</span> BaseController<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DigestLearningController</span>(<span class="hljs-title class_ inherited__">BaseController</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">config_digest</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 启用 digest 报文：从表 learn_t 中上报最多 10 条条目，每隔最久 1 ms</span><br>        <span class="hljs-variable language_">self</span>.controller.digest_enable(<span class="hljs-string">&#x27;learn_t&#x27;</span>, <span class="hljs-number">1000000</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1000000</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">unpack_digest</span>(<span class="hljs-params">self, dig_list</span>):<br>        learning_data = []<br>        <span class="hljs-comment"># 解析 digest message 列表</span><br>        <span class="hljs-keyword">for</span> dig <span class="hljs-keyword">in</span> dig_list.data:<br>            <span class="hljs-comment"># 第一个字段是 MAC 地址（48 位）</span><br>            mac_addr = <span class="hljs-built_in">int</span>.from_bytes(dig.struct.members[<span class="hljs-number">0</span>].bitstring, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br>            <span class="hljs-comment"># 第二个字段是 ingress_port（16 位）</span><br>            ingress_port = <span class="hljs-built_in">int</span>.from_bytes(dig.struct.members[<span class="hljs-number">1</span>].bitstring, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br>            learning_data.append((mac_addr, ingress_port))<br>        <span class="hljs-keyword">return</span> learning_data<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv_msg_digest</span>(<span class="hljs-params">self, dig_list</span>):<br>        <span class="hljs-comment"># 解包 digest 并调用学习函数</span><br>        learning_data = <span class="hljs-variable language_">self</span>.unpack_digest(dig_list)<br>        <span class="hljs-variable language_">self</span>.learn(learning_data)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 启用 digest 上报</span><br>        <span class="hljs-variable language_">self</span>.config_digest()<br>        <span class="hljs-comment"># 不断获取 digest 列表并处理</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            dig_list = <span class="hljs-variable language_">self</span>.controller.get_digest_list()<br>            <span class="hljs-variable language_">self</span>.recv_msg_digest(dig_list)<br><br></code></pre></td></tr></table></figure></li><li><code>network_digest.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> p4utils.mininetlib.network_API <span class="hljs-keyword">import</span> NetworkAPI<br><br>net = NetworkAPI()<br><br><span class="hljs-comment"># Network general options</span><br>net.setLogLevel(<span class="hljs-string">&#x27;info&#x27;</span>)<br>net.setCompiler(p4rt=<span class="hljs-literal">True</span>)<br>net.disableArpTables()<br><br><span class="hljs-comment"># Network definition</span><br>net.addP4RuntimeSwitch(<span class="hljs-string">&#x27;s1&#x27;</span>)<br>net.setP4Source(<span class="hljs-string">&#x27;s1&#x27;</span>,<span class="hljs-string">&#x27;./p4src/l2_learning_digest.p4&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h1&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h2&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h3&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h4&#x27;</span>)<br>net.addLink(<span class="hljs-string">&#x27;s1&#x27;</span>, <span class="hljs-string">&#x27;h1&#x27;</span>)<br>net.addLink(<span class="hljs-string">&#x27;s1&#x27;</span>, <span class="hljs-string">&#x27;h2&#x27;</span>)<br>net.addLink(<span class="hljs-string">&#x27;s1&#x27;</span>, <span class="hljs-string">&#x27;h3&#x27;</span>)<br>net.addLink(<span class="hljs-string">&#x27;s1&#x27;</span>, <span class="hljs-string">&#x27;h4&#x27;</span>)<br><br><span class="hljs-comment"># Assignment strategy</span><br>net.l2()<br><br><span class="hljs-comment"># Nodes general options</span><br>net.enablePcapDumpAll()<br>net.enableLogAll()<br>net.enableCli()<br>net.startNetwork()<br></code></pre></td></tr></table></figure></li></ol><ul><li><h1 id="p4仿真以clone模式为例">P4仿真(以clone模式为例)</h1></li></ul><ol type="1"><li>启动网络拓扑<code>sudo p4run</code></li></ol><figure><img src="/2025/07/30/P4%2005-L2_Learning/2.png" alt="网络拓扑"><figcaption aria-hidden="true">网络拓扑</figcaption></figure><ol start="2" type="1"><li>以clone模式启动S1<code>sudo python l2_learning_controller.py s1 cpu</code></li></ol><figure><img src="/2025/07/30/P4%2005-L2_Learning/3.png" alt="启动s1"><figcaption aria-hidden="true">启动s1</figcaption></figure><ol start="3" type="1"><li>启动<code>pingall</code>命令，发现主机间成功通信</li></ol><figure><img src="/2025/07/30/P4%2005-L2_Learning/4.png" alt="pingall命令"><figcaption aria-hidden="true">pingall命令</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>P4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>P4</tag>
      
      <tag>SDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RL-07 Temporal-Difference Learning</title>
    <link href="/2025/07/29/RL-07%20Temporal-Difference%20Learning/"/>
    <url>/2025/07/29/RL-07%20Temporal-Difference%20Learning/</url>
    
    <content type="html"><![CDATA[<h1 id="rl学习笔记-07-时序差分方法">RL学习笔记-07 时序差分方法</h1><h1 id="声明本笔记是学习b站强化学习的数学原理课程的个人笔记">声明：本笔记是学习B站【强化学习的数学原理】课程的个人笔记</h1><p><img src="/2025/07/29/RL-07%20Temporal-Difference%20Learning/1.jpg"></p><p><img src="/2025/07/29/RL-07%20Temporal-Difference%20Learning/2.jpg"></p><p><img src="/2025/07/29/RL-07%20Temporal-Difference%20Learning/3.jpg"></p><p><img src="/2025/07/29/RL-07%20Temporal-Difference%20Learning/4.jpg"></p><p><img src="/2025/07/29/RL-07%20Temporal-Difference%20Learning/5.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>RL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>RL</tag>
      
      <tag>强化学习</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RL-06 Stochastic Approximation and Stochastic Gradient Descent</title>
    <link href="/2025/07/28/RL-06%20Stochastic%20Approximation%20and%20Stochastic%20Gradient%20Descent/"/>
    <url>/2025/07/28/RL-06%20Stochastic%20Approximation%20and%20Stochastic%20Gradient%20Descent/</url>
    
    <content type="html"><![CDATA[<h1 id="rl学习笔记-06-随机近似与随机梯度下降">RL学习笔记-06随机近似与随机梯度下降</h1><h1 id="声明本笔记是学习b站强化学习的数学原理课程的个人笔记">声明：本笔记是学习B站【强化学习的数学原理】课程的个人笔记</h1><p><img src="/2025/07/28/RL-06%20Stochastic%20Approximation%20and%20Stochastic%20Gradient%20Descent/1.jpg"></p><p><img src="/2025/07/28/RL-06%20Stochastic%20Approximation%20and%20Stochastic%20Gradient%20Descent/2.jpg"></p><p><img src="/2025/07/28/RL-06%20Stochastic%20Approximation%20and%20Stochastic%20Gradient%20Descent/3.jpg"></p><p><img src="/2025/07/28/RL-06%20Stochastic%20Approximation%20and%20Stochastic%20Gradient%20Descent/4.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>RL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>RL</tag>
      
      <tag>强化学习</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P4 04-L2_Flooding</title>
    <link href="/2025/07/28/P4%2004-L2_Flooding/"/>
    <url>/2025/07/28/P4%2004-L2_Flooding/</url>
    
    <content type="html"><![CDATA[<h1 id="p4示例程序-04-l2组播与泛洪">P4示例程序-04 L2组播与泛洪</h1><ul><li><h1 id="功能">功能</h1><p>在L2基本交换机的基础上实现的泛洪与组播，当L2交换机在表中无法查询到MAC地址或目的MAC地址为广播地址时，从各端口泛洪出去</p></li><li><h1 id="拓扑结构">拓扑结构</h1></li></ul><figure><img src="/2025/07/28/P4%2004-L2_Flooding/1.png" alt="拓扑结构"><figcaption aria-hidden="true">拓扑结构</figcaption></figure><ul><li><h1 id="代码">代码</h1></li><li><h3 id="all-port">All Port</h3></li></ul><ol type="1"><li><code>p4app-all-ports.json</code> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;p4_src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;p4src/l2_flooding.p4&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cli&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;pcap_dump&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;enable_log&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>  <br>  <span class="hljs-attr">&quot;topology&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;assignment_strategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;l2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;auto_arp_tables&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;links&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h4&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;h1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;h2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;h3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;h4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;switches&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;s1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;cli_input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;s1-commands-all-ports.txt&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li>Headers <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">9</span>&gt;  egressSpec_t; <span class="hljs-comment">// 定义 egressSpec_t 类型，9 位，用于指定输出端口</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">48</span>&gt; macAddr_t; <span class="hljs-comment">// 定义 macAddr_t 类型，48 位，用于表示 MAC 地址</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">32</span>&gt; ip4Addr_t; <span class="hljs-comment">// 定义 ip4Addr_t 类型，32 位，用于表示 IPv4 地址</span><br><br>header <span class="hljs-type">ethernet_t</span> &#123; <span class="hljs-comment">// 定义以太网头部 ethernet_t</span><br>    macAddr_t dstAddr; <span class="hljs-comment">// 目的 MAC 地址</span><br>    macAddr_t srcAddr; <span class="hljs-comment">// 源 MAC 地址</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   etherType; <span class="hljs-comment">// 协议类型字段</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">metadata</span> &#123;</span> <span class="hljs-comment">// 定义元数据结构</span><br>    <span class="hljs-comment">/* empty */</span> <span class="hljs-comment">// 当前为空，后续可扩展</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">headers</span> &#123;</span> <span class="hljs-comment">// 定义 headers 结构</span><br>    <span class="hljs-type">ethernet_t</span>   ethernet; <span class="hljs-comment">// 包含一个以太网头部</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C">parser <span class="hljs-title function_">MyParser</span><span class="hljs-params">(packet_in packet, <span class="hljs-comment">// 解析器 MyParser，输入报文 packet</span></span><br><span class="hljs-params">                out headers hdr, <span class="hljs-comment">// 输出解析后的头部 hdr</span></span><br><span class="hljs-params">                inout metadata meta, <span class="hljs-comment">// 输入输出元数据</span></span><br><span class="hljs-params">                inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123; <span class="hljs-comment">// 标准元数据</span><br>    state start &#123; <span class="hljs-comment">// 起始状态</span><br>        packet.extract(hdr.ethernet); <span class="hljs-comment">// 提取以太网头部</span><br>        transition accept; <span class="hljs-comment">// 解析完成，跳转 accept</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Verification <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyVerifyChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>    apply &#123;  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Ingress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyIngress</span><span class="hljs-params">(inout headers hdr, <span class="hljs-comment">// 入方向处理</span></span><br><span class="hljs-params">                  inout metadata meta,</span><br><span class="hljs-params">                  inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br>    action <span class="hljs-title function_">drop</span><span class="hljs-params">()</span> &#123; mark_to_drop(standard_metadata); &#125; <span class="hljs-comment">// 丢弃报文</span><br>    action <span class="hljs-title function_">forward</span><span class="hljs-params">(bit&lt;<span class="hljs-number">9</span>&gt; egress_port)</span> &#123; standard_metadata.egress_spec = egress_port; &#125; <span class="hljs-comment">// 转发到指定端口</span><br>    action <span class="hljs-title function_">broadcast</span><span class="hljs-params">()</span> &#123; standard_metadata.mcast_grp = <span class="hljs-number">1</span>; &#125; <span class="hljs-comment">// 设置多播组 ID=1，实现广播</span><br><br>    table dmac &#123; <span class="hljs-comment">// 定义 dmac 表</span><br>        key = &#123; hdr.ethernet.dstAddr: exact; &#125; <span class="hljs-comment">// 匹配目的 MAC，精确匹配</span><br>        actions = &#123; forward; broadcast; NoAction; &#125; <span class="hljs-comment">// 表可执行的动作</span><br>        size = <span class="hljs-number">256</span>; <span class="hljs-comment">// 表容量 256</span><br>        default_action = NoAction; <span class="hljs-comment">// 默认 NoAction</span><br>    &#125;<br><br>    apply &#123; dmac.apply(); &#125; <span class="hljs-comment">// 应用 dmac 表</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Egress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyEgress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                 inout metadata meta,</span><br><span class="hljs-params">                 inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br>    apply &#123; &#125; <span class="hljs-comment">// 出方向处理，此处为空</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Computation <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyComputeChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>     apply &#123; &#125; <span class="hljs-comment">// 校验和计算，此处为空</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>DE parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyDeparser</span><span class="hljs-params">(packet_out packet, in headers hdr)</span> &#123;<br>    apply &#123;<br>        packet.emit(hdr.ethernet); <span class="hljs-comment">// 输出以太网头部</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Switch <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C">V1Switch(<br>MyParser(),<br>MyVerifyChecksum(),<br>MyIngress(),<br>MyEgress(),<br>MyComputeChecksum(),<br>MyDeparser()<br>) main;<br></code></pre></td></tr></table></figure></li><li><code>s1-commands-all-ports.txt</code> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">table_add dmac forward 00:00:0a:00:00:01 =&gt; 1<br>table_add dmac forward 00:00:0a:00:00:02 =&gt; 2<br>table_add dmac forward 00:00:0a:00:00:03 =&gt; 3<br>table_add dmac forward 00:00:0a:00:00:04 =&gt; 4<br>table_set_default dmac broadcast<br><br>mc_mgrp_create 1<br>mc_node_create 0 1 2 3 4<br>mc_node_associate 1 0<br><br></code></pre></td></tr></table></figure></li><li><code>controller-all-ports.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> p4utils.utils.helper <span class="hljs-keyword">import</span> load_topo<br><span class="hljs-keyword">from</span> p4utils.utils.sswitch_p4runtime_API <span class="hljs-keyword">import</span> SimpleSwitchP4RuntimeAPI<br><br><br>topo = load_topo(<span class="hljs-string">&#x27;topology.json&#x27;</span>)<br>controllers = &#123;&#125;<br>sw_name = <span class="hljs-string">&#x27;s1&#x27;</span><br><br><span class="hljs-keyword">for</span> switch, data <span class="hljs-keyword">in</span> topo.get_p4rtswitches().items():<br>    controllers[switch] = SimpleSwitchP4RuntimeAPI(data[<span class="hljs-string">&#x27;device_id&#x27;</span>], data[<span class="hljs-string">&#x27;grpc_port&#x27;</span>],<br>                                                   p4rt_path=data[<span class="hljs-string">&#x27;p4rt_path&#x27;</span>],<br>                                                   json_path=data[<span class="hljs-string">&#x27;json_path&#x27;</span>])<br><br>controller = controllers[sw_name]<br><br><span class="hljs-comment"># Populate table dmac</span><br>controller.table_add(<span class="hljs-string">&quot;dmac&quot;</span>, <span class="hljs-string">&quot;forward&quot;</span>, [<span class="hljs-string">&#x27;00:00:0a:00:00:01&#x27;</span>], [<span class="hljs-string">&#x27;1&#x27;</span>])<br>controller.table_add(<span class="hljs-string">&quot;dmac&quot;</span>, <span class="hljs-string">&quot;forward&quot;</span>, [<span class="hljs-string">&#x27;00:00:0a:00:00:02&#x27;</span>], [<span class="hljs-string">&#x27;2&#x27;</span>])<br>controller.table_add(<span class="hljs-string">&quot;dmac&quot;</span>, <span class="hljs-string">&quot;forward&quot;</span>, [<span class="hljs-string">&#x27;00:00:0a:00:00:03&#x27;</span>], [<span class="hljs-string">&#x27;3&#x27;</span>])<br>controller.table_add(<span class="hljs-string">&quot;dmac&quot;</span>, <span class="hljs-string">&quot;forward&quot;</span>, [<span class="hljs-string">&#x27;00:00:0a:00:00:04&#x27;</span>], [<span class="hljs-string">&#x27;4&#x27;</span>])<br>controller.table_set_default(<span class="hljs-string">&quot;dmac&quot;</span>, <span class="hljs-string">&quot;broadcast&quot;</span>, [])<br><br><span class="hljs-comment"># Get port list</span><br>interfaces_to_port = topo.get_node_intfs(fields=[<span class="hljs-string">&#x27;port&#x27;</span>])[sw_name].copy()<br><span class="hljs-comment"># Filter lo and cpu port</span><br>interfaces_to_port.pop(<span class="hljs-string">&#x27;lo&#x27;</span>, <span class="hljs-literal">None</span>)<br>interfaces_to_port.pop(topo.get_cpu_port_intf(sw_name), <span class="hljs-literal">None</span>)<br>port_list = <span class="hljs-built_in">list</span>(interfaces_to_port.values())<br><br><span class="hljs-comment"># Add broadcast group</span><br>controller.mc_mgrp_create(<span class="hljs-number">1</span>, port_list)<br></code></pre></td></tr></table></figure></li></ol><ul><li><h3 id="other-port">Other Port</h3></li></ul><ol type="1"><li><code>p4app-other-ports.json</code> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;p4_src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;p4src/l2_flooding.p4&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cli&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;pcap_dump&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;enable_log&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>  <br>  <span class="hljs-attr">&quot;topology&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;assignment_strategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;l2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;auto_arp_tables&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;links&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h4&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;h1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;h2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;h3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;h4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;switches&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;s1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;cli_input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;s1-commands-other-ports.txt&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li>Headers <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">9</span>&gt;  egressSpec_t; <span class="hljs-comment">// 定义 9 位输出端口类型</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">48</span>&gt; macAddr_t; <span class="hljs-comment">// 定义 48 位 MAC 地址类型</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">32</span>&gt; ip4Addr_t; <span class="hljs-comment">// 定义 32 位 IPv4 地址类型</span><br><br>header <span class="hljs-type">ethernet_t</span> &#123; <span class="hljs-comment">// 定义以太网头部</span><br>    macAddr_t dstAddr; <span class="hljs-comment">// 目的 MAC 地址</span><br>    macAddr_t srcAddr; <span class="hljs-comment">// 源 MAC 地址</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   etherType; <span class="hljs-comment">// 以太类型字段</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">metadata</span> &#123;</span> <span class="hljs-comment">// 定义元数据结构</span><br>    <span class="hljs-comment">/* empty */</span> <span class="hljs-comment">// 当前为空</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">headers</span> &#123;</span> <span class="hljs-comment">// 定义头部集合</span><br>    <span class="hljs-type">ethernet_t</span>   ethernet; <span class="hljs-comment">// 包含以太网头部</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C">parser <span class="hljs-title function_">MyParser</span><span class="hljs-params">(packet_in packet, <span class="hljs-comment">// 定义解析器，输入为 packet</span></span><br><span class="hljs-params">                out headers hdr, <span class="hljs-comment">// 输出解析的头部 hdr</span></span><br><span class="hljs-params">                inout metadata meta, <span class="hljs-comment">// 输入输出元数据</span></span><br><span class="hljs-params">                inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123; <span class="hljs-comment">// 标准元数据</span><br><br>    state start &#123; <span class="hljs-comment">// 解析器起始状态</span><br>        packet.extract(hdr.ethernet); <span class="hljs-comment">// 从报文中提取以太网头部</span><br>        transition accept; <span class="hljs-comment">// 跳转到 accept 状态，解析结束</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Verification <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyVerifyChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>    apply &#123;  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Ingress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyIngress</span><span class="hljs-params">(inout headers hdr, <span class="hljs-comment">// 入方向处理控制块</span></span><br><span class="hljs-params">                  inout metadata meta,</span><br><span class="hljs-params">                  inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    action <span class="hljs-title function_">drop</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 定义丢弃动作</span><br>        mark_to_drop(standard_metadata); <span class="hljs-comment">// 标记丢弃报文</span><br>    &#125;<br><br>    action <span class="hljs-title function_">forward</span><span class="hljs-params">(bit&lt;<span class="hljs-number">9</span>&gt; egress_port)</span> &#123; <span class="hljs-comment">// 定义转发动作</span><br>        standard_metadata.egress_spec = egress_port; <span class="hljs-comment">// 设置输出端口</span><br>    &#125;<br><br>    action <span class="hljs-title function_">broadcast</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 定义广播动作</span><br>        <span class="hljs-comment">//Empty action that was not necessary, we just call it when there is a table miss // 该动作为空，仅在表项未命中时调用</span><br>    &#125;<br><br>    table dmac &#123; <span class="hljs-comment">// 定义 dmac 表，用于目的 MAC 匹配</span><br>        key = &#123;<br>            hdr.ethernet.dstAddr: exact; <span class="hljs-comment">// 精确匹配目的 MAC 地址</span><br>        &#125;<br><br>        actions = &#123;<br>            forward; <span class="hljs-comment">// 转发动作</span><br>            broadcast; <span class="hljs-comment">// 广播动作</span><br>            NoAction; <span class="hljs-comment">// 无动作</span><br>        &#125;<br>        size = <span class="hljs-number">256</span>; <span class="hljs-comment">// 表大小 256 项</span><br>        default_action = NoAction; <span class="hljs-comment">// 默认 NoAction</span><br>    &#125;<br><br>    action <span class="hljs-title function_">set_mcast_grp</span><span class="hljs-params">(bit&lt;<span class="hljs-number">16</span>&gt; mcast_grp)</span> &#123; <span class="hljs-comment">// 定义设置多播组动作</span><br>        standard_metadata.mcast_grp = mcast_grp; <span class="hljs-comment">// 设置多播组 ID</span><br>    &#125;<br><br>    table select_mcast_grp &#123; <span class="hljs-comment">// 定义 select_mcast_grp 表，根据 ingress_port 选择多播组</span><br><br>        key = &#123;<br>            standard_metadata.ingress_port : exact; <span class="hljs-comment">// 匹配入口端口</span><br>        &#125;<br>        actions = &#123;<br>            set_mcast_grp; <span class="hljs-comment">// 设置多播组动作</span><br>            NoAction; <span class="hljs-comment">// 无动作</span><br>        &#125;<br>        size = <span class="hljs-number">32</span>; <span class="hljs-comment">// 表大小 32</span><br>        default_action =  NoAction; <span class="hljs-comment">// 默认 NoAction</span><br><br>    &#125;<br><br>    apply &#123;<br><br>        <span class="hljs-keyword">switch</span> (dmac.apply().action_run) &#123; <span class="hljs-comment">// 根据 dmac 表执行的动作结果分支</span><br>            broadcast: &#123;<br>                select_mcast_grp.apply(); <span class="hljs-comment">// 如果动作是 broadcast，则执行 select_mcast_grp 表</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">/* Alternative Solution (even easier) // 另一种更简单的解决方案</span><br><span class="hljs-comment">        if (dmac.apply().hit)&#123; // 如果 dmac 表命中</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        else &#123;</span><br><span class="hljs-comment">            select_mcast_grp.apply(); // 未命中则应用 select_mcast_grp 表</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        End of Alternative solution // 另一种解决方案结束</span><br><span class="hljs-comment">        */</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Egress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyEgress</span><span class="hljs-params">(inout headers hdr, <span class="hljs-comment">// 出方向处理控制块</span></span><br><span class="hljs-params">                 inout metadata meta,</span><br><span class="hljs-params">                 inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    apply &#123;  <br>    &#125; <span class="hljs-comment">// 当前为空</span><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>Checksum Computation <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyComputeChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>     apply &#123;<br>    &#125; <span class="hljs-comment">// 当前为空</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>DE parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyDeparser</span><span class="hljs-params">(packet_out packet, in headers hdr)</span> &#123;<br>    apply &#123;<br>        <span class="hljs-comment">// 解析的头部需要重新封装回报文</span><br>        packet.emit(hdr.ethernet); <span class="hljs-comment">// 输出以太网头部</span><br>    &#125;<br></code></pre></td></tr></table></figure></li><li>Switch <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C">V1Switch(<br>MyParser(),<br>MyVerifyChecksum(),<br>MyIngress(),<br>MyEgress(),<br>MyComputeChecksum(),<br>MyDeparser()<br>) main;<br></code></pre></td></tr></table></figure></li><li><code>s1-commands-other-ports.txt</code> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs text">table_add dmac forward 00:00:0a:00:00:01 =&gt; 1<br>table_add dmac forward 00:00:0a:00:00:02 =&gt; 2<br>table_add dmac forward 00:00:0a:00:00:03 =&gt; 3<br>table_add dmac forward 00:00:0a:00:00:04 =&gt; 4<br>table_set_default dmac broadcast<br><br>#define broadcasting port groups<br>mc_node_create 0 2 3 4<br>mc_node_create 1 1 3 4<br>mc_node_create 2 1 2 4<br>mc_node_create 3 1 2 3<br><br>#associate node group with mcast group<br>mc_mgrp_create 1<br>mc_node_associate 1 0<br><br>mc_mgrp_create 2<br>mc_node_associate 2 1<br><br>mc_mgrp_create 3<br>mc_node_associate 3 2<br><br>mc_mgrp_create 4<br>mc_node_associate 4 3<br><br>#fill table selector<br>table_add select_mcast_grp set_mcast_grp 1 =&gt; 1<br>table_add select_mcast_grp set_mcast_grp 2 =&gt; 2<br>table_add select_mcast_grp set_mcast_grp 3 =&gt; 3<br>table_add select_mcast_grp set_mcast_grp 4 =&gt; 4<br><br></code></pre></td></tr></table></figure></li><li><code>controller-other-ports.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> p4utils.mininetlib.network_API <span class="hljs-keyword">import</span> NetworkAPI<br><br>net = NetworkAPI()<br><br><span class="hljs-comment"># Network general options</span><br>net.setLogLevel(<span class="hljs-string">&#x27;info&#x27;</span>)<br>net.setCompiler(p4rt=<span class="hljs-literal">True</span>)<br>net.execScript(<span class="hljs-string">&#x27;python controller-other-ports.py&#x27;</span>, reboot=<span class="hljs-literal">True</span>)<br>net.disableArpTables()<br><br><span class="hljs-comment"># Network definition</span><br>net.addP4RuntimeSwitch(<span class="hljs-string">&#x27;s1&#x27;</span>)<br>net.setP4Source(<span class="hljs-string">&#x27;s1&#x27;</span>,<span class="hljs-string">&#x27;./p4src/l2_flooding_other_ports.p4&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h1&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h2&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h3&#x27;</span>)<br>net.addHost(<span class="hljs-string">&#x27;h4&#x27;</span>)<br>net.addLink(<span class="hljs-string">&#x27;s1&#x27;</span>, <span class="hljs-string">&#x27;h1&#x27;</span>)<br>net.addLink(<span class="hljs-string">&#x27;s1&#x27;</span>, <span class="hljs-string">&#x27;h2&#x27;</span>)<br>net.addLink(<span class="hljs-string">&#x27;s1&#x27;</span>, <span class="hljs-string">&#x27;h3&#x27;</span>)<br>net.addLink(<span class="hljs-string">&#x27;s1&#x27;</span>, <span class="hljs-string">&#x27;h4&#x27;</span>)<br><br><span class="hljs-comment"># Assignment strategy</span><br>net.l2()<br><br><span class="hljs-comment"># Nodes general options</span><br>net.enablePcapDumpAll()<br>net.enableLogAll()<br>net.enableCli()<br>net.startNetwork()<br></code></pre></td></tr></table></figure></li></ol><ul><li><h1 id="p4仿真以other-port为例">P4仿真(以other-port为例)</h1></li></ul><ol type="1"><li>建立配置匹配表<code>s1-commands-other-ports.txt</code></li></ol><figure><img src="/2025/07/28/P4%2004-L2_Flooding/2.png" alt="建立配置表"><figcaption aria-hidden="true">建立配置表</figcaption></figure><ol start="2" type="1"><li>启动网络拓扑</li></ol><figure><img src="/2025/07/28/P4%2004-L2_Flooding/3.png" alt="启动网络拓扑"><figcaption aria-hidden="true">启动网络拓扑</figcaption></figure><ol start="3" type="1"><li>Ping操作前，由于各主机没有被自动配置ARP表，因此各主机的ARP表为空</li></ol><figure><img src="/2025/07/28/P4%2004-L2_Flooding/4.png" alt="ping操作前"><figcaption aria-hidden="true">ping操作前</figcaption></figure><ol start="4" type="1"><li>Ping操作后，各主机学习到ARP表，表明交换机的泛洪操作生效且正确</li></ol><figure><img src="/2025/07/28/P4%2004-L2_Flooding/5.png" alt="ping操作后"><figcaption aria-hidden="true">ping操作后</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>P4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>P4</tag>
      
      <tag>SDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RL-05 Monte Carlo Learning</title>
    <link href="/2025/07/27/RL-05%20Monte%20Carlo%20Learning/"/>
    <url>/2025/07/27/RL-05%20Monte%20Carlo%20Learning/</url>
    
    <content type="html"><![CDATA[<h1 id="rl学习笔记-05-蒙特卡洛方法">RL学习笔记-05 蒙特卡洛方法</h1><h1 id="声明本笔记是学习b站强化学习的数学原理课程的个人笔记">声明：本笔记是学习B站【强化学习的数学原理】课程的个人笔记</h1><p><img src="/2025/07/27/RL-05%20Monte%20Carlo%20Learning/1.jpg"></p><p><img src="/2025/07/27/RL-05%20Monte%20Carlo%20Learning/2.jpg"></p><p><img src="/2025/07/27/RL-05%20Monte%20Carlo%20Learning/3.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>RL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>RL</tag>
      
      <tag>强化学习</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P4 03-L2_Basic_Forwarding</title>
    <link href="/2025/07/25/P4%2003-L2_Basic_Forwarding/"/>
    <url>/2025/07/25/P4%2003-L2_Basic_Forwarding/</url>
    
    <content type="html"><![CDATA[<h1 id="p4示例程序-03-l2基本交换机">P4示例程序-03 L2基本交换机</h1><h1 id="功能交换机根据mac地址查表确定转发出端口">功能：交换机根据MAC地址查表、确定转发出端口</h1><h1 id="拓扑结构">拓扑结构</h1><figure><img src="/2025/07/25/P4%2003-L2_Basic_Forwarding/1.png" alt="拓扑结构"><figcaption aria-hidden="true">拓扑结构</figcaption></figure><h1 id="代码">代码</h1><ol type="1"><li><code>p4app.json</code>的拓扑结构 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;topology&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;assignment_strategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;l2&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;links&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h4&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;h1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;h2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;h3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;h4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;switches&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;s1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;cli_input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;s1-commands.txt&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li>原代码 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* -*- P4_16 -*- */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;core.p4&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;v1model.p4&gt;</span></span><br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">*********************** H E A D E R S  ***********************************</span><br><span class="hljs-comment">*************************************************************************/</span><br><span class="hljs-comment">//TODO 1: Define ethernet header, metadata and headers struct</span><br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">*********************** P A R S E R  ***********************************</span><br><span class="hljs-comment">*************************************************************************/</span><br>parser <span class="hljs-title function_">MyParser</span><span class="hljs-params">(packet_in packet,</span><br><span class="hljs-params">                out headers hdr,</span><br><span class="hljs-params">                inout metadata meta,</span><br><span class="hljs-params">                inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br>    state start &#123;<br>        <span class="hljs-comment">//TODO 2: parse ethernet header</span><br>        transition accept;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">************   C H E C K S U M    V E R I F I C A T I O N   *************</span><br><span class="hljs-comment">*************************************************************************/</span><br>control <span class="hljs-title function_">MyVerifyChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>    apply &#123;  &#125;<br>&#125;<br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">**************  I N G R E S S   P R O C E S S I N G   *******************</span><br><span class="hljs-comment">*************************************************************************/</span><br>control <span class="hljs-title function_">MyIngress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                  inout metadata meta,</span><br><span class="hljs-params">                  inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br>    action <span class="hljs-title function_">drop</span><span class="hljs-params">()</span> &#123;<br><br>        mark_to_drop(standard_metadata);<br>    &#125;<br>    <span class="hljs-comment">//TODO 4: define an action to set the egress port</span><br>    <span class="hljs-comment">//TODO 3: define a l2 forwarding table and define a match to set the egress port</span><br>    apply &#123;<br>        <span class="hljs-comment">//TODO 5: call the forwarding table</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">****************  E G R E S S   P R O C E S S I N G   *******************</span><br><span class="hljs-comment">*************************************************************************/</span><br>control <span class="hljs-title function_">MyEgress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                 inout metadata meta,</span><br><span class="hljs-params">                 inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br>    apply &#123;  &#125;<br>&#125;<br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">*************   C H E C K S U M    C O M P U T A T I O N   **************</span><br><span class="hljs-comment">*************************************************************************/</span><br>control <span class="hljs-title function_">MyComputeChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>     apply &#123;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">***********************  D E P A R S E R  *******************************</span><br><span class="hljs-comment">*************************************************************************/</span><br><br>control <span class="hljs-title function_">MyDeparser</span><span class="hljs-params">(packet_out packet, in headers hdr)</span> &#123;<br>    apply &#123;<br>        <span class="hljs-comment">//TODO 6: deparse ethernet header</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">***********************  S W I T C H  *******************************</span><br><span class="hljs-comment">*************************************************************************/</span><br><span class="hljs-comment">//switch architecture</span><br>V1Switch(<br>MyParser(),<br>MyVerifyChecksum(),<br>MyIngress(),<br>MyEgress(),<br>MyComputeChecksum(),<br>MyDeparser()<br>) main;<br></code></pre></td></tr></table></figure></li><li>Headers <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">9</span>&gt;  egressSpec_t;<span class="hljs-comment">// 定义 egress 端口类型，占 9 位</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">48</span>&gt; macAddr_t;<span class="hljs-comment">// 定义 MAC 地址类型，占 48 位</span><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">32</span>&gt; ip4Addr_t;<span class="hljs-comment">// 定义 IPv4 地址类型，占 32 位</span><br><br>header <span class="hljs-type">ethernet_t</span> &#123;<span class="hljs-comment">// 定义以太网头部</span><br>    macAddr_t dstAddr;<span class="hljs-comment">// 目的 MAC 地址</span><br>    macAddr_t srcAddr;<span class="hljs-comment">// 源 MAC 地址</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   etherType;<span class="hljs-comment">// 以太网类型字段</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">metadata</span> &#123;</span> <span class="hljs-comment">// 自定义元数据结构</span><br>    <span class="hljs-comment">/* empty */</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">headers</span> &#123;</span><span class="hljs-comment">// 定义所有需要用到的头部</span><br>    <span class="hljs-type">ethernet_t</span>   ethernet;<span class="hljs-comment">// 只包含一个以太网头部</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C">parser <span class="hljs-title function_">MyParser</span><span class="hljs-params">(packet_in packet,<span class="hljs-comment">// 输入原始数据包</span></span><br><span class="hljs-params">                out headers hdr,<span class="hljs-comment">// 输出解析后的头部</span></span><br><span class="hljs-params">                inout metadata meta,<span class="hljs-comment">// 输入输出元数据</span></span><br><span class="hljs-params">                inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<span class="hljs-comment">// 输入输出标准元数据</span><br><br>    state start &#123;<span class="hljs-comment">// 起始解析状态</span><br>        packet.extract(hdr.ethernet);<span class="hljs-comment">// 提取以太网头部</span><br>        transition accept;<span class="hljs-comment">// 进入解析完成状态</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Verification <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyVerifyChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>    apply &#123;  &#125;                                <br>&#125;<br></code></pre></td></tr></table></figure></li><li>Ingress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyIngress</span><span class="hljs-params">(inout headers hdr,<span class="hljs-comment">// 输入：头部</span></span><br><span class="hljs-params">                  inout metadata meta,<span class="hljs-comment">// 输入输出：元数据</span></span><br><span class="hljs-params">                  inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123; <span class="hljs-comment">// 输入输出：标准元数据</span><br><br>    action <span class="hljs-title function_">drop</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">// 丢弃数据包的动作</span><br>        mark_to_drop(standard_metadata);<span class="hljs-comment">// 设置为丢弃状态</span><br>    &#125;<br><br>    action <span class="hljs-title function_">forward</span><span class="hljs-params">(bit&lt;<span class="hljs-number">9</span>&gt; egress_port)</span> &#123;<span class="hljs-comment">// 转发动作，参数为输出端口</span><br>        standard_metadata.egress_spec = egress_port;<span class="hljs-comment">// 设置出口端口</span><br>    &#125;<br><br>    table dmac &#123;<span class="hljs-comment">// dmac 表：匹配目的 MAC</span><br>        key = &#123;<br>            hdr.ethernet.dstAddr: exact;<span class="hljs-comment">// 精确匹配目的 MAC 地址</span><br>        &#125;<br><br>        actions = &#123;<br>            forward;<span class="hljs-comment">// 命中则执行 forward 动作</span><br>            NoAction;<span class="hljs-comment">// 不命中则什么都不做</span><br>        &#125;<br>        size = <span class="hljs-number">256</span>;<span class="hljs-comment">// 表项容量最大为 256</span><br>        default_action = NoAction;<span class="hljs-comment">// 默认动作为不做处理</span><br>    &#125;<br><br>    apply &#123;<span class="hljs-comment">// 入口处理的 apply 区块</span><br>        dmac.apply();<span class="hljs-comment">// 应用 dmac 表进行转发决策</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Egress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyEgress</span><span class="hljs-params">(inout headers hdr,<span class="hljs-comment">// 输出：头部</span></span><br><span class="hljs-params">                 inout metadata meta,<span class="hljs-comment">// 输出：元数据</span></span><br><span class="hljs-params">                 inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    apply &#123; &#125;<span class="hljs-comment">// 此处不进行出口处理</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Computation <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyComputeChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>    apply &#123; &#125;                                             <br>&#125;<br></code></pre></td></tr></table></figure></li><li>DE parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C">control <span class="hljs-title function_">MyDeparser</span><span class="hljs-params">(packet_out packet, in headers hdr)</span> &#123;<br>    apply &#123;<br>        <span class="hljs-comment">// 将头部重新打包到输出数据包中</span><br>        packet.emit(hdr.ethernet);<span class="hljs-comment">// 输出以太网头部</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Switch <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C">V1Switch(<br>    MyParser(),<br>    MyVerifyChecksum(),<br>    MyIngress(),<br>    MyEgress(),<br>    MyComputeChecksum(),<br>    MyDeparser()<br>) main;<br></code></pre></td></tr></table></figure></li><li><code>s1-commands.txt</code> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">table_add dmac forward 00:00:0a:00:00:01 =&gt; 1<br>table_add dmac forward 00:00:0a:00:00:02 =&gt; 2<br>table_add dmac forward 00:00:0a:00:00:03 =&gt; 3<br>table_add dmac forward 00:00:0a:00:00:04 =&gt; 4<br></code></pre></td></tr></table></figure></li><li><code>controller.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> p4utils.utils.helper <span class="hljs-keyword">import</span> load_topo<br><span class="hljs-keyword">from</span> p4utils.utils.sswitch_p4runtime_API <span class="hljs-keyword">import</span> SimpleSwitchP4RuntimeAPI<br><br>topo = load_topo(<span class="hljs-string">&#x27;topology.json&#x27;</span>)<br>controllers = &#123;&#125;<br><br><span class="hljs-keyword">for</span> switch, data <span class="hljs-keyword">in</span> topo.get_p4rtswitches().items():<br>    controllers[switch] = SimpleSwitchP4RuntimeAPI(data[<span class="hljs-string">&#x27;device_id&#x27;</span>],data[<span class="hljs-string">&#x27;grpc_port&#x27;</span>],p4rt_path=data[<span class="hljs-string">&#x27;p4rt_path&#x27;</span>],json_path=data[<span class="hljs-string">&#x27;json_path&#x27;</span>])<br><br>controller = controllers[<span class="hljs-string">&#x27;s1&#x27;</span>]                        <br><br>controller.table_add(<span class="hljs-string">&#x27;dmac&#x27;</span>, <span class="hljs-string">&#x27;forward&#x27;</span>, [<span class="hljs-string">&#x27;00:00:0a:00:00:01&#x27;</span>], [<span class="hljs-string">&#x27;1&#x27;</span>])<br>controller.table_add(<span class="hljs-string">&#x27;dmac&#x27;</span>, <span class="hljs-string">&#x27;forward&#x27;</span>, [<span class="hljs-string">&#x27;00:00:0a:00:00:02&#x27;</span>], [<span class="hljs-string">&#x27;2&#x27;</span>])<br>controller.table_add(<span class="hljs-string">&#x27;dmac&#x27;</span>, <span class="hljs-string">&#x27;forward&#x27;</span>, [<span class="hljs-string">&#x27;00:00:0a:00:00:03&#x27;</span>], [<span class="hljs-string">&#x27;3&#x27;</span>])<br>controller.table_add(<span class="hljs-string">&#x27;dmac&#x27;</span>, <span class="hljs-string">&#x27;forward&#x27;</span>, [<span class="hljs-string">&#x27;00:00:0a:00:00:04&#x27;</span>], [<span class="hljs-string">&#x27;4&#x27;</span>])<br></code></pre></td></tr></table></figure></li></ol><h1 id="p4仿真">P4仿真</h1><ul><li>启动网络拓扑 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> p4run<br></code></pre></td></tr></table></figure></li></ul><figure><img src="/2025/07/25/P4%2003-L2_Basic_Forwarding/2.png" alt="网络拓扑"><figcaption aria-hidden="true">网络拓扑</figcaption></figure><ul><li>使用<code>pingall</code>命令探测主机之间是否连接正常</li></ul><figure><img src="/2025/07/25/P4%2003-L2_Basic_Forwarding/3.png" alt="pingall命令"><figcaption aria-hidden="true">pingall命令</figcaption></figure><ul><li>连接正常，实验完成</li></ul>]]></content>
    
    
    <categories>
      
      <category>P4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>P4</tag>
      
      <tag>SDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P4 02-Repeater</title>
    <link href="/2025/07/23/P4%2002-Repeater/"/>
    <url>/2025/07/23/P4%2002-Repeater/</url>
    
    <content type="html"><![CDATA[<h1 id="p4示例程序-02-中继器">P4示例程序-02 中继器</h1><h1 id="功能实现了简单的双端口交换机使得两个主机能够进行通信即类似于中继器的功能">功能：实现了简单的双端口交换机，使得两个主机能够进行通信，即类似于中继器的功能</h1><h1 id="拓扑结构">拓扑结构</h1><figure><img src="/2025/07/23/P4%2002-Repeater/1.png" alt="拓扑结构"><figcaption aria-hidden="true">拓扑结构</figcaption></figure><h1 id="代码">代码</h1><ol type="1"><li><code>p4app.json</code>的拓扑结构 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;topology&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;assignment_strategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;l2&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;links&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;h1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;h2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;switches&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;s1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span>  <br></code></pre></td></tr></table></figure></li><li>原代码 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* -*- P4_16 -*- */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;core.p4&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;v1model.p4&gt;</span></span><br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*********************** H E A D E R S  ***********************************</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*************************************************************************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">metadata</span> &#123;</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">headers</span> &#123;</span><br>&#125;<br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*********************** P A R S E R  ***********************************</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*************************************************************************/</span><br>parser <span class="hljs-title function_">MyParser</span><span class="hljs-params">(packet_in packet,</span><br><span class="hljs-params">                out headers hdr,</span><br><span class="hljs-params">                inout metadata meta,</span><br><span class="hljs-params">                inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br>      state start&#123;<br>          transition accept;<br>      &#125;<br>&#125;<br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">************   C H E C K S U M    V E R I F I C A T I O N   *************</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*************************************************************************/</span><br>control <span class="hljs-title function_">MyVerifyChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>    apply &#123;  &#125;<br>&#125;<br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">**************  I N G R E S S   P R O C E S S I N G   *******************</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*************************************************************************/</span><br>control <span class="hljs-title function_">MyIngress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                  inout metadata meta,</span><br><span class="hljs-params">                  inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br>    <span class="hljs-comment">/* TODO 1: For solution 2 -&gt; define a table that matches standard_metadata.ingress_port */</span><br>    <span class="hljs-comment">/* TODO 2: For solution 2 -&gt; define an action that modifies the egress_port */</span><br>    apply &#123;<br>        <span class="hljs-comment">/* TODO 3:*/</span><br>        <span class="hljs-comment">/* Solution 1: Without tables, write the algorithm directly here*/</span><br>        <span class="hljs-comment">/* Solution 2: Apply the table you use */</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">****************  E G R E S S   P R O C E S S I N G   *******************</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*************************************************************************/</span><br>control <span class="hljs-title function_">MyEgress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                 inout metadata meta,</span><br><span class="hljs-params">                 inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br>    apply &#123;  &#125;<br>&#125;<br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*************   C H E C K S U M    C O M P U T A T I O N   **************</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*************************************************************************/</span><br>control <span class="hljs-title function_">MyComputeChecksum</span><span class="hljs-params">(inout headers  hdr, inout metadata meta)</span> &#123;<br>    apply &#123; &#125;<br>&#125;<br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">***********************  D E P A R S E R  *******************************</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*************************************************************************/</span><br>control <span class="hljs-title function_">MyDeparser</span><span class="hljs-params">(packet_out packet, in headers hdr)</span> &#123;<br>    apply &#123;<br>    <span class="hljs-comment">/* Deparser not needed */</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">***********************  S W I T C H  *******************************</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*************************************************************************/</span><br>V1Switch(<br>MyParser(),<br>MyVerifyChecksum(),<br>MyIngress(),<br>MyEgress(),<br>MyComputeChecksum(),<br>MyDeparser()<br>) main;<br></code></pre></td></tr></table></figure></li><li>Solution 1 静态配置方案 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// solution 1</span><br>control <span class="hljs-title function_">MyIngress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                  inout metadata meta,</span><br><span class="hljs-params">                  inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    apply &#123;<br><br>        <span class="hljs-comment">// 如果入口是 1 号端口 =&gt; 从 2 号端口发出</span><br>        <span class="hljs-keyword">if</span> (standard_metadata.ingress_port == <span class="hljs-number">1</span>)&#123;<br>            standard_metadata.egress_spec = <span class="hljs-number">2</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果入口是 2 号端口 =&gt; 从 1 号端口发出</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (standard_metadata.ingress_port == <span class="hljs-number">2</span>)&#123;<br>            standard_metadata.egress_spec = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>ingress_port</code>：数据包的入端口，解析之前设置，只读</li><li><code>egress_spec</code>：在入端口流水线的匹配-动作过程之后设置，指定数据包出端口，可以是物理端口、逻辑端口或者多播组</li></ul><ol start="5" type="1"><li>Solution 2 基于表的配置方案 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">control <span class="hljs-title function_">MyIngress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                  inout metadata meta,</span><br><span class="hljs-params">                  inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    <span class="hljs-comment">// 定义一个 action，确定出口端</span><br>    action <span class="hljs-title function_">forward</span><span class="hljs-params">(bit&lt;<span class="hljs-number">9</span>&gt; egress_port)</span>&#123; <span class="hljs-comment">// 这里的参数是无方向的，因为是来查表得到的</span><br>        standard_metadata.egress_spec = egress_port;<br>    &#125;<br><br>    table repeater &#123;<br>        key = &#123;<br>            standard_metadata.ingress_port: exact; <span class="hljs-comment">// 完全 match 才可以</span><br>        &#125;<br>        actions = &#123; <span class="hljs-comment">// 两种动作</span><br>            forward; <span class="hljs-comment">// 一定是之前已经声明的 action</span><br>            NoAction;<br>        &#125;<br>        size = <span class="hljs-number">2</span>; <span class="hljs-comment">// 只需要两个端口的规则，所以表里只需要两个 entries</span><br>        default_action = NoAction;<br>    &#125;<br><br>    apply &#123;<br>        repeater.apply();<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><ul><li>实现该solution还要新建命令表<code>s1-commands.txt</code><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">table_add repeater forward 1 =&gt; 2<br>table_add repeater forward 2 =&gt; 1<br></code></pre></td></tr></table></figure></li><li>语法 <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">tabel_add &lt;table_name&gt; &lt;action_name&gt; &lt;match_fields&gt; =&gt; &lt;action_parameters&gt;<br></code></pre></td></tr></table></figure></li><li>另外还要修改<code>p4app.json</code> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;topology&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;assignment_strategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;l2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;links&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;h2&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;s1&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;h1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;h2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;switches&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;s1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;cli_input&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;s1-commands.txt&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><ol start="6" type="1"><li>P4仿真</li></ol><ul><li><p>启动网络拓扑 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> p4run<br></code></pre></td></tr></table></figure> <img src="/2025/07/23/P4%2002-Repeater/2.png" alt="启动p4run"></p></li><li><p>打开<code>h1</code>,<code>h2</code>命令窗口 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">xterm h1<br>xterm h2<br></code></pre></td></tr></table></figure> <img src="/2025/07/23/P4%2002-Repeater/3.png" alt="h1 h2 命令窗口"></p></li><li><p>打开 h2 的终端，运行 <code>python receive.py</code></p><figure><img src="/2025/07/23/P4%2002-Repeater/4.png" alt="h2命令窗口"><figcaption aria-hidden="true">h2命令窗口</figcaption></figure></li><li><p>打开一个 h1 的终端，运行<code>python send.py 10.0.0.2 "hello world"</code> <img src="/2025/07/23/P4%2002-Repeater/5.png" alt="h1命令窗口"></p></li><li><p>h2端接收到消息并成功解码</p><figure><img src="/2025/07/23/P4%2002-Repeater/6.png" alt="h2接收到消息"><figcaption aria-hidden="true">h2接收到消息</figcaption></figure></li></ul><h1 id="问题">问题</h1><ol type="1"><li>h2接收端msg无法显示发送端内容</li></ol><ul><li><p>截图</p><figure><img src="/2025/07/23/P4%2002-Repeater/7.png" alt="msg显示raw"><figcaption aria-hidden="true">msg显示raw</figcaption></figure></li><li><p>原因 Scapy 会自动尝试根据上下文推断下一层协议类型。字符串<code>str</code> 类型的 payload，默认被包装为 <code>Raw</code>类型。</p></li><li><p>解决方案 <code>Send.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>  <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv)&lt;<span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;pass 2 arguments: &lt;destination&gt; &quot;&lt;message&gt;&quot;&#x27;</span>)<br>        exit(<span class="hljs-number">1</span>)<br>  <br>    addr = socket.gethostbyname(sys.argv[<span class="hljs-number">1</span>])<br>    iface = get_if()<br>  <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">3</span>:<br>        tos = <span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">3</span>]) % <span class="hljs-number">256</span><br>    <span class="hljs-keyword">else</span>:<br>        tos = <span class="hljs-number">0</span><br>  <br>    ether_dst = get_dst_mac(addr)<br>  <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ether_dst:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Mac address for %s was not found in the ARP table&quot;</span> % addr)<br>        exit(<span class="hljs-number">1</span>)<br>  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Sending on interface %s to %s&quot;</span> % (iface, <span class="hljs-built_in">str</span>(addr)))<br>    pkt =  Ether(src=get_if_hwaddr(iface), dst=ether_dst)<br>    pkt = pkt / IP(dst=addr, tos=tos)  / Raw(load=sys.argv[<span class="hljs-number">2</span>])<br>    sendp(pkt, iface=iface, verbose=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><code>Rceiver.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_pkt</span>(<span class="hljs-params">pkt</span>):<br>  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Packet Received:&quot;</span>)<br>    ether = pkt.getlayer(Ether)<br>    ip = pkt.getlayer(IP)<br>    msg = ip.payload<br>    raw_data = pkt[Raw].load<br>    decoded = raw_data.decode(errors=<span class="hljs-string">&#x27;ignore&#x27;</span>)<br>  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;###[ Ethernet ]###&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  src: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(ether.src))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  dst: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(ether.dst))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;###[ IP ]###&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  src: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(ip.src))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  dst: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(ip.dst))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;###[ MESSAGE ]###&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  msg: <span class="hljs-subst">&#123;decoded&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>P4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>P4</tag>
      
      <tag>SDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RL-04 Value Iteration &amp; Policy Iteration</title>
    <link href="/2025/07/22/RL-04%20Value%20Iteration%20&amp;%20Policy%20Iteration/"/>
    <url>/2025/07/22/RL-04%20Value%20Iteration%20&amp;%20Policy%20Iteration/</url>
    
    <content type="html"><![CDATA[<h1 id="rl学习笔记-04-价值迭代策略迭代">RL学习笔记-04价值迭代&amp;策略迭代</h1><h1 id="声明本笔记是学习b站强化学习的数学原理课程的个人笔记">声明：本笔记是学习B站【强化学习的数学原理】课程的个人笔记</h1><p><img src="/2025/07/22/RL-04%20Value%20Iteration%20&%20Policy%20Iteration/1.jpg"></p><p><img src="/2025/07/22/RL-04%20Value%20Iteration%20&%20Policy%20Iteration/2.jpg"></p><p><img src="/2025/07/22/RL-04%20Value%20Iteration%20&%20Policy%20Iteration/3.jpg"></p><p><img src="/2025/07/22/RL-04%20Value%20Iteration%20&%20Policy%20Iteration/4.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>RL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>RL</tag>
      
      <tag>强化学习</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RL-03 Bellman Optimality Equation</title>
    <link href="/2025/07/22/RL-03%20Bellman%20Optimality%20Equation/"/>
    <url>/2025/07/22/RL-03%20Bellman%20Optimality%20Equation/</url>
    
    <content type="html"><![CDATA[<h1 id="rl学习笔记-03-贝尔曼最优公式">RL学习笔记-03 贝尔曼最优公式</h1><h1 id="声明本笔记是学习b站强化学习的数学原理课程的个人笔记">声明：本笔记是学习B站【强化学习的数学原理】课程的个人笔记</h1><p><img src="/2025/07/22/RL-03%20Bellman%20Optimality%20Equation/1.jpg"></p><p><img src="/2025/07/22/RL-03%20Bellman%20Optimality%20Equation/2.jpg"></p><p><img src="/2025/07/22/RL-03%20Bellman%20Optimality%20Equation/3.jpg"></p><p><img src="/2025/07/22/RL-03%20Bellman%20Optimality%20Equation/4.jpg"></p><p><img src="/2025/07/22/RL-03%20Bellman%20Optimality%20Equation/5.jpg"></p><p><img src="/2025/07/22/RL-03%20Bellman%20Optimality%20Equation/6.jpg"></p><p><img src="/2025/07/22/RL-03%20Bellman%20Optimality%20Equation/7.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>RL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>RL</tag>
      
      <tag>强化学习</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RL-02 Bellman Equation</title>
    <link href="/2025/07/22/RL-02%20Bellman%20Equation/"/>
    <url>/2025/07/22/RL-02%20Bellman%20Equation/</url>
    
    <content type="html"><![CDATA[<h1 id="rl学习笔记-02-贝尔曼公式">RL学习笔记-02 贝尔曼公式</h1><h1 id="声明本笔记是学习b站强化学习的数学原理课程的个人笔记">声明：本笔记是学习B站【强化学习的数学原理】课程的个人笔记</h1><p><img src="/2025/07/22/RL-02%20Bellman%20Equation/1.jpg"></p><p><img src="/2025/07/22/RL-02%20Bellman%20Equation/2.jpg"></p><p><img src="/2025/07/22/RL-02%20Bellman%20Equation/3.jpg"></p><p><img src="/2025/07/22/RL-02%20Bellman%20Equation/4.jpg"></p><p><img src="/2025/07/22/RL-02%20Bellman%20Equation/5.jpg"></p><p><img src="/2025/07/22/RL-02%20Bellman%20Equation/6.jpg"></p><p><img src="/2025/07/22/RL-02%20Bellman%20Equation/7.jpg"></p><p><img src="/2025/07/22/RL-02%20Bellman%20Equation/8.jpg"></p><p><img src="/2025/07/22/RL-02%20Bellman%20Equation/9.jpg"></p><p><img src="/2025/07/22/RL-02%20Bellman%20Equation/10.jpg"></p><p><img src="/2025/07/22/RL-02%20Bellman%20Equation/11.jpg"></p><p><img src="/2025/07/22/RL-02%20Bellman%20Equation/12.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>RL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>RL</tag>
      
      <tag>强化学习</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RL-01 Basic Concepts in RL</title>
    <link href="/2025/07/22/RL-01%20Basic%20Concepts%20in%20RL/"/>
    <url>/2025/07/22/RL-01%20Basic%20Concepts%20in%20RL/</url>
    
    <content type="html"><![CDATA[<h1 id="rl学习笔记-01-基本概念">RL学习笔记-01 基本概念</h1><h1 id="声明本笔记是学习b站强化学习的数学原理课程的个人笔记">声明：本笔记是学习B站【强化学习的数学原理】课程的个人笔记</h1><p><img src="/2025/07/22/RL-01%20Basic%20Concepts%20in%20RL/1.jpg"></p><p><img src="/2025/07/22/RL-01%20Basic%20Concepts%20in%20RL/2.jpg"></p><p><img src="/2025/07/22/RL-01%20Basic%20Concepts%20in%20RL/3.jpg"></p><p><img src="/2025/07/22/RL-01%20Basic%20Concepts%20in%20RL/4.jpg"></p><p><img src="/2025/07/22/RL-01%20Basic%20Concepts%20in%20RL/5.jpg"></p><p><img src="/2025/07/22/RL-01%20Basic%20Concepts%20in%20RL/6.jpg"></p><p><img src="/2025/07/22/RL-01%20Basic%20Concepts%20in%20RL/7.jpg"></p><p><img src="/2025/07/22/RL-01%20Basic%20Concepts%20in%20RL/8.jpg"></p><p><img src="/2025/07/22/RL-01%20Basic%20Concepts%20in%20RL/9.jpg"></p><p><img src="/2025/07/22/RL-01%20Basic%20Concepts%20in%20RL/10.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>RL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>RL</tag>
      
      <tag>强化学习</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P4 01-Reflector</title>
    <link href="/2025/07/19/P4%2001-Reflector/"/>
    <url>/2025/07/19/P4%2001-Reflector/</url>
    
    <content type="html"><![CDATA[<h1 id="p4示例程序-01-数据包反射器">P4示例程序-01 数据包反射器</h1><h3 id="功能交换机将数据包从入端口重新转发出去并对数据包中的调源目的mac地址">功能：交换机将数据包从入端口重新转发出去，并对数据包中的调源目的MAC地址</h3><h1 id="原程序">原程序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* -*- P4_16 -*- */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;core.p4&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;v1model.p4&gt;</span></span><br><br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">*********************** H E A D E R S  ***********************************</span><br><span class="hljs-comment">*************************************************************************/</span><br><br><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">48</span>&gt; macAddr_t;<br>header <span class="hljs-type">ethernet_t</span> &#123;<br>    macAddr_t dstAddr;<br>    macAddr_t srcAddr;<br>    bit&lt;<span class="hljs-number">16</span>&gt;   etherType;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">metadata</span> &#123;</span><br>    <span class="hljs-comment">/* empty */</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">headers</span> &#123;</span><br>    <span class="hljs-type">ethernet_t</span>   ethernet;<br>&#125;<br><br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">*********************** P A R S E R  ***********************************</span><br><span class="hljs-comment">*************************************************************************/</span><br><br>parser <span class="hljs-title function_">MyParser</span><span class="hljs-params">(packet_in packet,</span><br><span class="hljs-params">                out headers hdr,</span><br><span class="hljs-params">                inout metadata meta,</span><br><span class="hljs-params">                inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>      state start&#123;<br><br>          <span class="hljs-comment">/* TODO 1: parse ethernet header */</span><br>          transition accept;<br>      &#125;<br><br>&#125;<br><br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">************   C H E C K S U M    V E R I F I C A T I O N   *************</span><br><span class="hljs-comment">*************************************************************************/</span><br><br>control <span class="hljs-title function_">MyVerifyChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>    apply &#123;  &#125;<br>&#125;<br><br><br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">**************  I N G R E S S   P R O C E S S I N G   *******************</span><br><span class="hljs-comment">*************************************************************************/</span><br><br>control <span class="hljs-title function_">MyIngress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                  inout metadata meta,</span><br><span class="hljs-params">                  inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    apply &#123;<br>       <span class="hljs-comment">/* TODO 2: swap mac addresses */</span><br>       <span class="hljs-comment">/* TODO 3: set output port    */</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">****************  E G R E S S   P R O C E S S I N G   *******************</span><br><span class="hljs-comment">*************************************************************************/</span><br><br>control <span class="hljs-title function_">MyEgress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                 inout metadata meta,</span><br><span class="hljs-params">                 inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br>    apply &#123;  &#125;<br>&#125;<br><br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">*************   C H E C K S U M    C O M P U T A T I O N   **************</span><br><span class="hljs-comment">*************************************************************************/</span><br><br>control <span class="hljs-title function_">MyComputeChecksum</span><span class="hljs-params">(inout headers  hdr, inout metadata meta)</span> &#123;<br>    apply &#123; &#125;<br>&#125;<br><br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">***********************  D E P A R S E R  *******************************</span><br><span class="hljs-comment">*************************************************************************/</span><br><br>control <span class="hljs-title function_">MyDeparser</span><span class="hljs-params">(packet_out packet, in headers hdr)</span> &#123;<br>    apply &#123;<br>        <span class="hljs-comment">/* TODO 4: deparse ethernet header */</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">***********************  S W I T C H  *******************************</span><br><span class="hljs-comment">*************************************************************************/</span><br><br>V1Switch(<br>MyParser(),<br>MyVerifyChecksum(),<br>MyIngress(),<br>MyEgress(),<br>MyComputeChecksum(),<br>MyDeparser()<br>) main;<br></code></pre></td></tr></table></figure><h1 id="解析">解析</h1><ol type="1"><li>Main <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C">V1Switch(<br>MyParser(),            <span class="hljs-comment">// 解析器</span><br>MyVerifyChecksum(),    <span class="hljs-comment">// 校验和验证</span><br>MyIngress(),           <span class="hljs-comment">// 入端处理</span><br>MyEgress(),            <span class="hljs-comment">// 出端处理</span><br>MyComputeChecksum(),   <span class="hljs-comment">// 校验和计算</span><br>MyDeparser()           <span class="hljs-comment">// 反解析器</span><br>) main;<br></code></pre></td></tr></table></figure></li><li>Headers <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> bit&lt;<span class="hljs-number">48</span>&gt; macAddr_t; <span class="hljs-comment">// 定义MAC地址类型为48位比特</span><br><br><span class="hljs-comment">// 定义以太网帧头</span><br>header <span class="hljs-type">ethernet_t</span> &#123;<br>    macAddr_t dstAddr;   <span class="hljs-comment">// 目的MAC地址</span><br>    macAddr_t srcAddr;   <span class="hljs-comment">// 源MAC地址</span><br>    bit&lt;<span class="hljs-number">16</span>&gt;   etherType; <span class="hljs-comment">// 以太网类型字段（表明上层协议类型）</span><br>&#125;<br><br><span class="hljs-comment">// 元数据结构，此处为空</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">metadata</span> &#123;</span><br>    <span class="hljs-comment">/* empty */</span><br>&#125;<br><br><span class="hljs-comment">// 所有解析得到的包头的集合结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">headers</span> &#123;</span><br>    <span class="hljs-type">ethernet_t</span>   ethernet; <span class="hljs-comment">// 包含以太网头部</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C">parser <span class="hljs-title function_">MyParser</span><span class="hljs-params">(                          <span class="hljs-comment">// 定义解析器 MyParser</span></span><br><span class="hljs-params">    packet_in packet,                     <span class="hljs-comment">// 输入的数据包流</span></span><br><span class="hljs-params">    out headers hdr,                      <span class="hljs-comment">// 输出的包头结构</span></span><br><span class="hljs-params">    inout metadata meta,                  <span class="hljs-comment">// 输入输出的元数据</span></span><br><span class="hljs-params">    inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span>  <span class="hljs-comment">// 标准元数据，包含端口、包长等信息</span><br>&#123;<br><br>    state start &#123;                         <span class="hljs-comment">// 定义初始状态 start</span><br>        packet.extract(hdr.ethernet);     <span class="hljs-comment">// 从数据包中提取以太网头部，存入 hdr.ethernet</span><br>        transition accept;                <span class="hljs-comment">// 提取完成后跳转到 accept 状态（默认结束状态）</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Verification <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 校验和验证控制器（这里没有实际进行校验操作）</span><br>control <span class="hljs-title function_">MyVerifyChecksum</span><span class="hljs-params">(inout headers hdr, inout metadata meta)</span> &#123;<br>    apply &#123;  &#125; <span class="hljs-comment">// 空操作</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Ingress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 入队列控制逻辑</span><br>control <span class="hljs-title function_">MyIngress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                  inout metadata meta,</span><br><span class="hljs-params">                  inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br><br>    <span class="hljs-comment">// 定义一个动作：交换源MAC和目的MAC地址</span><br>    action <span class="hljs-title function_">swap_mac</span><span class="hljs-params">()</span> &#123;<br>       macAddr_t tmp;<br>       tmp = hdr.ethernet.srcAddr;         <span class="hljs-comment">// 临时保存源地址</span><br>       hdr.ethernet.srcAddr = hdr.ethernet.dstAddr; <span class="hljs-comment">// 目的地址赋值给源地址</span><br>       hdr.ethernet.dstAddr = tmp;         <span class="hljs-comment">// 原源地址赋值给目的地址</span><br>    &#125;<br><br>    apply &#123;<br>       <span class="hljs-comment">// 应用上述交换MAC地址的动作</span><br>       swap_mac();<br><br>       <span class="hljs-comment">// 设置输出端口为输入端口，实现包回送</span><br>       standard_metadata.egress_spec = standard_metadata.ingress_port;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>Egress Processing <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 出队列控制逻辑，这里没有进行任何处理</span><br>control <span class="hljs-title function_">MyEgress</span><span class="hljs-params">(inout headers hdr,</span><br><span class="hljs-params">                 inout metadata meta,</span><br><span class="hljs-params">                 inout <span class="hljs-type">standard_metadata_t</span> standard_metadata)</span> &#123;<br>    apply &#123;  &#125; <span class="hljs-comment">// 空操作</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Checksum Computation <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 校验和计算控制器，这里也没有进行处理</span><br>control <span class="hljs-title function_">MyComputeChecksum</span><span class="hljs-params">(inout headers  hdr, inout metadata meta)</span> &#123;<br>    apply &#123; &#125; <span class="hljs-comment">// 空操作</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>DE parser <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 反解析器：将解析后的字段重新写回包中</span><br>control <span class="hljs-title function_">MyDeparser</span><span class="hljs-params">(packet_out packet, in headers hdr)</span> &#123;<br>    apply &#123;<br>        <span class="hljs-comment">// 将以太网头部重新写入数据包中</span><br>        packet.emit(hdr.ethernet);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="p4仿真">P4仿真</h1><ol type="1"><li>在拓扑描述文件p4app.json所在的目录执行以下命令，启动网络拓扑<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> p4run<br></code></pre></td></tr></table></figure></li></ol><figure><img src="/2025/07/19/P4%2001-Reflector/1.png" alt="启动截图"><figcaption aria-hidden="true">启动截图</figcaption></figure><ol start="2" type="1"><li>使用xterm h1命令登陆host1的shell界面 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">xterm <span class="hljs-selector-tag">h1</span><br></code></pre></td></tr></table></figure></li></ol><figure><img src="/2025/07/19/P4%2001-Reflector/2.png" alt="启动h1 shell界面"><figcaption aria-hidden="true">启动h1 shell界面</figcaption></figure><ol start="3" type="1"><li>运行命令执行端侧收发Python脚本，成功实现反射器效果<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> send_receive.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure></li></ol><figure><img src="/2025/07/19/P4%2001-Reflector/3.png" alt="运行send_receive脚本"><figcaption aria-hidden="true">运行send_receive脚本</figcaption></figure><figure><img src="/2025/07/19/P4%2001-Reflector/4.png" alt="成功截图"><figcaption aria-hidden="true">成功截图</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>P4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>P4</tag>
      
      <tag>SDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P4 开发环境部署</title>
    <link href="/2025/07/17/P4%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    <url>/2025/07/17/P4%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>软件：VMware17.6.2 系统：Ubuntu 20.04</p><p>编译脚本 <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> ~<br>sudo apt install git gcc cmake make<br><span class="hljs-built_in">wget</span> <span class="hljs-literal">-O</span> <span class="hljs-built_in">install-p4</span><span class="hljs-literal">-dev</span>.sh https://raw.githubusercontent.com/nsg<span class="hljs-literal">-ethz</span>/p4<span class="hljs-literal">-utils</span>/master/<span class="hljs-built_in">install-tools</span>/<span class="hljs-built_in">install-p4</span><span class="hljs-literal">-dev</span>.sh<br>bash <span class="hljs-built_in">install-p4</span><span class="hljs-literal">-dev</span>.sh<br></code></pre></td></tr></table></figure></p><p>遇到的问题及解决方法 - 问题1 - 情况：虚拟机内存小于35GB -方法：重新分配虚拟机内存 - 问题2 - 情况：Connecting toraw.githubusercontent.com (raw.githubusercontent.com)|::|:443… failed:Connection refused. -方法：见https://blog.csdn.net/qq_44776065/article/details/128461605 -问题3 - 情况：curl 命令无法查询 - 方法：手动提前下载curl<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt inatll curl<br></code></pre></td></tr></table></figure></p><p>编译完成截图 <img src="/2025/07/17/P4%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/1.png" alt="编译完成截图"></p><p>运行指令 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> p4run<br></code></pre></td></tr></table></figure></p><p>成功运行截图 <img src="/2025/07/17/P4%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2.png" alt="成功运行截图"></p><p>若需要退出，直接在mininet的CLI中输入exit命令即可： <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mininet &gt; <span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure></p><p>通过上述方法完成安装后，所带的P4-Learning是一个比较好、且推荐的教程</p>]]></content>
    
    
    <categories>
      
      <category>P4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>P4</tag>
      
      <tag>SDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ATP：多租户学习中的网络内聚合</title>
    <link href="/2025/07/16/ATP%EF%BC%9A%E5%A4%9A%E7%A7%9F%E6%88%B7%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C%E5%86%85%E8%81%9A%E5%90%88/"/>
    <url>/2025/07/16/ATP%EF%BC%9A%E5%A4%9A%E7%A7%9F%E6%88%B7%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C%E5%86%85%E8%81%9A%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="abstract-摘要">Abstract 摘要</h1><ul><li>核心创新<ul><li>提出ATP（Aggregation Transmission Protocol）服务</li></ul></li><li>目标场景​<ul><li>多租户多机架集群中的分布式深度学习训练</li></ul></li><li>关键技术​<ul><li>可编程交换机实现网络内梯度聚合</li><li>decentralized, dynamic, best-effortaggregation中心化的、动态的、尽力而为的聚合资源分配</li></ul></li><li>性能收益​：<ul><li>训练吞吐提升38%-66%</li></ul></li></ul><h1 id="introduction-引言">1. Introduction 引言</h1><ul><li>问题<ul><li>通信瓶颈转移<ul><li>专用硬件的最新进展已将分布式训练的性能瓶颈从计算转移到通信</li><li>在没有网络通信的情况下，VGG16训练速度可以提高4倍</li></ul></li><li>多租户场景痛点<ul><li>供多机架/多交换机集群中的多个 DT租户利用这一普遍问题，尚未受到系统的关注。</li><li>实现这种服务需要一些机制，以便在多个租户之间共享有限的多交换机聚合资源</li></ul></li></ul></li><li>ATP<ul><li>梯度片段包<ul><li>ATP将每个DT作业的梯度分块成固定大小的片段</li></ul></li><li>聚合器<ul><li>将可编程交换机资源划分为相同大小的片段</li><li>去中心化的聚合器分配机制<ul><li>通过在梯度片段数据包到达交换机时动态分配空闲聚合器，来支持多个作业在线速下进行聚合</li></ul></li><li>专门对交换机逻辑和终端主机网络堆栈进行协同设计，以支持可靠性和有效的拥塞控制</li></ul></li><li>浮点值量化机制</li><li>终端主机的内核旁路设计<ul><li>有的协议栈不会被ATP的网络栈替换，非ATP应用程序可以继续使用现有的协议栈</li></ul></li></ul></li><li>性能<ul><li>多个作业的单机架DNN模型测试平台<ul><li>当只有一半的所需聚合器可用时，性能仅下降5-10％</li><li>当交换机资源竞争激烈时，性能优于当前最先进的技术38％</li></ul></li><li>典型的拓扑结构模拟<ul><li>ATP可减少66％的网络流量</li><li>ATP的丢包恢复机制优于最先进的技术（SwitchML）34％</li><li>具有拥塞控制的ATP作业比没有拥塞控制的作业加速3倍</li></ul></li></ul></li></ul><h1 id="background-and-motivation-背景和动机">2. Background andMotivation 背景和动机</h1><ul><li><h3 id="preliminaries预备知识">Preliminaries（预备知识）</h3><ul><li>PS Architecture(PS架构)<ul><li>Worker本地计算梯度 <span class="math inline">→</span>跨网络传输至PS聚合 <span class="math inline">→</span> 返回更新参数</li><li><img src="/2025/07/16/ATP%EF%BC%9A%E5%A4%9A%E7%A7%9F%E6%88%B7%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C%E5%86%85%E8%81%9A%E5%90%88/1.png"></li></ul></li><li>Programmable Switch(可编程交换机)<ul><li>无状态对象<ul><li>元数据，保存每个数据包的瞬态状态，并且当该数据包被丢弃或转发时，交换机释放此对象</li></ul></li><li>有状态对象<ul><li>寄存器，只要交换机程序正在运行，就保持状态。可以在数据平面中读取和写入寄存器值，但对于每个数据包，只能访问一次，无论是读取、写入还是两者都进行</li><li>寄存器是一个值数组。在网络内聚合的上下文中，每个数据包都有一组梯度值，并且需要一组寄存器来聚合它们。我们将这组寄存器称为聚合器</li></ul></li><li>限制<ul><li>寄存器内存只能在交换机程序启动时分配。要更改内存分配，用户必须停止交换机，修改交换机程序并重新启动交换机程序</li><li>计算灵活性受到阶段数量、有效载荷解析能力以及每个阶段的时间预算的限制：只有独立的计算原语可以放置在同一阶段，并且在同一阶段访问的寄存器数量也受到限制</li><li>网络内计算和存储应用的数据包大小较小：SwitchML和NetCache的有效载荷大小为128B</li></ul></li></ul></li><li>In-Network Aggregation(网络内聚合)<ul><li>梯度可以被看作是一系列片段（每个片段都有一部分梯度值），所有梯度的聚合（梯度相加）就是每个片段的聚合。每个片段的网络内聚合都在特定的聚合器中完成</li><li><figure><img src="/2025/07/16/ATP%EF%BC%9A%E5%A4%9A%E7%A7%9F%E6%88%B7%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C%E5%86%85%E8%81%9A%E5%90%88/2.png" alt="In-network aggregation example"><figcaption aria-hidden="true">In-network aggregationexample</figcaption></figure></li></ul></li></ul></li><li><h3 id="in-network-aggregation-as-a-service网络内聚合即服务">In-NetworkAggregation as a Service（网络内聚合即服务）</h3><ul><li>SwitchML的静态分配缺陷<ul><li>资源低效<ul><li>应用于多个DT作业时，SwitchML需要对交换机资源进行静态分区，其中每个作业被静态地分配到一个分区</li><li>固定分配聚合器导致任务间歇期（Off-Phase）资源闲置</li></ul></li><li>可拓展性差<ul><li>SwitchML将每个DT作业的梯度聚合完全卸载到机架交换机。在交换机资源严重争用的情况下，DT作业必须等待交换机资源，从而导致从worker到PS的网络链路带宽利用不足</li><li>在网络拓扑的每一层启用聚合服务会使服务设计和网络操作复杂化</li></ul></li></ul></li><li>协议层的挑战<ul><li>端到端语义失效（Rethinking Reliability）<ul><li>在聚合期间，一些数据包在网络内部被消耗。传统的基于终端主机的可靠性机制可能会将网络内数据包消耗误解为数据包丢失，从而导致不必要的重传，并且由于现有可靠性机制无法处理这些新型数据包事件，因此会导致不正确的梯度聚合</li></ul></li><li>拥塞控制失真（Rethinking Congestion-Control）<ul><li>多租户情况下，DT作业可用的网络资源（交换机聚合器和网络带宽）会发生波动</li><li>由于端到端语义被打破，无法使用依赖于RTT或丢包作为拥塞信号的传统拥塞控制算法</li></ul></li></ul></li></ul></li></ul><h1 id="design-设计">3. Design 设计</h1><ul><li><h3 id="atp-overviewatp概述">ATP Overview(ATP概述)</h3><ul><li>ATP VS TCP<ul><li>ATP针对其目标上下文重新设计了特定的传输特性，例如可靠性、拥塞控制和流量控制</li><li>ATP不实现TCP的按序字节流和多路复用抽象，因为它们不适用于目标上下文</li></ul></li><li>梯度分片处理<ul><li>将梯度拆分为固定大小分片，通过<code>JobID</code>和<code>Sequence Number</code>标识</li></ul></li><li>动态聚合决策<ul><li>分片通过哈希映射至交换机聚合器</li><li>资源不可用时直通PS端聚合</li></ul></li><li>两级聚合层级<ul><li>仅在工作节点机架（第一级）和PS机架（第二级）部署聚合，确保每个梯度分片数据包仅被聚合一次</li></ul></li><li>检测处理丢包<ul><li>使用基于超时的重传或来自PS的乱序参数ACK包。当一个包被重传时，它会设置重发标志</li><li>设置ECN标志，ECN拥塞信号经聚合多播至所有Worker</li></ul></li><li><figure><img src="/2025/07/16/ATP%EF%BC%9A%E5%A4%9A%E7%A7%9F%E6%88%B7%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C%E5%86%85%E8%81%9A%E5%90%88/3.png" alt="ATP dynamic, best-effort aggregation example"><figcaption aria-hidden="true">ATP dynamic, best-effort aggregationexample</figcaption></figure></li></ul></li><li><h3 id="atp-infrastructure-setupatp基础设施设置">ATP InfrastructureSetup(ATP基础设施设置)</h3><ul><li>静态设置<ul><li>交换机<ul><li>每个可编程交换机安装一个分类器来识别ATP流量</li><li>分配一部分聚合器来聚合ATP流量</li></ul></li><li>终端主机<ul><li>安装一个ATP网络堆栈，该堆栈拦截来自DT作业的所有推送或拉取梯度调用</li><li>了解网络拓扑以及交换机上的聚合器总数，可以协调跨多个交换机的聚合</li></ul></li></ul></li><li>动态作业分配<ul><li>标识分配<ul><li>唯一<code>JobID</code> + <code>WorkerID</code></li></ul></li><li>多播支持​<ul><li>使用IGMP来构建一个多播分发树，供PS将参数返回给worker</li></ul></li></ul></li></ul></li><li><h3 id="data-structures数据结构">Data Structures(数据结构)</h3><ul><li>数据包格式<ul><li>bitmap0 / bitmap1节点聚合位图<ul><li>bitmap0：第一级交换机节点位图<br></li><li>bitmap1：第二级交换机节点位图</li></ul></li><li>fanInDegree0 / fanInDegree聚合完成阈值<ul><li>fanInDegree0：第一级交换机需聚合的分片数</li><li>fanInDegree1：第二级交换机需聚合的分片数</li></ul></li><li>resend重传标记<ul><li>若值为1，此包为重传包，触发聚合器提前释放</li></ul></li><li>collision哈希冲突标记<ul><li>若值为1，发生聚合器索引冲突，PS需触发动态重哈希</li></ul></li><li>ECN显式拥塞通知</li><li>edgeSwitchIdentifier交换机层级标识<ul><li>0：当前包由第一级交换机处理<br></li><li>1：当前包由第二级交换机处理</li></ul></li><li>isAck包类型标识<ul><li>0：梯度包（Worker → PS）<br></li><li>1：参数包（PS → Worker）</li></ul></li><li>JobIDAndSequence分片唯一标识</li></ul></li><li>交换机寄存器<ul><li>bitmap位图记录哪些worker已被聚合</li><li>counter记录已被聚合的workers数量</li><li>ECN指示拥塞情况（只要存在ATP数据包的ECN字段为1，则置1）</li><li>identify由job ID作业ID与sequencenumber序列号组成，唯一标识作业及片段</li><li>timestamp时间戳的更新，发生在执行一次聚合操作时</li><li>aggregator value存储聚合数据</li></ul></li></ul></li><li><h3 id="inter-rack-aggregation机架间聚合">Inter-rackAggregation(机架间聚合)</h3><ul><li>原因<ul><li>仅在worker的本地ToR交换机上进行聚合很简单，但是当worker位于不同的机架中时，会导致到PS的不必要的网络流量</li><li>可以在网络拓扑的更高层级进行聚合。然而，这种方法会大大增加协议的复杂性，因为系统必须处理网络内部的路由更改</li></ul></li><li>ATP部署位置<ul><li>ATP仅在ToR交换机中部署网络内聚合，要么在worker的机架（第一层），要么在PS的机架（第二层）</li></ul></li><li>梯度数据包<ul><li>见数据结构章节</li></ul></li><li><figure><img src="/2025/07/16/ATP%EF%BC%9A%E5%A4%9A%E7%A7%9F%E6%88%B7%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C%E5%86%85%E8%81%9A%E5%90%88/4.png" alt="Pseudocode of the switch logic in the ideal case"><figcaption aria-hidden="true">Pseudocode of the switch logic in theideal case</figcaption></figure></li></ul></li><li><h3 id="switch-logic交换机逻辑">Switch Logic(交换机逻辑)</h3><ul><li>Aggregator Allocation 聚合器分配<ul><li>当一个梯度片段数据包到达时，交换机检查数据包的<code>aggregatorIndex</code>字段中聚合器的可用性。终端主机计算 <code>aggregatorIndex</code>为<span class="math inline"><em>H</em><em>A</em><em>S</em><em>H</em>( &lt; <em>J</em><em>o</em><em>b</em><em>I</em><em>D</em>, <em>S</em><em>e</em><em>q</em><em>u</em><em>e</em><em>n</em><em>c</em><em>e</em><em>N</em><em>u</em><em>m</em><em>b</em><em>e</em><em>r</em> &gt; )%<em>n</em><em>u</em><em>m</em><em>A</em><em>g</em><em>g</em><em>r</em><em>e</em><em>g</em><em>a</em><em>t</em><em>o</em><em>r</em><em>s</em></span></li><li>判断<code>&lt;Job ID, Sequence Number&gt;</code>是非为空<ul><li>若为空，将数据包的标识符存储在聚合器中，并将梯度数据包的数据字段复制到聚合器的值字段中。交换机将聚合器中的位图字段从数据包中相应的位图字段复制</li><li>如果聚合器的标识符字段非空，交换机将其与数据包的标识符进行比较<ul><li>如果它们不同，则存在哈希冲突，ATP 将梯度片段数据包向下游推送，以便在PS 处进行处理</li><li>如果聚合器和数据包标识符相等，则发生梯度聚合</li></ul></li></ul></li></ul></li><li>Gradient Aggregation 梯度聚合<ul><li>如果梯度片段数据包有可用的聚合器，ATP 使用<code>edgeSwitchIdentifier</code>从数据包中获取该交换机的扇入度和位图</li><li>ATP通过将数据包的位图与聚合器的位图进行比较来检查该数据包是否已被聚合<ul><li>如果未被聚合，ATP将数据包的梯度数据聚合（相加）到聚合器的值字段中，并将梯度数据包中的位图字段与聚合器中的位图字段进行或运算</li><li>如果数据包已经被聚合，ATP 将数据包中的 ECN 字段与聚合器的 ECN字段进行或运算，并丢弃该数据包</li></ul></li><li>比较计数器与扇入度<ul><li>如果聚合器中的计数器小于相应的扇入度，则 ATP会丢弃梯度片段数据包并对 ECN 进行 OR 操作</li><li>如果它们相等，则此交换机的聚合已完成，可以向下游推送。交换机将数据包的数据字段替换为聚合器的值字段，并将相应的位图字段替换为聚合器的位图，然后将数据包向下游发送到PS</li></ul></li><li>ATP选择将完整的聚合结果转发给PS，而不是将它们发送回worker</li></ul></li><li>Aggregator Deallocation using Parameter Packets使用参数包进行聚合器释放<ul><li>当交换机从PS接收到参数包时，会将参数包多播回工作节点。参数包作为梯度片段包的确认(ACK)，并且必须遍历用于聚合的边缘交换机。当ATP交换机处理一个参数包时，交换机会检查该包索引处的聚合器是否具有匹配的标识符，如果匹配，则通过将所有字段更改为空来释放该聚合器</li></ul></li></ul></li><li><h3 id="end-host-logic终端主机逻辑">End HostLogic(终端主机逻辑)</h3><ul><li>Worker Pushing Gradients Worker推送梯度<ul><li>ATP终端主机网络栈通过拦截DT作业的推送或拉取调用来获取梯度。它将这些梯度分成一系列306B的数据包（58B头部+ 248B梯度值）</li></ul></li><li>PS Updating Parameters PS更新参数<ul><li>ATP在PS上为每个作业分配一块内存区域，用于收集聚合梯度，形式为由序列号索引的&lt;位图，值&gt;数组</li><li>位图跟踪哪些worker的梯度片段已在值字段中聚合。PS为每个值维护一个位图，以跟踪哪些worker的值已被聚合</li><li>当梯度片段数据包到达时，PS将其位图与数据包的位图进行比较，以查找重叠<ul><li>如果它们不重叠，则PS将数据包的数据聚合到其存储的值中，并从数据包的位图更新存储的位图</li><li>若重叠，丢弃重复项</li></ul></li><li>完成参数片段的聚合后，PS将更新后的参数片段发送到交换机，交换机将其多播回作业中的所有worker</li><li>对于单个梯度片段，当最初的几个数据包到达时，聚合器可能正忙（哈希冲突），但对于后面的数据包则可用（已释放）。在这种情况下，最初的几个数据包会直接转发到PS，而剩余的数据包则在交换机处聚合</li><li>如果没有干预，交换机将永远不会发送聚合后的值，因为它正在等待已经发送的数据包。当工作节点接收到更高序列片段的参数数据包时，它们会检测到这种停滞的聚合，并且所有工作节点都会将停滞的片段视为丢失。每个工作节点都会重新发送带有重发位设置的停滞片段</li><li>为了减少聚合器冲突的频率，我们提出了一种动态哈希方案。PS检查梯度数据包的冲突位。如果冲突位被设置，PS会重新哈希以获得一个新的聚合器索引。它将这个新的聚合器索引在参数数据包中未使用的位图字段中发送给worker</li></ul></li><li>Worker Receiving Parameters 工作节点接收参数<ul><li>网络堆栈维护一个关于梯度片段数据包序列的滑动窗口。在发送初始窗口的数据包后，工作节点将第一个未被确认的序列号记录为期望的序列号，并等待来自参数服务器（PS）的参数数据包。工作节点使用来自PS的参数数据包来滑动窗口并发送新的梯度数据包</li><li>当工作节点接收到一个参数数据包时，它会检查该数据包是否具有期望的数据包序列号<ul><li>如果该参数数据包已被接收,则会被忽略</li><li>如果它具有期望的序列号，则工作节点会增加期望的序列号，并调用拥塞控制算法来更新当前窗口<ul><li>如果正在传输的数据包数量小于拥塞窗口，ATP将发送剩余窗口（拥塞窗口大小- 正在传输的数据包数量）的梯度片段数据包</li></ul></li><li>如果参数的序列号高于预期，ATP可能会认为期望的梯度片段丢失，从而触发丢失恢复</li></ul></li></ul></li></ul></li><li><h3 id="reliability-and-congestion-control可靠性和拥塞控制">Reliability andCongestion Control(可靠性和拥塞控制)</h3><ul><li>Reliability 可靠性<ul><li>当worker接收到三个连续的、序列号不是期望序列号的参数包时，它会检测到具有期望序列号的梯度片段丢失</li><li>ATPworker会重传丢失的片段包，并设置重发位；这向交换机表明交换机中可能存在部分聚合状态</li><li>在第一级，当重传数据包到达时，交换机检查是否存在匹配的聚合器<ul><li>如果存在，并且聚合器位图未指示重传数据包的片段已被聚合，则交换机将数据包中的值聚合到聚合器中，将数据包中的位图合并到聚合器的位图中，将结果（可能是部分的）向下游转发，并释放聚合器</li></ul></li><li>第二层交换机丢弃其聚合状态，并将任何重发的包（包括来自第一层的部分聚合）转发到PS，在那里最终完成聚合</li><li>在每个参数包上，交换机都会检查由参数包索引指定的寄存器的超时值。即使其作业ID和序列号与参数包不匹配，如果时间戳早于配置的值，交换机也会释放聚合器</li></ul></li><li>Congestion Control 拥塞控制<ul><li>在多租户网络中，多个ATP作业和其他应用程序共享网络。它们争夺各种资源，包括网络带宽、接收器CPU和交换机缓冲区。在ATP中，多个作业还会争夺交换机上的聚合器</li><li>交换机中聚合器的高度争用可能导致聚合器无法聚合所有流量。这会导致流量增加，从而触发交换机中的队列长度累积以及由于交换机缓冲区溢出而导致的丢包</li><li>启用交换机中的ECN标记，并使用ECN和（罕见的）数据包丢失作为拥塞信号。为了确保ECN标记在聚合期间不丢失，ATP将分片数据包中的ECN位合并到聚合器中的ECN位，该ECN位稍后在聚合完成后转发到PS。然后，此ECN位被复制到参数数据包，并最终到达所有worker</li><li>每个ATP工作进程应用加性增量乘性减量（AIMD）来调整其窗口大小，以响应拥塞信号</li><li>对于每个收到的参数包，ATP将窗口大小增加一个MTU（1500字节或5个数据包），直到达到一个阈值。高于慢启动阈值时，ATP每个窗口将窗口大小增加一个MTU</li><li>当一个工作进程通过参数ACK上的ECN标记或三个乱序ACK检测到拥塞时，它会将窗口大小减半，并将慢启动阈值更新为更新后的窗口大小</li></ul></li></ul></li><li><h3 id="dealing-with-floating-point浮点数处理">Dealing with FloatingPoint(浮点数处理)</h3><ul><li>ATP通过将浮点数乘以一个比例因子 (108)并四舍五入到最接近的整数，将每个worker处的梯度值从32位浮点表示转换为32位整数表示</li><li>交换机聚合这些32位整数，PS通过除以比例因子将聚合值转换回32位浮点数</li><li>所有梯度数据包都以在网络交换机上进行聚合为目的发送。如果一个梯度数据包在交换机中的聚合器上触发溢出，我们利用交换机的一个特性（饱和）将聚合器的值设置为用32位整数表示的最大值或最小值</li><li>果聚合器的值已饱和，则任何进一步发送到该聚合器的梯度数据包仅更新方向，并且该值保持饱和。当聚合完成时，即fanInDegree值等于worker的数量时，饱和的聚合器值被写入梯度数据包并发送到PS。如果PS发现聚合器的值已饱和，它会从所有worker请求原始的浮点格式的梯度值。这会触发重传，并且所有worker都将包含浮点梯度值的包直接发送到PS，PS最终执行聚合</li></ul></li></ul><h1 id="implementation-实现">4. Implementation 实现</h1><ul><li>Programmable Switch 可编程交换机<ul><li>该交换机实现具有用于梯度聚合的处理逻辑以及用于分配、释放和管理聚合器的控制逻辑</li><li>必须在有限的时间预算内解析整个数据包，并在有限的交换机流水线阶段中进行处理</li><li>聚合<ul><li>ATP通过对每个数据包在交换机上进行两次处理（称为两遍处理）来增加此限制，这是重提交和循环功能的混合使用</li></ul></li><li>控制逻辑<ul><li>负责检查聚合器是否可用，处理协议标志，以及更新聚合状态</li><li>为了在对寄存器的一次性访问限制内工作，ATP应用各种技术来处理复杂操作。考虑位图检查过程，这涉及到读取聚合器中的位图，然后对梯度值和位图值进行算术运算；最后，写入聚合器中的位图</li><li>ATP中解决单个数据包的一次性访问限制的另一种方法是使用两个数据包</li></ul></li></ul></li><li>End-Host Networking Stack 终端主机网络堆栈<ul><li>将 ATP 实现为 BytePS插件，该插件集成在 PyTorch、TensorFlow和MXNet中</li><li>BytePS 允许在不修改应用程序的情况下使用 ATP。ATP 在 worker 与 ATP PS通信时，拦截 worker 上的 Push 和 Pull 函数调用</li><li>Small Packet Optimizations 小数据包优化<ul><li>TSO通过将数据包分包卸载到网卡来加速数据包发送，并通过大型DMA传输来提高PCIe带宽</li><li>MP-QP使用指定多个连续数据包缓冲区的缓冲区描述符，并将网卡内存占用减少至少512倍</li></ul></li><li>ATP使用多线程来加速数据包处理</li></ul></li><li>Baseline Implementation 基线实现<ul><li>实现了一个SwitchML的原型，它使用交换机作为PS，并提供基于超时的丢包恢复机制</li><li>在终端主机上将TSO和MP-QP特性应用于SwitchML实现，以改善小包操作，但不在交换机上应用两阶段优化，以与SwitchML的公共版本保持一致</li></ul></li></ul><h1 id="evaluation-评估">5. Evaluation 评估</h1><ul><li>实验装置<ul><li>集群设置<ul><li>8台机器配备了一块NVIDIA GeForce RTX 2080TiGPU，NVIDIA驱动版本为430.34，CUDA版本为10.0</li><li>所有机器均配备56核Intel(R) Xeon(R) Gold 5120T CPU @ 2.20GHz，192GBRAM，操作系统为Ubuntu18.04，Linux内核版本为4.15.0-20。每台主机都配备一个MellanoxConnectX-5双端口100G NIC，使用Mellanox驱动OFED4.7-1.0.0.1。所有主机通过一个具有BarefootTofino芯片的32x100Gbps可编程交换机连接</li></ul></li><li>Baseline 基线<ul><li>BytePS</li><li>SwitchML</li><li>具有RoCE的Horovod</li><li>具有TCP的Horovod</li></ul></li><li>Workloads 工作负载<ul><li>DT 作业有 8 个 worker。对于大多数实验使用 VGG16（模型大小 528MB）和ResNet50（模型大小98MB），分别作为网络密集型和计算密集型工作负载的代表</li><li>还运行一个聚合微基准测试，其中每个 worker 重复传输 4MB 张量（BytePS支持的最大大小），这些张量在网络 (ATP) 中或在 PS(s) (BytePS)中聚合，然后发送回worker。与真实作业相比，此微基准测试具有大小相等的张量，并且始终有数据要发送，没有“关闭”阶段</li></ul></li><li>Metrics 指标<ul><li>DT作业的训练吞吐量</li><li>达到目标准确率的时间</li><li>微基准测试的聚合吞吐量</li></ul></li></ul></li><li>单任务性能<ul><li>ATP训练性能<ul><li>对于所有作业，ATP均实现了最佳性能，在网络密集型工作负载（VGG）上，性能提升比在计算密集型工作负载（ResNet）上更大</li><li><figure><img src="/2025/07/16/ATP%EF%BC%9A%E5%A4%9A%E7%A7%9F%E6%88%B7%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C%E5%86%85%E8%81%9A%E5%90%88/5.png" alt="Single job throughput"><figcaption aria-hidden="true">Single job throughput</figcaption></figure></li></ul></li><li>机架间聚合<ul><li>ATP在发送到PS之前，在交换机<span class="math inline"><em>S</em><em>W</em><sub>2</sub></span>处聚合来自<span class="math inline"><em>w</em><sub>5</sub></span>和<span class="math inline"><em>w</em><sub>4</sub></span>的单个数据包以及来自<span class="math inline"><em>S</em><em>W</em><sub>0</sub></span>和<span class="math inline"><em>S</em><em>W</em><sub>1</sub></span>的部分聚合；这消除了到PS的<span class="math inline">$\frac{2}{3}$</span>的流量</li></ul></li><li>丢包恢复开销<ul><li>当丢包率增加时，ATP的性能会优雅地降低，且降低程度小于SwitchML。这是因为ATP采用乱序ACK作为丢包信号，这使得ATP能够比SwitchML更快地检测和响应丢包</li><li><figure><img src="/2025/07/16/ATP%EF%BC%9A%E5%A4%9A%E7%A7%9F%E6%88%B7%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C%E5%86%85%E8%81%9A%E5%90%88/6.png" alt="Throughput in different packet loss rate"><figcaption aria-hidden="true">Throughput in different packet lossrate</figcaption></figure></li></ul></li></ul></li><li>ATP Time-to-Accuracy (TTA)ATP 准确率时间<ul><li>单任务TTA<ul><li>对于所有模型，ATP花费相同数量的epoch来达到与BytePS NtoNRDMA相同的top-5准确率</li><li>对于VGG16，一种网络密集型工作负载，ATP优于BytePS</li><li>ATP没有加速ResNet50的训练，因为它是一种计算密集型工作负载</li></ul></li><li>多任务TTA<ul><li>与单作业 TTA 性能类似，ATP 优于 BytePS 和 Horovod</li></ul></li><li>ATP不会影响训练质量，并且由于网络内聚合提供的加速作用，它能够在比其他方法更短的时间内达到基线训练精度</li></ul></li><li>多重作业<ul><li>动态 vs. 静态共享<ul><li>在 100% 的情况下，动态方法与静态方法的性能相似</li><li>随着可用聚合器数量的减少，动态方法的吞吐量下降幅度小于静态方法</li></ul></li><li>ATP哈希方案的有效性<ul><li>ATP的基于哈希的方案与基准静态方案相匹配，并且大大优于基于线性的方案</li><li>动态哈希函数可以有效地将聚合器分配给每个作业</li></ul></li></ul></li><li>拥塞控制的有效性<ul><li>With non-ATP trafﬁc 非ATP流量<ul><li>有ATP的VGG16作业能够达到峰值吞吐量（因为需求小于公平份额），并且吞吐量之和接近该工作节点上行链路的线路速率。这表明，在这种设置下，ATP的CC能够与具有最大-最小公平分配的非ATP后台流量共存</li><li>ATP能够接近瓶颈链路（来自该工作节点的上行链路）的公平份额，并且两种流量类型的吞吐量之和接近链路速率。这展示了近乎公平的链路带宽共享</li></ul></li><li>With other ATP trafﬁc ATP流量<ul><li>ATP的拥塞控制能够有效地维持高吞吐量，并且能够有效地避免丢包</li></ul></li></ul></li></ul><h1 id="other-related-work-其他相关工作">6. Other Related Work其他相关工作</h1><ul><li>Speedup Network Transmission 加速网络传输<ul><li>更智能的网络调度<ul><li>通过细粒度张量传输调度（按层而不是整个梯度或参数）来增加GPU/CPU计算和网络传输之间的重叠</li><li>通过流水线结合模型并行和数据并行</li><li>使用异步IO</li></ul></li><li>减少网络流量<ul><li>用大批量大小来降低通信频率</li><li>使用量化或减少SGD中的冗余来减少网络传输的字节数</li><li>优化本地-全局聚合的混合，以适应运行时的网络变化</li></ul></li></ul></li><li>In-network Aggregation 网络内聚合<ul><li>已在无线网络中、在大数据系统和使用终端主机的分布式训练系统中、专用主机、高性能中间盒或覆盖网络中进行了探索</li><li>DAIET提出了一个简单的网络内聚合的概念验证设计，但没有测试平台原型</li><li>ShArP在MellanoxInfiniband专用交换机的支持下，构建了一个覆盖缩减树来聚合通过它的数据，但它直到交换机接收到所有数据后才应用聚合</li></ul></li></ul><h1 id="conclusion-结论">7. Conclusion 结论</h1><ul><li>成功构建了一个网络内聚合服务ATP，以加速多租户多机架网络中的DT作业</li><li>对于单个作业，ATP的性能优于现有系统高达8.7X，甚至略优于当前最先进的基于RDMA的环状all-reduce</li><li>在多租户场景中，使用ATP的尽力而为的网络内聚合能够实现高效的交换机资源利用，并且在交换机资源竞争激烈时，在训练时间方面优于当前最先进的静态分配技术高达38%</li></ul>]]></content>
    
    
    <categories>
      
      <category>在网计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>在网计算</tag>
      
      <tag>ATP服务</tag>
      
      <tag>2025</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于网内聚合的分布式机器学习加速策略研究</title>
    <link href="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/"/>
    <url>/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="摘要">摘要</h1><ul><li>研究背景<ul><li>大规模神经网络训练需求激增，单机训练效率低，而PS-Worker、AllReduce存在显著缺陷<ul><li>PS-Worker：参数服务器带宽瓶颈限制规模扩展</li><li>AllReduce：通信延迟随节点数线性增长</li></ul></li><li>网内聚合（ In-Network Aggregation）成为了加速分布式机器学习训练的新方向<ul><li>通过可编程交换机将梯度聚合卸载到网络层，减少主机计算压力与网络流量</li><li>受限于交换机内存与计算能力</li></ul></li></ul></li><li>核心问题<ul><li>问题1:<ul><li>多任务争抢可编程交换机有限的内存资源，而导致网内聚合速度减慢和交换机内存利用率降低</li></ul></li><li>问题2<ul><li>网内聚合扩展规模受限于可编程交换机有限的计算能力，大规模分布式训练中部署难度和成本高，以及现有网内聚合扩展策略没有充分利用机内高带宽资源</li></ul></li></ul></li><li>解决方案<ul><li>问题1：RA-INA混合同步算法<ul><li>动态共享交换机内存，梯度分组后优先执行Ring-AllReduce</li><li>数据包到达交换机时批量抢占聚合器，成功则切换网内聚合</li></ul></li><li>问题2：CINA链式扩展策略<ul><li>将 ToR（Top of Rack）交换机替换为可编程交换机，在 ToR层形成一条网内聚合的链式流水线</li><li>利用机内高带宽，在机内进行 Ring-Reduce将梯度聚合到机内主节点上，协同流水线进行机间的网内聚合</li></ul></li></ul></li><li>关键词<ul><li>分布式机器学习</li><li>可编程交换机</li><li>网内聚合</li><li>多任务</li><li>大规模训练</li></ul></li></ul><h1 id="第一章-绪论">第一章 绪论</h1><ul><li>研究背景及意义<ul><li>核心问题<ul><li>大规模神经网络训练（如ChatGPT）需求激增，单机训练耗时过长（如1024块A100训练34天），分布式训练成关键技术。</li></ul></li><li>通信瓶颈<ul><li>PS-Worker​<ul><li>参数服务器（PS）节点多对一通信导致带宽瓶颈</li><li><figure><img src="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/1.png" alt="PS架构瓶颈"><figcaption aria-hidden="true">PS架构瓶颈</figcaption></figure></li></ul></li><li>AllReduce<ul><li>通信延迟随节点数线性增长，长环结构受限于最低带宽链路​</li><li><figure><img src="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/2.png" alt="AllReduce瓶颈"><figcaption aria-hidden="true">AllReduce瓶颈</figcaption></figure></li></ul></li></ul></li><li>网内聚合价值<ul><li>通过可编程交换机卸载梯度聚合，减少网络流量与通信跳数，但受限于交换机内存与计算能力</li></ul></li></ul></li><li>研究现状<ul><li>中心化并行训练（PS-Worker）<ul><li>工作流程<ul><li>作为中心化的 PS 将在本地维护一个全局模型， 负责更新 Worker上的本地模型。 在每次迭代训练中，训练数据集会被分割并分配给每个 Worker进行本地训练，完成训练后计算梯度值并将其推送给 PS。 PS 收到来自各个Worker 的梯度后，使用随机梯度下降法或其他优化算法更新全局模型。随后Worker 会从 PS 拉取最新的模型以便进入下一次迭代训练。</li></ul></li><li>演进历程<ul><li>第一代<ul><li>基于Memcached的分布式参数存储</li></ul></li><li>第二代<ul><li>DistBelief</li></ul></li><li>第三代<ul><li>PS-Lite通用架构</li></ul></li></ul></li><li>优化方案<ul><li>数据/模型并行<ul><li>SINGA</li><li>CNTK</li></ul></li><li>重叠计算/通信<ul><li>WFBP</li><li>BytePS</li></ul></li><li>弹性参数服务器<ul><li>EPS</li><li>Pathways</li></ul></li></ul></li></ul></li><li>去中心化并行训练（AllReduce）<ul><li>工作流程<ul><li>不同于参数服务器模式需要 PS 和Worker 两类工作节点，在 AllReduce模式中只需要 Worker 节点， 模型参数或梯度只在 Worker 之间传输，每个Worker 都是平等的</li><li>将所有 Worker连接成一个逻辑环，每个 Worker把本地计算得到的梯度划分成 N份并依次把自己的梯度同步给下一个邻居Worker，总共经过 2*(N-1)轮同步，才能够完成所有 Worker 的梯度更新</li></ul></li><li>优化方案<ul><li>分层同步<ul><li>Hierarchical-AllReduce</li><li>2D-Torus AllReduce</li><li>HiPS</li></ul></li><li>异构问题<ul><li>BlueConnect</li><li>Blink</li><li>FlexReduce</li><li>DS-Sync</li></ul></li></ul></li></ul></li><li>网内聚合技术<ul><li>基于可编程网络设备（如可编程交换机、 FPGA 或智能网卡等）的计算能力加速各种聚合应用</li><li><figure><img src="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/3.png" alt="常见网内聚合解决方案对比"><figcaption aria-hidden="true">常见网内聚合解决方案对比</figcaption></figure></li></ul></li></ul></li><li>研究内容<ul><li>基于 Ring-AllReduce 与网内聚合的混合同步算法</li><li>大规模分布式机器学习训练的网内聚合CINA链式扩展策略</li></ul></li></ul><h1 id="第二章-相关技术概述">第二章 相关技术概述</h1><ul><li>分布式并行训练策略<ul><li>数据并行训练<ul><li>核心原理​<ul><li>数据集切分到不同计算节点，每个节点持有完整模型副本进行本地训练</li></ul></li><li>同步机制<ul><li>PS-Worker模式：Worker推送梯度至PS，PS聚合后广播更新（易带宽瓶颈）</li><li>AllReduce模式：节点间直接同步梯度（无中心节点）</li></ul></li><li>挑战<ul><li>通信开销随节点数增长，可能引发掉队者问题</li></ul></li><li><figure><img src="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/4.png" alt="分布式数据并行训练"><figcaption aria-hidden="true">分布式数据并行训练</figcaption></figure></li></ul></li><li>模型并行训练<ul><li>核心原理<ul><li>模型按层/神经元切分到不同节点</li></ul></li><li>划分策略<ul><li>横向按层划分​<ul><li>节点负责特定网络层（层数多时适用）</li></ul></li><li>纵向跨层划分<ul><li>单层参数矩阵分块（神经元多时适用）</li></ul></li><li>混合划分<ul><li>结合横向与纵向策略</li></ul></li></ul></li><li><figure><img src="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/5.png" alt="分布式模型并行训练"><figcaption aria-hidden="true">分布式模型并行训练</figcaption></figure></li></ul></li></ul></li><li>网内聚合<ul><li>可编程交换机<ul><li>核心架构<ul><li>RMT（可重构匹配表）模型支撑数据包处理</li></ul></li><li>关键部件<ul><li>解析器​：提取/修改数据包头部字段</li><li>匹配部件​：执行流表规则（匹配+动作集）</li><li>编程语言：P4定义数据包处理流程</li></ul></li><li>挑战限制<ul><li>聚合流量可能高达数十个 Gb 甚至 Tb，远超 RMT 交换机的内存容量</li><li>SRAM/TCAM内存仅数十MB，需精细管理</li></ul></li></ul></li><li>网内聚合的应用<ul><li>分布式机器学习<ul><li>减少网络流量与主机计算负担</li></ul></li><li>类MapReduce应用<ul><li>使用网内聚合在交换机侧完成部分数据的规约任务， 在 Reduce阶段减少发送给 Reducer 节点的数据， 降低 Incast 现象出现的概率</li></ul></li><li>分布式存储修复<ul><li>减少数据传输量、提高修复效率、降低存储节点负载</li></ul></li></ul></li></ul></li><li>集合通信及分布式训练框架<ul><li>集合通信<ul><li>Broadcast<ul><li>单节点数据分发至所有节点</li></ul></li><li>Gather/AllGather​<ul><li>收集所有节点数据</li></ul></li><li>Reduce/AllReduce<ul><li>跨节点数据聚合（求和/最大值等）</li></ul></li><li>Scatter/Reduce-Scatter<ul><li>数据分块分发与局部聚合</li></ul></li></ul></li><li>分布式训练框架<ul><li>TensorFlow​<ul><li>数据流图架构，支持gRPC通信</li><li>高级API与低级API灵活适配</li></ul></li><li>PyTorch<ul><li>动态计算图，支持GLOO/MPI/NCCL通信后端</li></ul></li><li>MXNet<ul><li>跨语言支持，轻量级分布式训练</li></ul></li></ul></li></ul></li></ul><h1 id="第三章-基于-ring-allreduce-与网内聚合的混合同步算法设计">第三章基于 Ring-AllReduce 与网内聚合的混合同步算法设计</h1><ul><li>问题分析<ul><li>Ring-AllReduce 同步算法<ul><li>算法逻辑<ul><li>所有计算节点在逻辑拓扑上形成一个环，计算节点反向传播结束得到梯度后，会将梯度均匀切分成n份。每个节点错开将其中一份梯度发送给右邻居，并接收左邻居的一份梯度与本地梯度进行聚合。然后每个节点再将上一步聚合好的一份梯度继续发送给右邻居，重复上一步的操作。在进行n-1步后，每个节点都将得到一份聚合了所有节点梯度的结果。之后每个节点继续将聚合结果发送给右邻居，同时接收左邻居的聚合结果并覆盖本地位置的梯度。然后每个节点再将上一步接收的聚合结果继续发送给右邻居，重复上一步的操作。在进行n-1 步后，每个节点都将得到整份聚合了所有节点梯度的结果</li></ul></li><li>优势<ul><li>通信量固定（不超过2倍模型大小）</li></ul></li><li>缺陷<ul><li>通信延迟随节点数线性增长</li></ul></li><li><figure><img src="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/6.png" alt="Ring-AllReduce 同步算法示意图"><figcaption aria-hidden="true">Ring-AllReduce同步算法示意图</figcaption></figure></li></ul></li><li>网内聚合算法<ul><li>算法逻辑<ul><li>计算节点将梯度打包发送给可编程交换机，可编程交换机接收到梯度数据包之后寻找到对应的聚合器进行聚合。当聚合器识别到聚合完所有计算节点的梯度数据包之后，将对聚合结果进行打包并广播给所有计算节点</li></ul></li><li>优势<ul><li>将主机侧的聚合操作卸载到交换机侧，在网络中减少聚合流量，降低通信开销</li></ul></li><li>缺陷<ul><li>多任务争抢交换机内存导致效率下降</li></ul></li><li>内存分配机制对比<ul><li>静态固定内存分配<ul><li>每个任务在可编程交换机中平均分配一块内存，任务之间相互隔离，互不影响</li><li>内存利用率低</li></ul></li><li>动态共享内存分配<ul><li>内存由多个任务共享，每个任务的梯度数据包按照先到先服务的机制占用聚合器。此外ESA 还能通过优先级机制抢占已被占用的聚合器</li><li>需要PS节点容错，有可能将回退成 PS-Worker 的训练模式</li></ul></li><li>在多训练任务的场景下采用动态共享内存分配模式更能充分发挥网内聚合的性能</li></ul></li></ul></li></ul></li><li>混合同步算法设计(RA-INA)<ul><li>整体概述<ul><li>主要流程<ol type="1"><li>初始化工作，在同步开始时，可编程交换机将内存划分成大小相同的聚合器，每个聚合器负责一组梯度的聚合任务。计算节点将梯度切分成大小与聚合器内存相同的梯度块，并将梯度块分组，然后对按组将梯度块打包成梯度数据包发送到可编程交换机中进行网内聚合</li><li>当某个节点的梯度数据包在可编程交换机中寻找到连续的 n个聚合器时，该梯度数据包将批量占领这 n个聚合器，并将梯度缓存在对应的聚合器中</li><li>部分梯度块将转而执行网内聚合算法，并在完成所有计算节点的梯度聚合工作之后，可编程交换机会将聚合结果广播给每个计算节点</li><li>若没有在可编程交换机中寻找到满足要求的聚合器组，则该梯度数据包所在的梯度组将继续执行算法的下一步</li><li>如果之后 算法执行到 n-1 步之后，即AllGather 操作时，该梯度组将不再尝试寻找空闲聚合器， 继续完成 AllGather 操作</li></ol></li><li>核心理念<ul><li>动态混合执行<ul><li>梯度同步过程在 ​Ring-AllReduce​ 与​网内聚合间动态切换，通过交换机内存占用状态决策执行路径</li></ul></li><li>批量抢占机制<ul><li>梯度数据包到达交换机时，尝试批量占领与计算节点数相等的聚合器组（非单个抢占），成功则切换网内聚合</li></ul></li></ul></li><li>过程示例<ul><li>单任务<ul><li><figure><img src="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/7.png" alt="单任务时 RA-INA 算法的同步过程示例"><figcaption aria-hidden="true">单任务时 RA-INA算法的同步过程示例</figcaption></figure></li></ul></li><li>多任务<ul><li><figure><img src="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/8.png" alt="多任务时 RA-INA 算法的同步过程示例"><figcaption aria-hidden="true">多任务时 RA-INA算法的同步过程示例</figcaption></figure></li></ul></li></ul></li></ul></li></ul></li><li>主机侧逻辑设计<ul><li>数据预处理<ul><li>梯度切分<ul><li>按 ​64个梯度元素/块切分</li><li>n个梯度块为一组（n=节点数），形成逻辑分组</li></ul></li><li>数据包格式<ul><li><figure><img src="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/9.png" alt="梯度数据包的包格式"><figcaption aria-hidden="true">梯度数据包的包格式</figcaption></figure></li></ul></li></ul></li><li>通信控制逻辑<ul><li>滑动窗口<ul><li>每组梯度独立维护状态机，完成一组后滑动至下一组</li></ul></li><li>浮点处理<ul><li>梯度缩放为32位整数传输，交换机聚合后主机侧还原为浮点数</li></ul></li><li>ACK响应逻辑<ul><li>接收聚合结果后返回ACK，触发交换机释放聚合器</li><li>超时未收到ACK则重传数据包</li></ul></li></ul></li></ul></li><li>交换机侧逻辑设计<ul><li>聚合器结构设计<ul><li><figure><img src="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/10.png" alt="聚合器结构"><figcaption aria-hidden="true">聚合器结构</figcaption></figure></li></ul></li><li>处理流程<ul><li>聚合器匹配<ul><li>根据包头<code>job_id</code>和<code>group_index</code>定位聚合器组​</li><li>若未占用，遍历寻找连续n个空闲聚合器​</li></ul></li><li><strong>数据聚合</strong>​<ul><li>校验<code>bitmap</code>防止重复聚合</li><li>整型梯度累加到<code>data</code>区，更新<code>bitmap</code>和<code>counter</code></li></ul></li><li><strong>广播触发</strong><ul><li>当<code>counter == n</code>且<code>bitmap</code>全1时，广播聚合结果</li></ul></li></ul></li></ul></li><li>可靠性设计<ul><li>丢包处理机制<ul><li>主机→交换机丢包<ul><li>2MSL未收到ACK</li><li>重传梯度数据包</li></ul></li><li>交换机→主机丢包<ul><li>2MSL未收到结果ACK</li><li>交换机重发聚合结果</li></ul></li><li>ACK丢包<ul><li>重复数据包触发bitmap校验</li><li>丢弃重复包，补发ACK</li></ul></li></ul></li></ul></li><li>实验分析<ul><li>网内聚合性能影响因素分析<ul><li>内存利用率高</li><li>任务数影响小</li><li>内存不足性能衰减小</li></ul></li><li>单任务时的训练吞吐量对比<ul><li>比Ring-AllReduce ​吞吐量提升57%</li><li>比PS-Worker 加速2.0倍</li></ul></li><li>多任务时的平均任务完成时间对比<ul><li>RA-INA比SwitchML ​JCT降低25.4%</li><li>RA-INA比Ring-AllReduce ​JCT降低18.1%</li></ul></li></ul></li></ul><h1 id="第四章-大规模分布式训练的网内聚合扩展策略设计">第四章大规模分布式训练的网内聚合扩展策略设计</h1><ul><li>问题分析<ul><li>HINA分层网内聚合扩展策略<ul><li>同步流程<ul><li>首先所有服务器中的计算节点将梯度数据包向上发送到各自所在的 ToR交换机进行第一次网内聚合。 之后 ToR交换机继续向上将聚合好的梯度数据包发送给 ToR 交换机所连接的 AGG 交换机，进行第二次网内聚合。 然后 AGG交换机仍然将聚合好的梯度数据包向上发送给所连接的Core交换机进行最后一次网内聚合。 最后作为根节点的 Core交换机将得到所有计算节点梯度数据包的聚合结果， 并原路进行组播。在每一层中，该层的交换机都将进一步组播梯度数据包，最终到达每个计算节点，完成本次梯度同步</li><li><figure><img src="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/11.png" alt="HINA 在 Fat-Tree 网络拓扑中构建的聚合树"><figcaption aria-hidden="true">HINA 在 Fat-Tree网络拓扑中构建的聚合树</figcaption></figure></li></ul></li><li>缺陷<ul><li>需替换多层级交换机（ToR+AGG+Core），部署成本高</li></ul></li></ul></li><li>MTINA多树网内聚合扩展策略<ul><li>同步流程<ul><li>MTINA 将根据参与训练任务的计算节点分布情况，以 Core交换机为根节点初始化生成多棵聚合树。 与 HINA 中生成的聚合树相同， MTINA中每棵聚合树的叶子节点均为计算节点，非叶子节点均为具有计算功能的可编程交换机</li><li><figure><img src="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/12.png" alt="MTINA 在 Fat-Tree 网络拓扑中构建的聚合树"><figcaption aria-hidden="true">MTINA 在 Fat-Tree网络拓扑中构建的聚合树</figcaption></figure></li></ul></li><li>缺陷<ul><li>构建多聚合树需全网可编程交换机，成本激增</li></ul></li></ul></li></ul></li><li>链式网内聚合扩展策略设计<ul><li>整体结构(以Spine Leaf 网络架构为例)<ul><li>网络拓扑​<ul><li>Spine-Leaf架构，仅替换Leaf层为可编程交换机</li></ul></li><li>四阶段流水线：<ol type="1"><li>机内Ring-Reduce​<ul><li>GPU间高带宽聚合梯度至Master Node</li></ul></li><li>机架内INA<ul><li>ToR交换机聚合本机架Master Node数据</li></ul></li><li>机架间链式聚合​<ul><li>ToR交换机形成流水线，跨机架迭代聚合</li></ul></li><li>结果组播<ul><li>最终聚合结果广播回Master Node</li></ul></li></ol></li></ul></li><li>机内聚合策略<ul><li>主节点选择​<ul><li>规则<ul><li>每台服务器固定选择末位GPU为Master Node</li></ul></li><li>作用<ul><li>作为机内聚合结果缓存点与机间通信代理。</li></ul></li></ul></li><li>Ring-Reduce流水线​<ul><li>执行流程<ul><li>梯度切分<ul><li>每GPU梯度分k块</li></ul></li><li>Reduce-Scatter​<ol type="1"><li><span class="math inline"><em>G</em><sub>(<em>i</em>, 0)</sub> → <em>G</em><sub>(<em>i</em>, 1)</sub></span>发送块0，同时接收<span class="math inline"><em>G</em><sub>(<em>i</em>, 3)</sub> → <em>G</em><sub>(<em>i</em>, 0)</sub></span>块3</li><li><span class="math inline"><em>G</em><sub>(<em>i</em>, 1)</sub> → <em>G</em><sub>(<em>i</em>, 2)</sub></span>发送块1，同时接收<span class="math inline"><em>G</em><sub>(<em>i</em>, 0)</sub> → <em>G</em><sub>(<em>i</em>, 1)</sub></span>块0</li><li>…</li></ol></li><li>聚合终点​<ul><li>经(n+k-2)步，所有梯度块聚合至<span class="math inline"><em>G</em><sub>(<em>i</em>, 3)</sub></span></li></ul></li></ul></li><li><figure><img src="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/13.png" alt="CINA 算法使用 4 个 GPU 进行 Ring-Reduce 操作的分解过程"><figcaption aria-hidden="true">CINA 算法使用 4 个 GPU 进行 Ring-Reduce操作的分解过程</figcaption></figure></li></ul></li><li>延迟公式​<ul><li><span class="math inline">$T_{机内RR} = \frac{(n+k-2)K}{kB_{dtd}} +(n+k-2)\alpha_{dtd}$</span>（n=GPU数,K=梯度大小n=GPU数,K=梯度大小n=GPU数,K=梯度大小）</li></ul></li></ul></li><li>机架内聚合策略<ul><li>ToR交换机<ul><li>核心功能<ul><li>聚合本机架内所有Master Node梯度</li><li>生成机架级聚合结果</li></ul></li></ul></li><li>通信重叠优化<ul><li>Master Node在接收第一份聚合梯度后立即发送至ToR交换机</li><li>覆盖机内剩余通信时间<ul><li><span class="math inline">$T_{重叠} \leq T_{机内RR} -\left(n-1)\times( \frac{K}{kB_{htl}} + \alpha_{htl} \right)$</span></li></ul></li></ul></li></ul></li><li>机架间聚合策略<ul><li>链式聚合原理<ul><li>Leaf交换机按Pod编号串联</li><li>工作流程<ol type="1"><li><span class="math inline"><em>L</em><em>S</em><sub>0</sub></span>：发送本地聚合结果<span class="math inline"><em>g</em>2<sub><em>t</em></sub><sup>(0)</sup></span>​至<span class="math inline"><em>L</em><em>S</em><sub>1</sub></span></li><li><span class="math inline"><em>L</em><em>S</em><sub>1</sub></span>​：计算<span class="math inline"><em>g</em>3<sub><em>t</em></sub><sup>(1)</sup>​ = <em>g</em>2<sub><em>t</em></sub><sup>(1)</sup>​ + <em>g</em>2<sub><em>t</em></sub><sup>(0)</sup></span>，发送至<span class="math inline"><em>L</em><em>S</em><sub>2</sub></span></li><li><span class="math inline"><em>L</em><em>S</em><sub>2</sub></span>​：计算<span class="math inline"><em>g</em>3<sub><em>t</em></sub><sup>(2)</sup>​ = <em>g</em>2<sub><em>t</em></sub><sup>(2)</sup>​ + <em>g</em>3<sub><em>t</em></sub><sup>(1)</sup></span>，发送至<span class="math inline"><em>L</em><em>S</em><sub>3</sub></span></li><li><span class="math inline"><em>L</em><em>S</em><sub>3</sub></span>​：获得全局聚合结果<span class="math inline"><em>g</em>3<sub><em>t</em></sub>​</span></li></ol></li></ul></li><li>通信重叠优化<ul><li><span class="math inline">$T_{CINA}=T_{机内RR}-T_{重叠}+\frac{K}{B_{htl}}+\alpha_{htl}+(L-1)\times(\frac{K}{kB_{lts}})+\frac{K}{kB_{min}}+\alpha_{min}$</span></li></ul></li></ul></li></ul></li><li>仿真分析<ul><li>理论通信开销推导与对比<ul><li>Ring-AllReduce<ul><li><span class="math inline">$T_{Ring}=2(N-1)\times(\frac{K}{NB_{min}}+\alpha_{min})$</span></li></ul></li><li>PS-Worker<ul><li><span class="math inline">$T_{PS}=(k+1)\times(\frac{K}{kB_{min}})+2\alpha_{min}$</span></li></ul></li><li>HINA<ul><li><span class="math inline">$T_{HINA}=T_{机内RR}-T_{重叠}+\frac{K}{B_{htl}}+\alpha_{htl}+2\times(\frac{K}{kB_{lts}}+\alpha_{lts})+\frac{K}{kB_{min}}+\alpha_{min}$</span></li></ul></li><li>MTINA<ul><li><span class="math inline">$T_{MTINA}=(k+1)\times(S+1)\times(\frac{K}{kSB_{min}})+(S+1)\times\alpha_{min}$</span></li></ul></li><li>优势对比<ul><li>CINA只在服务器与上层交换机间存在多对一通信的压力，并不会一层一层的积累通信压力</li><li>CINA 不需要像 HINA 和 MTINA 中将 Leaf 层和 Spine层的交换机替换为可编程交换机，本设计只需要更换 Leaf层的交换机，降低了部署难度和成本</li><li>三层网络最大支持节点数：​CINA 14,338 &gt; HINA 3,600</li><li>相同的节点规模下， CINA 的部署成本也比 HINA 和 MTINA 更有优势</li></ul></li></ul></li><li>仿真平台搭建<ul><li>平台架构设计​<ol type="1"><li>真实VGG19/ResNet50训练数据</li><li>NS3构建可扩展Spine-Leaf网络。</li><li>实现五种对比算法</li><li>丢包率与聚合正确性监控</li></ol></li><li>关键参数配置<ul><li><figure><img src="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/18.png" alt="仿真参数配置"><figcaption aria-hidden="true">仿真参数配置</figcaption></figure></li></ul></li><li>Trace激励源设计​<ul><li>PyTorch Profiler + 自定义Hook</li></ul></li><li><figure><img src="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/19.png" alt="仿真平台搭建流程"><figcaption aria-hidden="true">仿真平台搭建流程</figcaption></figure></li></ul></li><li>仿真结果与分析<ul><li>训练时间对比<ul><li><figure><img src="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/14.png" alt="VGG19 和 ResNet50 的训练时间对比"><figcaption aria-hidden="true">VGG19 和 ResNet50的训练时间对比</figcaption></figure></li></ul></li><li>吞吐量对比<ul><li><figure><img src="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/15.png" alt="VGG19 和 ResNet50 的训练吞吐量对比"><figcaption aria-hidden="true">VGG19 和 ResNet50的训练吞吐量对比</figcaption></figure></li></ul></li><li>拓展效率对比<ul><li><figure><img src="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/16.png" alt="VGG19 和 ResNet50 的训练拓展效率对比"><figcaption aria-hidden="true">VGG19 和 ResNet50的训练拓展效率对比</figcaption></figure></li></ul></li><li>加速比对比<ul><li><figure><img src="/2025/07/05/%E5%9F%BA%E4%BA%8E%E7%BD%91%E5%86%85%E8%81%9A%E5%90%88%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8A%A0%E9%80%9F%E7%AD%96%E7%95%A5%E7%A0%94%E7%A9%B6/17.png" alt="VGG19 和 ResNet50 的训练加速比对比"><figcaption aria-hidden="true">VGG19 和 ResNet50的训练加速比对比</figcaption></figure></li></ul></li></ul></li></ul></li></ul><h1 id="第五章-总结与展望">第五章 总结与展望</h1><ul><li>总结<ul><li>RA-INA混合同步算法<ul><li>解决痛点<ul><li>多任务争抢交换机内存导致的效率下降</li></ul></li><li>工作机制<ul><li>动态共享内存<ul><li>任务按梯度组抢占聚合器</li></ul></li><li>混合执行逻辑​<ul><li>Ring-AllReduce容错 + 网内聚合加速</li></ul></li></ul></li></ul></li><li>CINA链式扩展策略<ul><li>解决痛点<ul><li>大规模分布式训练场景下网内聚合的扩展性问题</li></ul></li><li>工作机制<ul><li>多阶段流水线<ul><li>机内Ring-Reduce → ToR层链式聚合</li></ul></li><li>扁平化的聚合结构</li></ul></li></ul></li></ul></li><li>展望<ul><li>同步算法对丢包容忍性</li><li>跨交换机甚至跨机架的实机实验平台</li><li>网内聚合应用在分布式模型并行训练场景，研究异步训练下的网内聚合算法设计</li><li>对于其他的可编程网络设备研究其网内聚合的分布式机器学习加速策略</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>在网计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>在网计算</tag>
      
      <tag>2025</tag>
      
      <tag>网内聚合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于在网计算的分布式系统加速方法</title>
    <link href="/2025/06/29/%E5%9F%BA%E4%BA%8E%E5%9C%A8%E7%BD%91%E8%AE%A1%E7%AE%97%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%8A%A0%E9%80%9F%E6%96%B9%E6%B3%95/"/>
    <url>/2025/06/29/%E5%9F%BA%E4%BA%8E%E5%9C%A8%E7%BD%91%E8%AE%A1%E7%AE%97%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%8A%A0%E9%80%9F%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="基本信息">基本信息</h2><ul><li>背景<ul><li>在网计算是后摩尔时代提升算力的有效方法</li><li>分布式系统扩展面临功耗墙、存储墙，搬动数据开销达到整体70%</li></ul></li><li>定义<ul><li>在网计算是将标准应用卸载到网络设备上的计算模式</li><li>In-Network Computing is the offloading of standard applications torun within network devices</li></ul></li><li>意义<ul><li>压缩网络流量，低时延通信，高速计算</li><li>适用于分布式应用加速，如：分布式大模型训练、分布式数据分析、分布式存储系统</li></ul></li><li>与传统方案对比<ul><li>传统方案的现状<ul><li>分层结构各层独立，各自优化，形成生态，性能无法达到最优</li><li>应用异构性较大，形成各自的通信模式</li><li><img src="/2025/06/29/%E5%9F%BA%E4%BA%8E%E5%9C%A8%E7%BD%91%E8%AE%A1%E7%AE%97%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%8A%A0%E9%80%9F%E6%96%B9%E6%B3%95/1.png"></li></ul></li><li>在网计算的发展空间<ul><li>大型集群计算成为新趋势，集群归一方所有，分层设计的前提不再具备</li><li>各层具备可编程性、可定制性</li><li>集群建设成本高昂，提升效率意义重大 <img src="/2025/06/29/%E5%9F%BA%E4%BA%8E%E5%9C%A8%E7%BD%91%E8%AE%A1%E7%AE%97%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%8A%A0%E9%80%9F%E6%96%B9%E6%B3%95/2.png"></li></ul></li></ul></li><li>发展路线<ul><li>打通二至五层，各应用领域独立设计；在各个应用领域验证并取得收益</li><li>领域间逐步整合，重新设计通信库标准；使应用开发者迁移到新的开发模式</li><li>功能下沉，更新设备，进一步提升性能；促进大规模商业化生产</li></ul></li></ul><h2 id="技术方案">技术方案</h2><ol type="1"><li><p>加速分布式机器学习 【前置信息】</p><ul><li>背景<ul><li>机器学习：自然语言处理、计算机视觉、智能运维</li><li>分布式机器学习：增长的数据集、增长的模型、场景要求(联邦学习)</li></ul></li><li>机器学习训练算法<ul><li>重复迭代计算梯度，更新模型直至收敛</li><li>分布式训练：每个worker计算梯度 –&gt; 所有梯度聚合并返回给worker–&gt; 更新模型</li></ul></li><li>分布式训练参数服务器（Parameter Server, PS）<ul><li>假设：N个worker，梯度大小为M</li><li>通信量 worker: M PS: N * M 【问题与目标】</li></ul></li><li>问题<ul><li>PS链路成为瓶颈</li></ul></li><li>目标<ul><li>主要目标：使用在网计算加速分布式训练</li><li>其他目标：兼容性、多任务、跨机柜</li></ul></li></ul><p>【方案1】交换机取代PS (NetReduce)</p><ul><li>目标<ul><li>主要目标： 使用在网计算加速分布式训练</li><li>其他目标：与RDMA兼容</li></ul></li><li>PS的类型及工作方式<ul><li>服务器<ol type="1"><li>每个worker把数据发送到PS</li><li>PS把数据求和</li><li>PS将结果广播给worker</li></ol></li><li>交换机<ol type="1"><li>交换机能流式处理报文，但是不能缓存大块数据</li><li>交换机没有四层协议保证数据块完整</li></ol></li></ul></li><li>体系结构<ul><li>Worker：梯度消息被组织为一个报文序列，维护一个滑动窗口发送报文，假设窗口最大值为W</li><li>交换机：内存组织为一个聚合器数组，大小为N <img src="/2025/06/29/%E5%9F%BA%E4%BA%8E%E5%9C%A8%E7%BD%91%E8%AE%A1%E7%AE%97%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%8A%A0%E9%80%9F%E6%96%B9%E6%B3%95/3.png"></li></ul></li><li>工作流程<ol type="1"><li>Worker发送梯度报文，交换机通过聚合器数组实时聚合（agtr.idx =PSN%N）</li><li>一个聚合器中的聚合完成（通过bitmap判断），将结果组播给workers</li><li>worker的滑动窗口继续滑动，发送新的报文</li></ol></li><li>性能结果<ul><li>NetReduce提升训练效率，获得在网聚合和RDMA双重性能增益</li><li>训练AlexNet比Ring AllReduce快45%</li></ul></li><li>小结<ul><li>可以用交换机替换PS</li><li>可以做到对传输层透明，与RDMA集成</li><li>内存管理：交换机内存为端侧窗口两倍</li></ul></li></ul><p>【方案2】 聚合传输协议设计ATP</p><ul><li>背景<ul><li>多租户：多任务共享基础设施</li><li>多机柜：BERT-Large训练跨多机柜</li></ul></li><li>目标<ul><li>主要目标：使用在网计算加速分布式训练</li><li>次要目标：支持多租户任务、支持跨机柜部署</li></ul></li><li>内存分配类型<ul><li>静态交换机内存分配<ul><li>划分交换机内存为隔离的区域，分配给多任务</li><li>交换机内存低效率、集成复杂</li></ul></li><li>动态交换机内存分配<ul><li>交换机内存为一个聚合器资源池，对于每个任务的报文采用先到先服务</li><li>去中心化聚合器寻址</li><li>Agtr.idx = Hash(JobID, PSN)</li></ul></li></ul></li><li>体系结构<ul><li>保留PS，寻址可能失败，需要回退机制（Fallback），交换机难以正确处理重传报文</li><li>聚合器，记录JobID、Seq，检测冲突，释放需要由ACK完成</li></ul></li><li>工作流程<ol type="1"><li>worker端维护滑动窗口，发送梯度报文</li><li>梯度报文抵达交换机，进行寻址</li><li>PS接到聚合结果或者透传报文，完成聚合，返回ACK</li><li>ACK抵达交换机，释放聚合器,推动滑动窗口</li></ol></li><li>性能结果<ul><li>通信瓶颈任务吞吐量提升显著，多任务竞争下资源利用率更高</li></ul></li><li>小结<ul><li>统计复用交换机，利用率更高</li><li>正确性机制更复杂</li></ul></li></ul><p>【方案1与方案2对比】</p><ul><li>组成<ul><li>方案1：交换机</li><li>方案2：交换机+PS</li></ul></li><li>寻址机制<ul><li>方案1：冲突避免(模运算)</li><li>方案2：冲突探测(Hash)</li></ul></li><li>内存使用<ul><li>方案1：2倍窗口</li><li>方案2：1倍窗口</li></ul></li><li>内存分配<ul><li>方案1：隔离</li><li>方案2：共享</li></ul></li><li>适用范围<ul><li>方案1：单任务隔离</li><li>方案2：多任务共享</li></ul></li><li>优势<ul><li>方案1：可预测性能，不需PS</li><li>方案2：高资源利用率</li></ul></li></ul></li><li><p>分布式机器学习任务管理 【资源管理】</p><ul><li>应用和系统目标<ul><li>高性能，资源利用率，公平性</li></ul></li><li>策略<ul><li>循环（round robin），多级反馈队列（multi-level feedback queue）</li></ul></li></ul><p>【调度策略】</p><ul><li>最早截止时间优先（Earliest Deadline First）</li><li>优先将交换机内存分配给截止时间早的任务</li><li>剩余内存共享给BE任务和暂时无法满足的MD任务</li><li><span class="math display">$$\begin{array}{c}\text{Time}_{\text{job}} = \text{Epochs} \times \left(\text{Time}_{\text{comp}} +\dfrac{\text{Size}_{\text{model}}}{\text{Throughput}} \right)\\\\\text{Memory}_{\text{switch}} = \text{Throughput} \times\text{RTT}\end{array}$$</span></li></ul><p>【内存管理】</p><ul><li>交换机内存管理器<ul><li>北向接口：内存分配</li><li>南向接口：向终端发送内存区域(offset, size)，向交换机发送规则</li><li><img src="/2025/06/29/%E5%9F%BA%E4%BA%8E%E5%9C%A8%E7%BD%91%E8%AE%A1%E7%AE%97%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%8A%A0%E9%80%9F%E6%96%B9%E6%B3%95/4.png"></li></ul></li><li>寻址模式<ul><li>agtr.idx ← Hash(PSN, JobID)%Size + Offset</li><li>端侧计算地址，并封装在报文头部</li></ul></li></ul><p>【性能结果】</p><ul><li>交换机内存管理可以有效降低平均任务完成时间，提高服务满足率</li></ul></li><li><p>加速大数据分析系统</p><p>【挑战】</p><ul><li>大数据存在数据流聚合<ul><li>大数据系统中的 ReduceByKey()</li><li>数据库系统中的 sum 、 count 等</li></ul></li><li>大数据系统中的聚合为异步聚合<ul><li>同步聚合(机器学习)值流（value stream）<ul><li>键相同</li><li>键线性排列，可预知</li><li>键次数有界</li></ul></li><li>异步聚合（大数据）键值流（key-value stream)<ul><li>不同流中键不同</li><li>键无序，不可预知</li><li>键次数没有界</li></ul></li></ul></li></ul><p>【目标】</p><ul><li>目标<ul><li>适配不同的应用</li><li>提升系统效率</li><li>有正确性保证</li></ul></li></ul><p>【创新设计】</p><ul><li>提升系统有效吞吐率<ul><li>多元组报文</li><li>二维聚合器数组（Aggregator Array，AA）</li><li>端侧元组顺序重构<ul><li>将键的空间划分为互不重叠的子空间</li><li>Hash(Flow ID) –&gt;子空间</li><li>报文有多个槽位（slot）</li></ul></li><li>提升155倍处理速度</li></ul></li><li>可靠性和正确性<ul><li>基于seen状态位避免重复计算</li></ul></li><li>提升内存使用效率<ul><li>双副本AA动态切换，优先处理高频键</li></ul></li></ul><p>【性能结果】</p><ul><li>词频统计任务耗时比Spark（56核）减少50%以上，CPU利用率显著降低</li></ul></li><li><p>通信库设计 【背景】</p><ul><li>在网计算对于应用（框架）开发者并不友好，学习曲线陡峭，难以集成到分布式系统中</li><li><img src="/2025/06/29/%E5%9F%BA%E4%BA%8E%E5%9C%A8%E7%BD%91%E8%AE%A1%E7%AE%97%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%8A%A0%E9%80%9F%E6%96%B9%E6%B3%95/5.png"></li></ul><p>【目标】</p><ul><li>实现对开发者友好的通信计算库</li></ul><p>【实现方法】</p><ul><li>INC应用分类：同步聚合、异步聚合、键值读写、共识协议</li><li>统一各分类中的数据格式</li><li>统一交换机中的原语</li><li>统一应用编程接口</li><li>系统集成</li></ul><p>【性能结果】</p><ul><li>节约代码行数</li><li>对比其他INC方案性能接近，对比端侧系统吞吐量更高、时延更低</li></ul></li></ol><h2 id="总结">总结</h2><ul><li>在网计算是有效提升分布式应用效率的一种手段</li><li>在网计算应用场景广泛，也是一个很大的研究空间</li></ul>]]></content>
    
    
    <categories>
      
      <category>在网计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>在网计算</tag>
      
      <tag>2025</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/06/26/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/06/26/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><p>今天心血来潮，搭了自己的博客，希望长更新，加油。</p><p>在这之前的文章都是我后面搬上去的，为了表示对于时间的尊重，我还是按照原时间排列。</p><p>此文章可以作为姓名墙，要是有幸被您访问，可以在评论区留下你的姓名呀~</p><p>行秋镇文底</p><figure><img src="/2025/06/26/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png" alt="test"><figcaption aria-hidden="true">test</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高考一周年的回忆</title>
    <link href="/2025/06/07/%E9%AB%98%E8%80%83%E4%B8%80%E5%91%A8%E5%B9%B4%E7%9A%84%E5%9B%9E%E5%BF%86/"/>
    <url>/2025/06/07/%E9%AB%98%E8%80%83%E4%B8%80%E5%91%A8%E5%B9%B4%E7%9A%84%E5%9B%9E%E5%BF%86/</url>
    
    <content type="html"><![CDATA[<p>2024年6月7日，一切都如往常一般，2024年6月9日，一切画上了最后的句号。</p><p>不知不觉，已经过去1年了，那个战场与我而言就是熟悉又是陌生。我不知道现在的自己是否还能和1年前的自己一样充满自信。这一年里，晚上睡觉的时候，我有时还能在梦中回到那个高三4班，回到进才楼，回到那个第一排讲台旁边的位置，回到与玉芬、喜哼、王博欢笑的场景。但这终究是梦，梦是回不去的。更让人害怕的是，随着时间的推移，能梦到的过去会越来越稀薄，直到有一天，过去在梦中也成为了过去，高考就真的只是口中的一个被赋予了各种回忆的抽象集合的代名词了。很害怕，那个时候，当我谈起自己的高考的时候，是否也会像自己的师长那般，想说却说不出任何自己的细节了。</p><p>高考，青春这场大戏的最高潮，再也回不去了。浪潮之后的我们，不再是当年那个只会做题的你我了——再见了，高考。</p><p>怀念是个美丽的骗子，它只给你看过去的种种高光，却隐藏了那些同样重要却不被人注意的细节。当你翻看高考前的旧照片，回放曾经的旧场景，然后开始说服自己——那些在高考前的种种比眼下更好。但是，高考他已经过去了，彻底地过去了，一去不复返了。你的肉体在当下，心仍然活在那个早已不存在的时光，把当下交给那些早已离去的“你我他”。而你回忆中的“你我他”早已继续了自己的生活。他们在已经没有你的故事里找到了新的平衡，而你却依旧紧握着，死死地把时光攥在手里不想让它离去。</p><p>很遗憾，上面所述的就是我。这一年以来，我一次次回忆起过去的时光，就愈发的感到后悔。如果当时这样这样，我岂不是就可以那样那样了？而这一切都是假设罢了，假设是没有结果的，他让我在一个接着一个的假设中迷失自我。</p><p>寒假与玉芬、喜哼、洛熙一起回了学紫看望老师。又走过了那个鱼龙混杂的进才楼一楼，又走过了共同偷印资料的图书馆，又走过了那个逗仓鼠、兔子的生竞小教室，又走过了偷玩电脑的化竞阶梯教室。那些都是充满了回忆的地方，可是现在呢？当年自我自习狂潮的进才一楼如今再没见到一个新人、当年偷印资料的图书馆一楼被锁上大门、曾经动物多多的场所如今只留下几个空空的笼子、而阶梯教室的黑板上也不再是当年毕韧每周带来的新奇公式。一切都已经逝去了，在那时，我的心中充满了一股空虚感。是啊，斯人斯物皆已逝，我们何时来过、有何时离去呢？</p><p>一年以后的现在，我想对一年前的自己说：“不必这么紧张，放轻松，一场小小的考试而已，决定不了什么”。那个时候在高考前一晚还在疯狂背《种树郭橐驼传》的我肯定无法理解曾经朱振东在课堂上所说的“选择大于努力”一言，一切的一切都需要自己去感悟，去体会。</p><p>让过去留在它该留的地方吧。今天，比过去更需要你！</p><p>这次仅仅只是一个高考一周年小随笔，写的很乱，也是想到那写到哪，还望见谅。</p><div style="text-align: right;">——2025年6月7日星期六1:33于西电宿舍</div>]]></content>
    
    
    <categories>
      
      <category>思考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>高考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>首考日的回忆</title>
    <link href="/2025/01/06/%E9%A6%96%E8%80%83%E6%97%A5%E7%9A%84%E5%9B%9E%E5%BF%86/"/>
    <url>/2025/01/06/%E9%A6%96%E8%80%83%E6%97%A5%E7%9A%84%E5%9B%9E%E5%BF%86/</url>
    
    <content type="html"><![CDATA[<p>正如同金工划线，一次划成固然是好的，但当我们第一次划错了，并不代表这个工件已经无用了，相反我们可以细心地为它第二次划线。</p><div style="text-align: right;">——郑盛的最后一课</div><p>早上6点半，我一早来到了2楼实验室，一边啃着面包，一边再过最后一遍物理学史和实验题。在这之前，我虽然已经经历了大大小小好多次模考，但终究没有真正来过一次首考。现在，不到1个半小时，首考它真的来了。</p><p>早上7点出头，该进场了。我和同学们商业互吹着跨过“状元门”，与荣考最后击一下掌，哼着小曲进入了博识楼。因为学选考同时进行的关系，我还能看到好多高二的的xdx，不禁想起一年前的自己也是这样注视着前辈们走进物理考场。</p><p>7点半，我来到了自己的考场，坐到了自己的位置。一切都是如此平静，我的斜前方坐的是“丁神”。默念着“丁神祝我”，我习惯性地准备把笔袋放到抽屉了……然鹅，逆天考场检查，在我座位抽屉里赫然摆着物理教材全解和教科书！心里骂了好几遍清理考场的xdx，我举手示意了一下监考员。监考员带着笑容走了过来，也许以为是一些很平常的事情，然后我就看着她的笑容是如何快速凝固的（嘿嘿）。她也骂了一遍清考场的xdx，然后就把书全掏了出来，放到了讲台上。</p><p>7点50，发卷了，我大致翻了翻，太好了是电磁感应新情境，我们没救了！随着8点铃声一响，开始答题了，我也是拼尽全力开干选择题。嗯，这道牛二，这道平抛，这道宇宙航行，还是很轻松的，太好了是未知量估计压轴，可以看实验了。随着丁神第一个在我们考场翻卷子面了，我也开始被动能定理左一拳右，电磁感应右一脚。</p><p>9点了，高二的xdx放了。听着外面嘈杂的声音，我知道留给自己的只有半个小时了，我该如何收拾这残局呢……</p><p>中午12点，我放弃了午睡，又是啃着面包，还想做一遍镇海的压轴选择。不知怎的，做着做着就进入了经典的“一个人问你问题，然后一群人开始互相问来问去”的故事情节了。我也没有做完自己本来想要完成的静心的计划。心里想着互相提问也算背书，我也加入了聊天大群。</p><p>十二点四五十，又要进考场了，和卫捐又一次的击掌。当时我在心中还想着，这是和您最后一次见面了，拜拜了您嘞。</p><p>下午1点，怀着平静的心情再次进入考场。</p><p>1点20，看到了卷子，我大致扫了一眼，嗯，与考前想的没啥区别。</p><p>1点半，随着铃声我又开始了自己想象中的“冲锋”。很好，经典选择空了好多道。没事，不慌，大题只要不要太差还有救。就决定是你了，无机题，交出你的全部分数！然后……然后，我就被突如其来的计算题单杀了。为什么？！无机化学的部分怎么会出现计算题！可恶的出卷老登！问题不大，继续做反应原理，稳住阵脚！不是，诶呦，你干嘛……怎么要计算酸碱度了……</p><p>2点55，我绞尽脑汁，想出来2个同分异构体。</p><p>化学，不可战胜的。</p><p>刚考完化学，就马上要去考技术了。化学的失利，让我决定要好好再看看技术书。于是乎，看到了3点半。于是乎匆匆忙忙过安检。于是乎顺便和军辉和“昨晚答疑未出现”的牢郑击了下掌。</p><p>16点25，来到了信息部分的最后一个大题，我也相信自己可以摘下这颗明珠。心里想着如此，我便开始了自己的冲锋。</p><p>16点45，面对着还没有头绪的三个空，我选择了先去做通用。但正如军辉所说的那样，在做通用的时候，我脑子总是和我说“你信息最后一道大题没写出来”。但我没有办法，只能硬着头皮做。通用也是出现了新题，祖传的天人合一题目。</p><p>17点10分，杀到了通用最后一题，太好了是用非门做振荡器。想起来了，我一切都想起来了，这个结构我以前做过！等一下，丸辣，忘记咋搞了。我凭着自己的记忆，照猫画虎地画了一个。我知道，这道题，应该没什么人能做出来，毕竟这张卷子好像没多少人写过。但是信息那三个空却能决定生死。</p><p>17点28分，盯出来了，是桶，我们有救了。但是，脑子此时却突然掉线了。</p><p>17点半，技术考试结束。</p><p>2024年的1月6日便是如此结束了。我只记得自己像个孤魂一般，飘出了博识楼，来到了三楼餐厅点了一碗牛肉面。那是我记忆深刻的一天，也许是因为这碗面里面掺杂了我的眼泪吧。或许有不甘，有无奈，有遗憾，有懊悔，原来这才是首考。</p><p>2025年1月6日，恍惚间，距离我首考结束居然已经整整一年了。</p><p>如此巧合，今晚实在想不出来吃啥的我又在西北的这座大城市里给自己点了一碗牛肉面。又是18点多，又是一个人，又是这碗面，还是这团能让我眼睛蒙上白色的雾。今天的我又刚好考完了逆天的大学英语考试。</p><p>此时此刻竟正如彼时彼刻</p><div style="text-align: right;">敬我的2024年浙江首考一周年。</div><div style="text-align: right;">——晚上吃面忽然想起往事的小鲁</div><div style="text-align: right;">2025.1.6</div><div style="text-align: right;">于西电宿舍</div>]]></content>
    
    
    <categories>
      
      <category>思考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>2025</tag>
      
      <tag>高考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的2024</title>
    <link href="/2024/12/31/%E6%88%91%E7%9A%842024/"/>
    <url>/2024/12/31/%E6%88%91%E7%9A%842024/</url>
    
    <content type="html"><![CDATA[<p>很快啊，这样就已经来到了2024年的最后一年（牢大年的最后一天了……）。其实感觉2024年的第一天还在眼前，那天我还特意去径山寺给自己首考祈福，结果偶遇马克西姆，debuff加满，拼尽全力无法战胜（）。</p><p>但这一年也是确确实实过去了，在这个2024年我又经历了无数大大小小的事情。</p><p>一月是浙江特有的首考“快乐”时间。首考也是击碎了我自己对于赋分制的美好幻想，当我还在璃月港乱逛的时候，那份1年前的成绩短信也随之而来，物化的失利的确让人破防，从此同学之间都带上了首考分数的面具。当然如此沉重的一月也是有乐子的，我们也送走了牢郑（whatcan Isay）。就这样以一个传奇人物的陨落为开头，我为期半年的六边形生涯就此开始了。</p><p>二月开始备战三一了。三位一体确实是一个很有意思的东西，我也蛮喜欢的（也许是因为只需要动嘴皮子的原因吧）。但很遗憾，尽管备战了好久三一，最终省内却只报了一个杭电，而且还因为没交报名费的原因幽默出局，现在想想确实很幽默。</p><p>三月到四月就是回归刷刷题的时间了。不同于首考备战，物化技很难再回到过去大家一起竞速的时代，转而代之的便是大数学时代。逆天数学改革，19题确实与过去练习一坤年的21题的卷子不一样，而如今在25年到来之际，我也知道了，数学卷子又双叒叕改了，不过这就是后话了。这段时间，我感觉自己又回到了高三上的时间，和大家玩的玩、笑的笑、乐的乐，玩玩原神，打打万智牌，亦或者与大家讨论讨论人win与joker的逸闻。</p><p>五月拍毕业照了。那段时间，我经常会想到，居然还有不到一个月就要与大家告别了，时间可过的真快啊。这段时间强度拉满，也算是黎明前的黑暗吧。</p><p>六月，真正的高考来了。听了快18年了，从小到大我遇到的师长同龄们都跟我说，这是一场决定人生的考试，也是你一生最公平的考试。在以前我总是会想象当自己真的坐到高考考场上时，那个时候我会怎样？而事实告诉我，我依旧是平静地坐在考场中完成了高中生涯最后六份普普通通的卷子。当我交完化学卷子后，我是一片空白的。因为它的终于结束了，那个预告了18年的大boss终于结束了。我不知道自己当时是怀揣着怎样的心情回到2楼的那个实验室，尽管当时我已经知道化学的同分异构体没有写完。结束了，一切都结束了，我终于不用为解析几何费劲心思了、终于不用每天背作文模板了、终于不用每天做化学选择了。当然之后我也简单了参加了港中深和浙大海宁的三一，不过很显然，身处西安的我已经给出了答案——重在参与。最后在我生日正正好好一个月前，浙江省教育局给我发来了2024年以来第二封短信，出成绩了。</p><p>暑假的开头被志愿填充得焦头烂额，当然也是成功得知了自己的下家——泥电。一切都结束了，至此高中的最后一页也翻过去了，别了我的紫金港。接着就是准备电专的生活了，也是采购了一大堆电子产品，玩了好多游戏（当然也稍微学了一点）。这就是传说中最幸福的暑假！而我的IP也从跟着自己18年的杭州切换至西安服务器了。</p><p>九月又是一个金秋飘香的开学季，而我的朋友们，他们暂时是见不到了，不过我也迎来了新的朋友们。在这个九月我也做了好多18年以前从来没干过的事情，也真正体验到了传说已久的大学生活。</p><p>十月是一个悲伤的月份，就不必回忆了。</p><p>十一，十二月便是在适应大学生活后的时光了。在初来到西电这片土地的兴奋劲过去后，便是我平平淡淡的生活了。乐跑40次，学生组织开会，考试学习以及积极参加各类活动，的的确确时光就是这么过去了，我竟想不出一些刻苦铭心的事情。</p><p>行文至此，我已经简单地写完了自己这一年所经历的事情了。很遗憾，正如同《三体》中三维的物体跌落到二维后便会永远地失去一些细节一般，这一年的经历远远不会像我前面所描述的那样稀稀拉拉。这一年有你我的酸甜苦辣，有你我的点点滴滴。感谢各位在我的2024年剧本中的出现，有的也许是常驻嘉宾，有的也许只相遇在转瞬之间，但正是有了各位的出现，我的2024年才会如此具体丰富。</p><p>愿星河徜徉，未来一路有光。</p><p>各位，2025见！</p><div style="text-align: right;">2024年12月31日凌晨1点50分</div><div style="text-align: right;">鲁铭康</div><div style="text-align: right;">于西安电子科技大学</div><p><img src="/2024/12/31/%E6%88%91%E7%9A%842024/1.png"></p>]]></content>
    
    
    <categories>
      
      <category>思考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>年度回忆</tag>
      
      <tag>2024</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
